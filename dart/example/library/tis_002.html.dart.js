// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ExceptionImplementation = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FutureImpl = {"":
 ["_isComplete", "_lib0_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (!$.boolConversionCheck(this.get$isComplete()))
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw(t1);
  return this._lib0_value;
},
 get$stackTrace: function() {
  if (!$.boolConversionCheck(this.get$isComplete()))
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return $.boolConversionCheck(this.get$isComplete()) && this._exception == null;
},
 then$1: function(onSuccess) {
  $.functionTypeCheck(onSuccess);
  if ($.boolConversionCheck(this.get$hasValue()))
    onSuccess.call$1(this.get$value());
  else {
    var t1 = this.get$isComplete();
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.then$1$bailout(1, onSuccess, t1);
    if (!t1)
      this._successListeners.push(onSuccess);
    else {
      t1 = this._exceptionHandled;
      $.boolConversionCheck(t1);
      if (typeof t1 !== 'boolean')
        return this.then$1$bailout(2, t1, 0);
      if (!t1)
        throw $.$$throw(this._exception);
    }
  }
},
 then$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var onSuccess = env0;
      t1 = env1;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      $.functionTypeCheck(onSuccess);
    default:
      if (state === 0 && $.boolConversionCheck(this.get$hasValue()))
        onSuccess.call$1(this.get$value());
      else
        switch (state) {
          case 0:
            var t1 = this.get$isComplete();
            $.boolConversionCheck(t1);
          case 1:
            state = 0;
          case 2:
            if (state === 0 && !t1)
              this._successListeners.push(onSuccess);
            else
              switch (state) {
                case 0:
                  t1 = this._exceptionHandled;
                  $.boolConversionCheck(t1);
                case 2:
                  state = 0;
                  if (!t1)
                    throw $.$$throw(this._exception);
              }
        }
  }
},
 handleException$1: function(onException) {
  $.functionTypeCheck(onException);
  if ($.boolConversionCheck(this._exceptionHandled))
    return;
  if (this._isComplete) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = $.boolTypeCheck(onException.call$1(t1));
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); $.boolConversionCheck(t1.hasNext$0());) {
        var handler = t1.next$0();
        if ($.boolConversionCheck($.eq(handler.call$1(this._exception), true))) {
          this._exceptionHandled = true;
          break;
        }
      }
    if ($.boolConversionCheck(this.get$hasValue()))
      for (t1 = $.iterator(this._successListeners); $.boolConversionCheck(t1.hasNext$0());) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if ($.boolConversionCheck(!$.boolConversionCheck(this._exceptionHandled) && this._successListeners.length > 0))
      throw $.$$throw(this._exception);
  } finally {
    for (t1 = $.iterator(this._completionListeners); $.boolConversionCheck(t1.hasNext$0());) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._lib0_value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
},
 is$FutureImpl: true,
 is$Future: true
};

$$.CompleterImpl = {"":
 ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 is$Completer: true
};

$$.HashMapImplementation = {"":
 ["_keys?", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC);
  var t1 = $.hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0, 0);
  var t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1, 0, 0);
  var hash = (t1 & t3 - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null) {
      if ($.boolConversionCheck($.lt(insertionIndex, 0)))
        return hash;
      return insertionIndex;
    } else if ($.boolConversionCheck($.eq(existingKey, key)))
      return hash;
    else if ($.boolConversionCheck($.lt(insertionIndex, 0)) && $.CTC13 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = $.add(numberOfProbes, 1);
    $.intTypeCheck(numberOfProbes0);
    if (numberOfProbes0 !== (numberOfProbes0 | 0))
      return this._probeForAdding$1$bailout(3, numberOfProbes0, key, insertionIndex, hash, numberOfProbes);
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)));
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      key = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      numberOfProbes0 = env0;
      key = env1;
      insertionIndex = env2;
      hash = env3;
      numberOfProbes = env4;
      break;
  }
  switch (state) {
    case 0:
      if (key == null)
        throw $.$$throw($.CTC);
      var t1 = $.hashCode(key);
    case 1:
      state = 0;
      var t3 = $.get$length(this._keys);
    case 2:
      state = 0;
      $.intTypeCheck(t1);
      $.intTypeCheck(t3);
      var hash = $.intTypeCheck($.and(t1, $.sub(t3, 1)));
      var numberOfProbes = 1;
      var insertionIndex = -1;
    case 3:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!true)
                break L0;
              var existingKey = $.index(this._keys, hash);
              if (existingKey == null) {
                if ($.boolConversionCheck($.lt(insertionIndex, 0)))
                  return hash;
                return insertionIndex;
              } else if ($.boolConversionCheck($.eq(existingKey, key)))
                return hash;
              else if ($.boolConversionCheck($.lt(insertionIndex, 0)) && $.CTC13 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = $.add(numberOfProbes, 1);
              $.intTypeCheck(numberOfProbes0);
            case 3:
              state = 0;
              hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)));
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  if (key == null)
    throw $.$$throw($.CTC);
  var t1 = $.hashCode(key);
  var t2 = $.get$length(this._keys);
  $.intTypeCheck(t1);
  $.intTypeCheck(t2);
  var hash = $.intTypeCheck($.and(t1, $.sub(t2, 1)));
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.boolConversionCheck($.eq(existingKey, key)))
      return hash;
    var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1));
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)));
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.intTypeCheck($.add(this._numberOfEntries, 1));
  if ($.boolConversionCheck($.ge(newNumberOfEntries, this._loadLimit))) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  var numberOfFree = $.intTypeCheck($.sub($.intTypeCheck($.sub($.intTypeCheck($.get$length(this._keys)), newNumberOfEntries)), this._numberOfDeleted));
  if ($.boolConversionCheck($.gt(this._numberOfDeleted, numberOfFree)))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  $.intTypeCheck(newCapacity);
  $.assert($.eq($.and(newCapacity, $.sub(newCapacity, 1)), 0));
  var capacity = $.get$length(this._keys);
  $.intTypeCheck(capacity);
  if (capacity !== (capacity | 0))
    return this._grow$1$bailout(1, newCapacity, capacity);
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4));
  var oldKeys = $.listTypeCheck(this._keys);
  var oldValues = $.listTypeCheck(this._values);
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, {'E': $.getRuntimeTypeInfo(this).V});
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity)); i = $.intTypeCheck($.add(i, 1))) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC13)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key));
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state, newCapacity, capacity) {
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4));
  var oldKeys = $.listTypeCheck(this._keys);
  var oldValues = $.listTypeCheck(this._values);
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, {'E': $.getRuntimeTypeInfo(this).V});
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity)); i = $.intTypeCheck($.add(i, 1))) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC13)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key));
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var length$ = $.get$length(this._keys);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.clear$0$bailout(1, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = $.intTypeCheck(this._probeForAdding$1(key));
  if ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC13)
    this._numberOfEntries = $.intTypeCheck($.add(this._numberOfEntries, 1));
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$index$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key));
  if ($.boolConversionCheck($.lt(index, 0)))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key));
  if ($.boolConversionCheck($.ge(index, 0))) {
    this._numberOfEntries = $.intTypeCheck($.sub(this._numberOfEntries, 1));
    var value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC13);
    this._numberOfDeleted = $.intTypeCheck($.add(this._numberOfDeleted, 1));
    return value;
  }
  return;
},
 isEmpty$0: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  var length$ = $.get$length(this._keys);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.forEach$1$bailout(1, f, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC13))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC13))
      f.call$2(key, $.index(this._values, i));
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, {'E': $.getRuntimeTypeInfo(this).K});
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, {'E': $.getRuntimeTypeInfo(this).V});
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  var t1 = $.ListImplementation_List(8, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t1, {'E': $.getRuntimeTypeInfo(this).V});
  this._values = t1;
},
 is$HashMapImplementation: true,
 is$HashMap: true,
 is$Map: function() { return true; }
};

$$.HashSetImplementation = {"":
 ["_backingMap?"],
 "super": "Object",
 clear$0: function() {
  $.clear(this._backingMap);
},
 add$1: function(value) {
  $.indexSet(this._backingMap, value, value);
},
 remove$1: function(value) {
  if (!$.boolConversionCheck(this._backingMap.containsKey$1(value)))
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.forEach($.listSuperNativeTypeCheck(collection, 'is$Collection'), new $.HashSetImplementation_addAll__(this));
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  $.forEach(this._backingMap, new $.HashSetImplementation_forEach__(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  var result = $.propertyTypeCheck($.Set_Set($.getRuntimeTypeInfo(this).E), 'is$Set');
  $.forEach(this._backingMap, new $.HashSetImplementation_filter__(f, result));
  return result;
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  return $.some($.listSuperNativeTypeCheck(this._backingMap.getKeys$0(), 'is$Collection'), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._backingMap);
},
 get$length: function() {
  return $.get$length(this._backingMap);
},
 iterator$0: function() {
  return $.HashSetIterator$(this, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 HashSetImplementation$0: function() {
  this._backingMap = $.propertyTypeCheck($.HashMapImplementation$($.getRuntimeTypeInfo(this).E, $.getRuntimeTypeInfo(this).E), 'is$HashMapImplementation');
},
 is$HashSetImplementation: true,
 is$Set: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.HashSetIterator = {"":
 ["_entries", "_nextValidIndex"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._nextValidIndex;
  var t2 = this._entries;
  if (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior())
    return this.hasNext$0$bailout(1, t1, t2);
  var t4 = t2.length;
  if (t1 >= t4)
    return false;
  if (t1 < 0)
    throw $.ioore(t1);
  if (t2[t1] === $.CTC13)
    this._advance$0();
  return this._nextValidIndex < t2.length;
},
 hasNext$0$bailout: function(state, t1, t2) {
  if ($.ge(t1, $.get$length(t2)))
    return false;
  if ($.index(t2, this._nextValidIndex) === $.CTC13)
    this._advance$0();
  return $.lt(this._nextValidIndex, $.get$length(t2));
},
 next$0: function() {
  var t1 = this.hasNext$0();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC10);
  t1 = this._entries;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.next$0$bailout(2, t1);
  var t3 = this._nextValidIndex;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout: function(state, env0) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.hasNext$0();
      $.boolConversionCheck(t1);
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC10);
      t1 = this._entries;
    case 2:
      state = 0;
      var res = $.index(t1, this._nextValidIndex);
      this._advance$0();
      return res;
  }
},
 _advance$0: function() {
  var t1 = this._entries;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this._advance$0$bailout(1, t1, 0);
  var length$ = t1.length;
  var entry = null;
  do {
    var t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC13);
},
 _advance$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      length$ = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._entries;
    case 1:
      state = 0;
      var length$ = $.get$length(t1);
      $.intTypeCheck(length$);
    case 2:
      state = 0;
      var entry = null;
      do {
        var t2 = this._nextValidIndex + 1;
        this._nextValidIndex = t2;
        if ($.ge(t2, length$))
          break;
        entry = $.index(t1, this._nextValidIndex);
      } while (entry == null || entry === $.CTC13);
  }
},
 HashSetIterator$1: function(set_) {
  $.propertyTypeCheck(set_, 'is$HashSetImplementation');
  this._advance$0();
},
 is$Iterator: true
};

$$._DeletedKeySentinel = {"":
 [],
 "super": "Object"
};

$$.KeyValuePair = {"":
 ["key?", "value="],
 "super": "Object",
 is$KeyValuePair: true
};

$$.LinkedHashMapImplementation = {"":
 ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if ($.boolConversionCheck(this._map.containsKey$1(key))) {
    var t1 = this._map;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout(1, key, value, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key].get$element().set$value(value);
  } else {
    $.addLast(this._list, $.KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
    t1 = this._map;
    if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.operator$indexSet$2$bailout(2, key, t1, 0);
    var t3 = this._list.lastEntry$0();
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = t3;
  }
},
 operator$indexSet$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var key = env0;
      var value = env1;
      t1 = env2;
      break;
    case 2:
      key = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
    default:
      if (state === 1 || state === 0 && $.boolConversionCheck(this._map.containsKey$1(key)))
        switch (state) {
          case 0:
            var t1 = this._map;
          case 1:
            state = 0;
            $.index(t1, key).get$element().set$value(value);
        }
      else
        switch (state) {
          case 0:
            $.addLast(this._list, $.KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
            t1 = this._map;
          case 2:
            state = 0;
            $.indexSet(t1, key, this._list.lastEntry$0());
        }
  }
},
 operator$index$1: function(key) {
  var entry = $.propertyTypeCheck($.index(this._map, key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = $.propertyTypeCheck(this._map.remove$1(key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, {'E': $.getRuntimeTypeInfo(this).K});
  t1.index_1 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getKeys__(list, t1));
  $.assert($.eq(t1.index_1, $.get$length(this)));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, {'E': $.getRuntimeTypeInfo(this).V});
  t1.index_10 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getValues__(list, t1));
  $.assert($.eq(t1.index_10, $.get$length(this)));
  return list;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  $.forEach(this._list, new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.propertyTypeCheck($.HashMapImplementation$($.getRuntimeTypeInfo(this).K, 'DoubleLinkedQueueEntry<KeyValuePair<K, V>>'), 'is$HashMap');
  this._list = $.propertyTypeCheck($.DoubleLinkedQueue$('KeyValuePair<K, V>'), 'is$DoubleLinkedQueue');
},
 is$HashMap: true,
 is$Map: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"":
 ["_previous?", "_next?", "_element?"],
 "super": "Object",
 set$_previous: function(v) { this._previous = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 set$_next: function(v) { this._next = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 _link$2: function(p, n) {
  $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._next = $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._previous = $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  p.set$_next(this);
  n.set$_previous(this);
},
 append$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this).E)._link$2(this, this._next);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this).E)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = $.propertyTypeCheck(null, 'is$DoubleLinkedQueueEntry');
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
},
 is$DoubleLinkedQueueEntry: true
};

$$._DoubleLinkedQueueEntrySentinel = {"":
 ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC14);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC14);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
},
 is$_DoubleLinkedQueueEntrySentinel: true
};

$$.DoubleLinkedQueue = {"":
 ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addFirst$1: function(value) {
  this._sentinel.append$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0());)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 last$0: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 isEmpty$0: function() {
  var t1 = this._sentinel;
  var t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1 = this._sentinel;
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  var entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    f.call$1(entry.get$_element());
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
  var t1;
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  var entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    if ($.boolConversionCheck(f.call$1(entry.get$_element())))
      return true;
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
  return false;
  var t1;
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  var other = $.propertyTypeCheck($.Queue_Queue($.getRuntimeTypeInfo(this).E), 'is$Queue');
  var entry = $.propertyTypeCheck(this._sentinel.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    if ($.boolConversionCheck(f.call$1(entry.get$_element())))
      $.addLast(other, entry.get$_element());
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
  return other;
  var t1;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $.propertyTypeCheck($._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this).E), 'is$_DoubleLinkedQueueEntrySentinel');
},
 is$DoubleLinkedQueue: true,
 is$Queue: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":
 ["_sentinel", "_currentEntry"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._currentEntry.get$_next();
  var t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  var t1 = this.hasNext$0();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC10);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC10);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  this._currentEntry = $.propertyTypeCheck(this._sentinel, 'is$DoubleLinkedQueueEntry');
},
 is$Iterator: true
};

$$.JSSyntaxRegExp = {"":
 ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m = $.listTypeCheck($.regExpExec(this, $.checkString(str)));
  if (m == null)
    return;
  var matchStart = $.regExpMatchStart(m);
  var t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$.StringBufferImpl = {"":
 ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 isEmpty$0: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.stringTypeCheck($.toString(obj));
  if ($.boolConversionCheck(str == null || $.boolConversionCheck($.isEmpty(str))))
    return this;
  $.add$1(this._buffer, str);
  this._length = $.intTypeCheck($.add(this._length, $.get$length(str)));
  return this;
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(objects, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0());)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  var t1 = $.ListImplementation_List(null, 'String');
  $.setRuntimeTypeInfo(t1, {'E': 'String'});
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.stringTypeCheck($.StringImplementation_concatAll(this._buffer));
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
},
 is$StringBuffer: true
};

$$._MatchImplementation = {"":
 ["pattern", "str", "_start", "_end", "_groups"],
 "super": "Object",
 start$0: function() {
  return this._start;
},
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return this.group$1($.intTypeCheck(index));
}
};

$$.AssertionError = {"":
 [],
 "super": "Object"
};

$$.ArgumentError = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.NoSuchMethodError = {"":
 ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.StringBuffer_StringBuffer('');
  $.propertyTypeCheck(sb, 'is$StringBuffer');
  var t1 = this._arguments;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.toString$0$bailout(1, t1, sb);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, t1.length)); i = $.intTypeCheck($.add(i, 1))) {
    if ($.boolConversionCheck($.gt(i, 0)))
      $.add$1(sb, ', ');
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, $.NoSuchMethodError_safeToString(t1[i]));
  }
  t1 = this._existingArgumentNames;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.toString$0$bailout(2, sb, t1);
  var actualParameters = $.stringTypeCheck($.toString(sb));
  sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
  for (i = 0; $.boolConversionCheck($.lt(i, t1.length)); i = $.intTypeCheck($.add(i, 1))) {
    if ($.boolConversionCheck($.gt(i, 0)))
      $.add$1(sb, ', ');
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    $.add$1(sb, t1[i]);
  }
  var formalParameters = $.stringTypeCheck($.toString(sb));
  t1 = this._functionName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      sb = env1;
      break;
    case 2:
      sb = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var sb = $.StringBuffer_StringBuffer('');
      $.propertyTypeCheck(sb, 'is$StringBuffer');
      var t1 = this._arguments;
    case 1:
      state = 0;
      var i = 0;
      for (; $.boolConversionCheck($.lt(i, $.get$length(t1))); i = $.intTypeCheck($.add(i, 1))) {
        if ($.boolConversionCheck($.gt(i, 0)))
          $.add$1(sb, ', ');
        $.add$1(sb, $.NoSuchMethodError_safeToString($.index(t1, i)));
      }
      t1 = this._existingArgumentNames;
    case 2:
      state = 0;
      if (t1 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(sb) + ']';
      else {
        var actualParameters = $.stringTypeCheck($.toString(sb));
        sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
        for (i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1))); i = $.intTypeCheck($.add(i, 1))) {
          if ($.boolConversionCheck($.gt(i, 0)))
            $.add$1(sb, ', ');
          $.add$1(sb, $.index(t1, i));
        }
        var formalParameters = $.stringTypeCheck($.toString(sb));
        t1 = this._functionName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.IndexOutOfRangeException = {"":
 ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true
};

$$.ObjectNotClosureException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Object is not closure';
},
 is$Exception: true
};

$$.StackOverflowException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
},
 is$Exception: true
};

$$.FormatException = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"":
 ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.NoMoreElementsException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true
};

$$.EmptyQueueException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true
};

$$.UnsupportedOperationException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  return 'UnsupportedOperationException: ' + this._message;
},
 is$Exception: true
};

$$.NotImplementedException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"":
 ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.Object = {"":
 [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 hashCode$0: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$2: function(name$, args) {
  throw $.$$throw($.NoSuchMethodError$(this, $.stringTypeCheck(name$), $.listTypeCheck(args), null));
},
 startsWith$1: function($0) {
  return this.noSuchMethod$2("startsWith", [$0]);
 },
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$2("_getPropertyValue", [$0]);
 },
 getRange$2: function($0, $1) {
  return this.noSuchMethod$2("getRange", [$0, $1]);
 },
 append$1: function($0) {
  return this.noSuchMethod$2("append", [$0]);
 },
 hasNext$0: function() {
  return this.noSuchMethod$2("hasNext", []);
 },
 receive$1: function($0) {
  return this.noSuchMethod$2("receive", [$0]);
 },
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$2("_add_1", [$0, $1]);
 },
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$2("_postMessage_1", [$0, $1]);
 },
 removeLast$0: function() {
  return this.noSuchMethod$2("removeLast", []);
 },
 _serializeList$1: function($0) {
  return this.noSuchMethod$2("_serializeList", [$0]);
 },
 _complete$0: function() {
  return this.noSuchMethod$2("_complete", []);
 },
 _add$2: function($0, $1) {
  return this.noSuchMethod$2("_add", [$0, $1]);
 },
 clear$0: function() {
  return this.noSuchMethod$2("clear", []);
 },
 nextInt$1: function($0) {
  return this.noSuchMethod$2("nextInt", [$0]);
 },
 substring$2: function($0, $1) {
  return this.noSuchMethod$2("substring", [$0, $1]);
 },
 addLast$1: function($0) {
  return this.noSuchMethod$2("addLast", [$0]);
 },
 add$1: function($0) {
  return this.noSuchMethod$2("add", [$0]);
 },
 add$3$object$subject: function($0, $1, $2) {
  return this.noSuchMethod$2("add", [$0, $1, $2]);
 },
 add$10$but$endSentence$negative$object$positive$startSentence$subject$time$wholeSentence: function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  return this.noSuchMethod$2("add", [$0, $1, $2, $3, $4, $5, $6, $7, $8, $9]);
 },
 forEach$1: function($0) {
  return this.noSuchMethod$2("forEach", [$0]);
 },
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$2("_probeForLookup", [$0]);
 },
 isEmpty$0: function() {
  return this.noSuchMethod$2("isEmpty", []);
 },
 goto$1: function($0) {
  return this.noSuchMethod$2("goto", [$0]);
 },
 $dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$2("$dom_replaceChild", [$0, $1]);
 },
 canContinue$2: function($0, $1) {
  return this.noSuchMethod$2("canContinue", [$0, $1]);
 },
 _setAttachedInfo$2: function($0, $1) {
  return this.noSuchMethod$2("_setAttachedInfo", [$0, $1]);
 },
 getKeys$0: function() {
  return this.noSuchMethod$2("getKeys", []);
 },
 complete$1: function($0) {
  return this.noSuchMethod$2("complete", [$0]);
 },
 lastIndexOf$1: function($0) {
  return this.noSuchMethod$2("lastIndexOf", [$0]);
 },
 lastIndexOf$2: function($0, $1) {
  return this.noSuchMethod$2("lastIndexOf", [$0, $1]);
 },
 unregister$1: function($0) {
  return this.noSuchMethod$2("unregister", [$0]);
 },
 _clearAttachedInfo$1: function($0) {
  return this.noSuchMethod$2("_clearAttachedInfo", [$0]);
 },
 chanceToBlock$2: function($0, $1) {
  return this.noSuchMethod$2("chanceToBlock", [$0, $1]);
 },
 query$1: function($0) {
  return this.noSuchMethod$2("query", [$0]);
 },
 $dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$2("$dom_removeEventListener", [$0, $1, $2]);
 },
 filter$1: function($0) {
  return this.noSuchMethod$2("filter", [$0]);
 },
 then$1: function($0) {
  return this.noSuchMethod$2("then", [$0]);
 },
 previousEntry$0: function() {
  return this.noSuchMethod$2("previousEntry", []);
 },
 hasFlag$1: function($0) {
  return this.noSuchMethod$2("hasFlag", [$0]);
 },
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$2("_asNonSentinelEntry", []);
 },
 toSendPort$0: function() {
  return this.noSuchMethod$2("toSendPort", []);
 },
 send$1: function($0) {
  return this.noSuchMethod$2("send", [$0]);
 },
 send$2: function($0, $1) {
  return this.noSuchMethod$2("send", [$0, $1]);
 },
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$2("maybeCloseWorker", []);
 },
 call$0: function() {
  return this.noSuchMethod$2("call", []);
 },
 call$1: function($0) {
  return this.noSuchMethod$2("call", [$0]);
 },
 call$2: function($0, $1) {
  return this.noSuchMethod$2("call", [$0, $1]);
 },
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$2("call", [$0, $1, $2, $3]);
 },
 call$3$object$wholeSentence: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$1$max: function($0) {
  return this.noSuchMethod$2("call", [$0]);
 },
 call$2$negative: function($0, $1) {
  return this.noSuchMethod$2("call", [$0, $1]);
 },
 call$2$positive: function($0, $1) {
  return this.noSuchMethod$2("call", [$0, $1]);
 },
 call$1$script: function($0) {
  return this.noSuchMethod$2("call", [$0]);
 },
 call$2$wholeSentence: function($0, $1) {
  return this.noSuchMethod$2("call", [$0, $1]);
 },
 call$3$accessKey$hash: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$10$but$endSentence$negative$object$positive$startSentence$subject$time$wholeSentence: function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  return this.noSuchMethod$2("call", [$0, $1, $2, $3, $4, $5, $6, $7, $8, $9]);
 },
 call$3$object$subject: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$3$negative$reportOnlyOnAlive: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$3$object$positive: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$3$negative$object: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 call$3$endSentence$object: function($0, $1, $2) {
  return this.noSuchMethod$2("call", [$0, $1, $2]);
 },
 completeException$1: function($0) {
  return this.noSuchMethod$2("completeException", [$0]);
 },
 completeException$2: function($0, $1) {
  return this.noSuchMethod$2("completeException", [$0, $1]);
 },
 lookup$1: function($0) {
  return this.noSuchMethod$2("lookup", [$0]);
 },
 floor$0: function() {
  return this.noSuchMethod$2("floor", []);
 },
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$2("replaceAll", [$0, $1]);
 },
 _toList$0: function() {
  return this.noSuchMethod$2("_toList", []);
 },
 report$1: function($0) {
  return this.noSuchMethod$2("report", [$0]);
 },
 report$2$positive: function($0, $1) {
  return this.noSuchMethod$2("report", [$0, $1]);
 },
 report$2$negative: function($0, $1) {
  return this.noSuchMethod$2("report", [$0, $1]);
 },
 report$3$object$positive: function($0, $1, $2) {
  return this.noSuchMethod$2("report", [$0, $1, $2]);
 },
 report$3$negative$object: function($0, $1, $2) {
  return this.noSuchMethod$2("report", [$0, $1, $2]);
 },
 report$3$object$wholeSentence: function($0, $1, $2) {
  return this.noSuchMethod$2("report", [$0, $1, $2]);
 },
 report$3$endSentence$object: function($0, $1, $2) {
  return this.noSuchMethod$2("report", [$0, $1, $2]);
 },
 report$2$wholeSentence: function($0, $1) {
  return this.noSuchMethod$2("report", [$0, $1]);
 },
 cleanup$0: function() {
  return this.noSuchMethod$2("cleanup", []);
 },
 $dom_appendChild$1: function($0) {
  return this.noSuchMethod$2("$dom_appendChild", [$0]);
 },
 stringifyValue$1: function($0) {
  return this.noSuchMethod$2("stringifyValue", [$0]);
 },
 toJson$0: function() {
  return this.noSuchMethod$2("toJson", []);
 },
 last$0: function() {
  return this.noSuchMethod$2("last", []);
 },
 _add_2$1: function($0) {
  return this.noSuchMethod$2("_add_2", [$0]);
 },
 getPossibleMoves$1$max: function($0) {
  return this.noSuchMethod$2("getPossibleMoves", [$0]);
 },
 _ensureCapacity$0: function() {
  return this.noSuchMethod$2("_ensureCapacity", []);
 },
 _runHelper$0: function() {
  return this.noSuchMethod$2("_runHelper", []);
 },
 next$0: function() {
  return this.noSuchMethod$2("next", []);
 },
 replaceAllWith$1: function($0) {
  return this.noSuchMethod$2("replaceAllWith", [$0]);
 },
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$2("_deserializeHelper", [$0]);
 },
 charCodeAt$1: function($0) {
  return this.noSuchMethod$2("charCodeAt", [$0]);
 },
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$2("_checkReplyTo", [$0]);
 },
 isApplicable$2: function($0, $1) {
  return this.noSuchMethod$2("isApplicable", [$0, $1]);
 },
 runScriptBlock$1$script: function($0) {
  return this.noSuchMethod$2("runScriptBlock", [$0]);
 },
 update$0: function() {
  return this.noSuchMethod$2("update", []);
 },
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$2("_deserializeRef", [$0]);
 },
 _dispatch$1: function($0) {
  return this.noSuchMethod$2("_dispatch", [$0]);
 },
 lastEntry$0: function() {
  return this.noSuchMethod$2("lastEntry", []);
 },
 updateUntilInteraction$0: function() {
  return this.noSuchMethod$2("updateUntilInteraction", []);
 },
 run$0: function() {
  return this.noSuchMethod$2("run", []);
 },
 _getAttachedInfo$1: function($0) {
  return this.noSuchMethod$2("_getAttachedInfo", [$0]);
 },
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$2("setTimeout", [$0, $1]);
 },
 _link$2: function($0, $1) {
  return this.noSuchMethod$2("_link", [$0, $1]);
 },
 reset$0: function() {
  return this.noSuchMethod$2("reset", []);
 },
 containsKey$1: function($0) {
  return this.noSuchMethod$2("containsKey", [$0]);
 },
 toUpperCase$0: function() {
  return this.noSuchMethod$2("toUpperCase", []);
 },
 _grow$1: function($0) {
  return this.noSuchMethod$2("_grow", [$0]);
 },
 addFirst$1: function($0) {
  return this.noSuchMethod$2("addFirst", [$0]);
 },
 start$1: function($0) {
  return this.noSuchMethod$2("start", [$0]);
 },
 start$0: function() {
  return this.noSuchMethod$2("start", []);
 },
 $dom_removeChild$1: function($0) {
  return this.noSuchMethod$2("$dom_removeChild", [$0]);
 },
 iterator$0: function() {
  return this.noSuchMethod$2("iterator", []);
 },
 computeChanceToHit$2: function($0, $1) {
  return this.noSuchMethod$2("computeChanceToHit", [$0, $1]);
 },
 _setException$2: function($0, $1) {
  return this.noSuchMethod$2("_setException", [$0, $1]);
 },
 _setGlobals$0: function() {
  return this.noSuchMethod$2("_setGlobals", []);
 },
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$2("_probeForAdding", [$0]);
 },
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$2("_nativeDetectEnvironment", []);
 },
 replaceWith$1: function($0) {
  return this.noSuchMethod$2("replaceWith", [$0]);
 },
 some$1: function($0) {
  return this.noSuchMethod$2("some", [$0]);
 },
 contains$2: function($0, $1) {
  return this.noSuchMethod$2("contains", [$0, $1]);
 },
 isArmoredAgainst$3: function($0, $1, $2) {
  return this.noSuchMethod$2("isArmoredAgainst", [$0, $1, $2]);
 },
 remove$0: function() {
  return this.noSuchMethod$2("remove", []);
 },
 remove$1: function($0) {
  return this.noSuchMethod$2("remove", [$0]);
 },
 close$0: function() {
  return this.noSuchMethod$2("close", []);
 },
 prepend$1: function($0) {
  return this.noSuchMethod$2("prepend", [$0]);
 },
 process$0: function() {
  return this.noSuchMethod$2("process", []);
 },
 dispatchAll$0: function() {
  return this.noSuchMethod$2("dispatchAll", []);
 },
 dispatchAll$1: function($0) {
  return this.noSuchMethod$2("dispatchAll", [$0]);
 },
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$2("_postMessage_2", [$0]);
 },
 _callback$2: function($0, $1) {
  return this.noSuchMethod$2("_callback", [$0, $1]);
 },
 register$2: function($0, $1) {
  return this.noSuchMethod$2("register", [$0, $1]);
 },
 postMessage$1: function($0) {
  return this.noSuchMethod$2("postMessage", [$0]);
 },
 _advance$0: function() {
  return this.noSuchMethod$2("_advance", []);
 },
 _remove$2: function($0, $1) {
  return this.noSuchMethod$2("_remove", [$0, $1]);
 },
 computeSuitability$2: function($0, $1) {
  return this.noSuchMethod$2("computeSuitability", [$0, $1]);
 },
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$2("_deserializeMap", [$0]);
 },
 setInterval$2: function($0, $1) {
  return this.noSuchMethod$2("setInterval", [$0, $1]);
 },
 toInt$0: function() {
  return this.noSuchMethod$2("toInt", []);
 },
 nextDouble$0: function() {
  return this.noSuchMethod$2("nextDouble", []);
 },
 terminate$0: function() {
  return this.noSuchMethod$2("terminate", []);
 },
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$2("enqueue", [$0, $1, $2]);
 },
 _setValue$1: function($0) {
  return this.noSuchMethod$2("_setValue", [$0]);
 },
 _deserializeList$1: function($0) {
  return this.noSuchMethod$2("_deserializeList", [$0]);
 },
 chanceToDodge$2: function($0, $1) {
  return this.noSuchMethod$2("chanceToDodge", [$0, $1]);
 },
 $dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$2("$dom_addEventListener", [$0, $1, $2]);
 },
 addAll$1: function($0) {
  return this.noSuchMethod$2("addAll", [$0]);
 },
 runIteration$0: function() {
  return this.noSuchMethod$2("runIteration", []);
 },
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$2("_nativeInitWorkerMessageHandler", []);
 },
 get$needSerialization: function() {
  return this.noSuchMethod$2("get:needSerialization", []);
 },
 get$finished: function() {
  return this.noSuchMethod$2("get:finished", []);
 },
 get$v_man: function() {
  return this.noSuchMethod$2("get:v_man", []);
 },
 get$tillEndOfMove: function() {
  return this.noSuchMethod$2("get:tillEndOfMove", []);
 },
 get$v_swarmer3: function() {
  return this.noSuchMethod$2("get:v_swarmer3", []);
 },
 get$currentManagerId: function() {
  return this.noSuchMethod$2("get:currentManagerId", []);
 },
 get$_id: function() {
  return this.noSuchMethod$2("get:_id", []);
 },
 get$v_wolf: function() {
  return this.noSuchMethod$2("get:v_wolf", []);
 },
 get$name: function() {
  return this.noSuchMethod$2("get:name", []);
 },
 get$v_moveKickLegs: function() {
  return this.noSuchMethod$2("get:v_moveKickLegs", []);
 },
 get$currentMove: function() {
  return this.noSuchMethod$2("get:currentMove", []);
 },
 get$v_moveStomachPunch: function() {
  return this.noSuchMethod$2("get:v_moveStomachPunch", []);
 },
 get$v_NUMBER_OF_RUNS: function() {
  return this.noSuchMethod$2("get:v_NUMBER_OF_RUNS", []);
 },
 get$v_moveRollOut: function() {
  return this.noSuchMethod$2("get:v_moveRollOut", []);
 },
 get$_set: function() {
  return this.noSuchMethod$2("get:_set", []);
 },
 get$userAgent: function() {
  return this.noSuchMethod$2("get:userAgent", []);
 },
 get$v_moveBasicParryHand: function() {
  return this.noSuchMethod$2("get:v_moveBasicParryHand", []);
 },
 get$time: function() {
  return this.noSuchMethod$2("get:time", []);
 },
 get$v_combat: function() {
  return this.noSuchMethod$2("get:v_combat", []);
 },
 get$v_humanMoves: function() {
  return this.noSuchMethod$2("get:v_humanMoves", []);
 },
 get$dodgingMod: function() {
  return this.noSuchMethod$2("get:dodgingMod", []);
 },
 get$weaponWhenPierced: function() {
  return this.noSuchMethod$2("get:weaponWhenPierced", []);
 },
 get$fromCommandLine: function() {
  return this.noSuchMethod$2("get:fromCommandLine", []);
 },
 get$combat: function() {
  return this.noSuchMethod$2("get:combat", []);
 },
 get$sharp: function() {
  return this.noSuchMethod$2("get:sharp", []);
 },
 get$pageHandles: function() {
  return this.noSuchMethod$2("get:pageHandles", []);
 },
 get$_player: function() {
  return this.noSuchMethod$2("get:_player", []);
 },
 get$sb: function() {
  return this.noSuchMethod$2("get:sb", []);
 },
 get$v_orc: function() {
  return this.noSuchMethod$2("get:v_orc", []);
 },
 get$topEventLoop: function() {
  return this.noSuchMethod$2("get:topEventLoop", []);
 },
 get$isolates: function() {
  return this.noSuchMethod$2("get:isolates", []);
 },
 get$isWorker: function() {
  return this.noSuchMethod$2("get:isWorker", []);
 },
 get$nextManagerId: function() {
  return this.noSuchMethod$2("get:nextManagerId", []);
 },
 get$actors: function() {
  return this.noSuchMethod$2("get:actors", []);
 },
 get$storyline: function() {
  return this.noSuchMethod$2("get:storyline", []);
 },
 get$hardness: function() {
  return this.noSuchMethod$2("get:hardness", []);
 },
 get$v_individual1: function() {
  return this.noSuchMethod$2("get:v_individual1", []);
 },
 get$pending: function() {
  return this.noSuchMethod$2("get:pending", []);
 },
 get$duration: function() {
  return this.noSuchMethod$2("get:duration", []);
 },
 get$managers: function() {
  return this.noSuchMethod$2("get:managers", []);
 },
 get$nominative: function() {
  return this.noSuchMethod$2("get:nominative", []);
 },
 get$accusative: function() {
  return this.noSuchMethod$2("get:accusative", []);
 },
 get$previousMove: function() {
  return this.noSuchMethod$2("get:previousMove", []);
 },
 get$id: function() {
  return this.noSuchMethod$2("get:id", []);
 },
 get$fightingMod: function() {
  return this.noSuchMethod$2("get:fightingMod", []);
 },
 get$nextIsolateId: function() {
  return this.noSuchMethod$2("get:nextIsolateId", []);
 },
 get$weapon: function() {
  return this.noSuchMethod$2("get:weapon", []);
 },
 get$_element: function() {
  return this.noSuchMethod$2("get:_element", []);
 },
 get$_filtered: function() {
  return this.noSuchMethod$2("get:_filtered", []);
 },
 get$type: function() {
  return this.noSuchMethod$2("get:type", []);
 },
 get$string: function() {
  return this.noSuchMethod$2("get:string", []);
 },
 get$choicesOl: function() {
  return this.noSuchMethod$2("get:choicesOl", []);
 },
 get$armors: function() {
  return this.noSuchMethod$2("get:armors", []);
 },
 get$future: function() {
  return this.noSuchMethod$2("get:future", []);
 },
 get$modifiedFighting: function() {
  return this.noSuchMethod$2("get:modifiedFighting", []);
 },
 get$$goto: function() {
  return this.noSuchMethod$2("get:goto", []);
 },
 get$_next: function() {
  return this.noSuchMethod$2("get:_next", []);
 },
 get$elements: function() {
  return this.noSuchMethod$2("get:elements", []);
 },
 get$playerChoices: function() {
  return this.noSuchMethod$2("get:playerChoices", []);
 },
 get$_lib_target: function() {
  return this.noSuchMethod$2("get:_target", []);
 },
 get$useWorkers: function() {
  return this.noSuchMethod$2("get:useWorkers", []);
 },
 get$blunt: function() {
  return this.noSuchMethod$2("get:blunt", []);
 },
 get$flags: function() {
  return this.noSuchMethod$2("get:flags", []);
 },
 get$isPlayer: function() {
  return this.noSuchMethod$2("get:isPlayer", []);
 },
 get$_lib_value: function() {
  return this.noSuchMethod$2("get:_value", []);
 },
 get$navigator: function() {
  return this.noSuchMethod$2("get:navigator", []);
 },
 get$shown: function() {
  return this.noSuchMethod$2("get:shown", []);
 },
 get$pronoun: function() {
  return this.noSuchMethod$2("get:pronoun", []);
 },
 get$click: function() {
  return this.noSuchMethod$2("get:click", []);
 },
 get$piercing: function() {
  return this.noSuchMethod$2("get:piercing", []);
 },
 get$waitForEndOfPage: function() {
  return this.noSuchMethod$2("get:waitForEndOfPage", []);
 },
 get$v_moveStepBack: function() {
  return this.noSuchMethod$2("get:v_moveStepBack", []);
 },
 get$on: function() {
  return this.noSuchMethod$2("get:on", []);
 },
 get$v_player: function() {
  return this.noSuchMethod$2("get:v_player", []);
 },
 get$v_moveFootSweep: function() {
  return this.noSuchMethod$2("get:v_moveFootSweep", []);
 },
 get$_keys: function() {
  return this.noSuchMethod$2("get:_keys", []);
 },
 get$mainManager: function() {
  return this.noSuchMethod$2("get:mainManager", []);
 },
 get$recovery: function() {
  return this.noSuchMethod$2("get:recovery", []);
 },
 get$v_swarmer2: function() {
  return this.noSuchMethod$2("get:v_swarmer2", []);
 },
 get$v_moveRightHook: function() {
  return this.noSuchMethod$2("get:v_moveRightHook", []);
 },
 get$listContent: function() {
  return this.noSuchMethod$2("get:listContent", []);
 },
 get$moves: function() {
  return this.noSuchMethod$2("get:moves", []);
 },
 get$v_individual2: function() {
  return this.noSuchMethod$2("get:v_individual2", []);
 },
 get$intContent: function() {
  return this.noSuchMethod$2("get:intContent", []);
 },
 get$_lib1_receivePort: function() {
  return this.noSuchMethod$2("get:_receivePort", []);
 },
 get$_receivePort: function() {
  return this.noSuchMethod$2("get:_receivePort", []);
 },
 get$ports: function() {
  return this.noSuchMethod$2("get:ports", []);
 },
 get$target: function() {
  return this.noSuchMethod$2("get:target", []);
 },
 get$value: function() {
  return this.noSuchMethod$2("get:value", []);
 },
 get$choiceString: function() {
  return this.noSuchMethod$2("get:choiceString", []);
 },
 get$v_teamTwoWins: function() {
  return this.noSuchMethod$2("get:v_teamTwoWins", []);
 },
 get$_scripterPort: function() {
  return this.noSuchMethod$2("get:_scripterPort", []);
 },
 get$stance: function() {
  return this.noSuchMethod$2("get:stance", []);
 },
 get$genitive: function() {
  return this.noSuchMethod$2("get:genitive", []);
 },
 get$coveringSides: function() {
  return this.noSuchMethod$2("get:coveringSides", []);
 },
 get$_callback: function() {
  return this.noSuchMethod$2("get:_callback", []);
 },
 get$v_moveKickOnGround: function() {
  return this.noSuchMethod$2("get:v_moveKickOnGround", []);
 },
 get$_backingMap: function() {
  return this.noSuchMethod$2("get:_backingMap", []);
 },
 get$element: function() {
  return this.noSuchMethod$2("get:element", []);
 },
 get$isComplete: function() {
  return this.noSuchMethod$2("get:isComplete", []);
 },
 get$_previous: function() {
  return this.noSuchMethod$2("get:_previous", []);
 },
 get$hitpoints: function() {
  return this.noSuchMethod$2("get:hitpoints", []);
 },
 get$v_teamOneWins: function() {
  return this.noSuchMethod$2("get:v_teamOneWins", []);
 },
 get$v_moveStandUp: function() {
  return this.noSuchMethod$2("get:v_moveStandUp", []);
 },
 get$coveringTargets: function() {
  return this.noSuchMethod$2("get:coveringTargets", []);
 },
 get$v_armorHelmet: function() {
  return this.noSuchMethod$2("get:v_armorHelmet", []);
 },
 get$currentContext: function() {
  return this.noSuchMethod$2("get:currentContext", []);
 },
 get$length: function() {
  return this.noSuchMethod$2("get:length", []);
 },
 get$performer: function() {
  return this.noSuchMethod$2("get:performer", []);
 },
 get$v_moveGroinPunch: function() {
  return this.noSuchMethod$2("get:v_moveGroinPunch", []);
 },
 get$v_weaponHands: function() {
  return this.noSuchMethod$2("get:v_weaponHands", []);
 },
 get$_tag: function() {
  return this.noSuchMethod$2("get:_tag", []);
 },
 get$team: function() {
  return this.noSuchMethod$2("get:team", []);
 },
 get$stackTrace: function() {
  return this.noSuchMethod$2("get:stackTrace", []);
 },
 get$_workerId: function() {
  return this.noSuchMethod$2("get:_workerId", []);
 },
 get$_futurePort: function() {
  return this.noSuchMethod$2("get:_futurePort", []);
 },
 get$isOffensive: function() {
  return this.noSuchMethod$2("get:isOffensive", []);
 },
 get$v_swarmer1: function() {
  return this.noSuchMethod$2("get:v_swarmer1", []);
 },
 get$alive: function() {
  return this.noSuchMethod$2("get:alive", []);
 },
 get$f: function() {
  return this.noSuchMethod$2("get:f", []);
 },
 get$coveringEffects: function() {
  return this.noSuchMethod$2("get:coveringEffects", []);
 },
 get$v_moveJab: function() {
  return this.noSuchMethod$2("get:v_moveJab", []);
 },
 get$_isolateId: function() {
  return this.noSuchMethod$2("get:_isolateId", []);
 },
 get$thirdPartyString: function() {
  return this.noSuchMethod$2("get:thirdPartyString", []);
 },
 get$rootContext: function() {
  return this.noSuchMethod$2("get:rootContext", []);
 },
 set$shown: function($0) {
  return this.noSuchMethod$2("set:shown", [$0]);
 },
 set$v_moveStepBack: function($0) {
  return this.noSuchMethod$2("set:v_moveStepBack", [$0]);
 },
 set$v_moveFootSweep: function($0) {
  return this.noSuchMethod$2("set:v_moveFootSweep", [$0]);
 },
 set$v_swarmer3: function($0) {
  return this.noSuchMethod$2("set:v_swarmer3", [$0]);
 },
 set$v_man: function($0) {
  return this.noSuchMethod$2("set:v_man", [$0]);
 },
 set$tillEndOfMove: function($0) {
  return this.noSuchMethod$2("set:tillEndOfMove", [$0]);
 },
 set$v_moveSlash: function($0) {
  return this.noSuchMethod$2("set:v_moveSlash", [$0]);
 },
 set$speed: function($0) {
  return this.noSuchMethod$2("set:speed", [$0]);
 },
 set$currentManagerId: function($0) {
  return this.noSuchMethod$2("set:currentManagerId", [$0]);
 },
 set$v_player: function($0) {
  return this.noSuchMethod$2("set:v_player", [$0]);
 },
 set$v_wolf: function($0) {
  return this.noSuchMethod$2("set:v_wolf", [$0]);
 },
 set$nextPageIndex: function($0) {
  return this.noSuchMethod$2("set:nextPageIndex", [$0]);
 },
 set$v_swarmer2: function($0) {
  return this.noSuchMethod$2("set:v_swarmer2", [$0]);
 },
 set$v_moveRightHook: function($0) {
  return this.noSuchMethod$2("set:v_moveRightHook", [$0]);
 },
 set$v_moveKickLegs: function($0) {
  return this.noSuchMethod$2("set:v_moveKickLegs", [$0]);
 },
 set$currentMove: function($0) {
  return this.noSuchMethod$2("set:currentMove", [$0]);
 },
 set$v_moveStomachPunch: function($0) {
  return this.noSuchMethod$2("set:v_moveStomachPunch", [$0]);
 },
 set$v_NUMBER_OF_RUNS: function($0) {
  return this.noSuchMethod$2("set:v_NUMBER_OF_RUNS", [$0]);
 },
 set$v_moveRollOut: function($0) {
  return this.noSuchMethod$2("set:v_moveRollOut", [$0]);
 },
 set$v_individual2: function($0) {
  return this.noSuchMethod$2("set:v_individual2", [$0]);
 },
 set$onmessage: function($0) {
  return this.noSuchMethod$2("set:onmessage", [$0]);
 },
 set$v_moveBasicParryHand: function($0) {
  return this.noSuchMethod$2("set:v_moveBasicParryHand", [$0]);
 },
 set$time: function($0) {
  return this.noSuchMethod$2("set:time", [$0]);
 },
 set$v_combat: function($0) {
  return this.noSuchMethod$2("set:v_combat", [$0]);
 },
 set$v_humanMoves: function($0) {
  return this.noSuchMethod$2("set:v_humanMoves", [$0]);
 },
 set$target: function($0) {
  return this.noSuchMethod$2("set:target", [$0]);
 },
 set$text: function($0) {
  return this.noSuchMethod$2("set:text", [$0]);
 },
 set$value: function($0) {
  return this.noSuchMethod$2("set:value", [$0]);
 },
 set$combat: function($0) {
  return this.noSuchMethod$2("set:combat", [$0]);
 },
 set$v_teamTwoWins: function($0) {
  return this.noSuchMethod$2("set:v_teamTwoWins", [$0]);
 },
 set$stance: function($0) {
  return this.noSuchMethod$2("set:stance", [$0]);
 },
 set$v_weaponSword: function($0) {
  return this.noSuchMethod$2("set:v_weaponSword", [$0]);
 },
 set$_player: function($0) {
  return this.noSuchMethod$2("set:_player", [$0]);
 },
 set$v_moveKickOnGround: function($0) {
  return this.noSuchMethod$2("set:v_moveKickOnGround", [$0]);
 },
 set$v_orc: function($0) {
  return this.noSuchMethod$2("set:v_orc", [$0]);
 },
 set$nextManagerId: function($0) {
  return this.noSuchMethod$2("set:nextManagerId", [$0]);
 },
 set$_previous: function($0) {
  return this.noSuchMethod$2("set:_previous", [$0]);
 },
 set$hitpoints: function($0) {
  return this.noSuchMethod$2("set:hitpoints", [$0]);
 },
 set$v_teamOneWins: function($0) {
  return this.noSuchMethod$2("set:v_teamOneWins", [$0]);
 },
 set$v_individual1: function($0) {
  return this.noSuchMethod$2("set:v_individual1", [$0]);
 },
 set$v_moveStandUp: function($0) {
  return this.noSuchMethod$2("set:v_moveStandUp", [$0]);
 },
 set$computeSuitability: function($0) {
  return this.noSuchMethod$2("set:computeSuitability", [$0]);
 },
 set$pending: function($0) {
  return this.noSuchMethod$2("set:pending", [$0]);
 },
 set$names: function($0) {
  return this.noSuchMethod$2("set:names", [$0]);
 },
 set$_port: function($0) {
  return this.noSuchMethod$2("set:_port", [$0]);
 },
 set$id: function($0) {
  return this.noSuchMethod$2("set:id", [$0]);
 },
 set$v_armorHelmet: function($0) {
  return this.noSuchMethod$2("set:v_armorHelmet", [$0]);
 },
 set$isApplicable: function($0) {
  return this.noSuchMethod$2("set:isApplicable", [$0]);
 },
 set$v_moveGroinPunch: function($0) {
  return this.noSuchMethod$2("set:v_moveGroinPunch", [$0]);
 },
 set$length: function($0) {
  return this.noSuchMethod$2("set:length", [$0]);
 },
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$2("set:nextIsolateId", [$0]);
 },
 set$weapon: function($0) {
  return this.noSuchMethod$2("set:weapon", [$0]);
 },
 set$v_armorClothes: function($0) {
  return this.noSuchMethod$2("set:v_armorClothes", [$0]);
 },
 set$v_weaponHands: function($0) {
  return this.noSuchMethod$2("set:v_weaponHands", [$0]);
 },
 set$team: function($0) {
  return this.noSuchMethod$2("set:team", [$0]);
 },
 set$currentContext: function($0) {
  return this.noSuchMethod$2("set:currentContext", [$0]);
 },
 set$fighting: function($0) {
  return this.noSuchMethod$2("set:fighting", [$0]);
 },
 set$v_swarmer1: function($0) {
  return this.noSuchMethod$2("set:v_swarmer1", [$0]);
 },
 set$v_moveJab: function($0) {
  return this.noSuchMethod$2("set:v_moveJab", [$0]);
 },
 set$_next: function($0) {
  return this.noSuchMethod$2("set:_next", [$0]);
 },
 set$canContinue: function($0) {
  return this.noSuchMethod$2("set:canContinue", [$0]);
 },
 set$rootContext: function($0) {
  return this.noSuchMethod$2("set:rootContext", [$0]);
 },
 set$pronoun: function($0) {
  return this.noSuchMethod$2("set:pronoun", [$0]);
 }
};

$$.ListIterator = {"":
 ["i", "list"],
 "super": "Object",
 hasNext$0: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  var t1 = this.hasNext$0();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
},
 is$Iterator: true
};

$$.StackTrace = {"":
 ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true
};

$$.TypeErrorImplementation = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  return this.message;
}
};

$$.MetaInfo = {"":
 ["_tag?", "_tags", "_set?"],
 "super": "Object",
 is$MetaInfo: true
};

$$.HtmlInterface = {"":
 ["_receivePort?", "_scripterPort?", "paragraphsDiv", "choicesDiv", "choicesOl?", "choices"],
 "super": "Object",
 createParagraph$1: function(innerHtml) {
  $.stringTypeCheck(innerHtml);
  if (this.paragraphsDiv == null)
    return;
  if (innerHtml === '') {
    $.print('Received an empty string.');
    return;
  }
  var p = $.callTypeCheck($.Element_Element$tag('p'), 'is$ParagraphElement');
  p.set$innerHTML(innerHtml);
  $.add$1(this.paragraphsDiv.get$elements(), p);
  return p;
},
 createChoice$3: function(innerHtml, accessKey, hash) {
  $.stringTypeCheck(innerHtml);
  $.intTypeCheck(hash);
  if (this.choicesOl == null)
    return;
  var li = $.callTypeCheck($.Element_Element$tag('li'), 'is$LIElement');
  var a = $.callTypeCheck($.Element_Element$tag('a'), 'is$AnchorElement');
  a.set$innerHTML(innerHtml);
  if (!(hash == null))
    $.add$1(a.get$on().get$click(), new $.HtmlInterface_createChoice_anon(this, hash));
  $.add$1(li.get$elements(), a);
  $.add$1(this.choicesOl.get$elements(), li);
  return a;
},
 createChoice$3$accessKey$hash: function(innerHtml,accessKey,hash) {
  return this.createChoice$3(innerHtml,accessKey,hash)
},
 receiveFromScripter$2: function(messageJson, replyTo) {
  $.stringTypeCheck(messageJson);
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  var message = $.Message$fromJson0(messageJson);
  $.print('CMD: We have a message from Scripter: ' + $.S(message.type) + '.');
  if ($.boolConversionCheck($.eq(message.type, 32))) {
    $.print('CMD: We are at the end of book. Closing.');
    this._scripterPort.send$1($.Message$Quit().toJson$0());
    this._receivePort.close$0();
  } else if ($.boolConversionCheck($.eq(message.type, 4))) {
    $.print('Showing text from scripter.');
    this.createParagraph$1(message.strContent);
    this._scripterPort.send$2($.Message$Continue().toJson$0(), this._receivePort.toSendPort$0());
  } else if ($.boolConversionCheck($.eq(message.type, 256))) {
    $.print('No visible result. Continuing.');
    this._scripterPort.send$2($.Message$Continue().toJson$0(), this._receivePort.toSendPort$0());
  } else if ($.boolConversionCheck($.eq(message.type, 64))) {
    $.print('We have choices to show!');
    if (!$.eqB($.index(message.listContent, 0), ''))
      this.createParagraph$1($.index(message.listContent, 0));
    this.choices = $.ListImplementation_List$from(message.listContent);
    for (var i = 1; $.boolConversionCheck($.lt(i, $.get$length(this.choices))); i = $.intTypeCheck($.add(i, 1)))
      this.createChoice$3$accessKey$hash($.index($.index(this.choices, i), 'string'), $.S(i), $.index($.index(this.choices, i), 'hash'));
  }
},
 get$receiveFromScripter: function() { return new $.BoundClosure(this, 'receiveFromScripter$2'); },
 HtmlInterface$0: function() {
  $.DEBUG_CMD('HTML interface is starting.');
  this._receivePort = $.propertyTypeCheck($._ReceivePortFactory_ReceivePort(), 'is$ReceivePort');
  this._receivePort.receive$1(this.get$receiveFromScripter());
  this._scripterPort = $.propertyTypeCheck($.spawnFunction($.createScripter), 'is$SendPort');
  this._scripterPort.send$2($.Message$Start().toJson$0(), this._receivePort.toSendPort$0());
  this.paragraphsDiv = $.callTypeCheck($.document().query$1('div#book-paragraphs'), 'is$DivElement');
  this.choicesDiv = $.callTypeCheck($.document().query$1('div#book-choices'), 'is$DivElement');
  this.choicesOl = $.callTypeCheck($.document().query$1('ol#book-choices-ol'), 'is$OListElement');
}
};

$$.Message = {"":
 ["type?", "listContent?", "strContent", "intContent?"],
 "super": "Object",
 toJson$0: function() {
  var data = $.callTypeCheck($.HashMapImplementation$('String', 'Dynamic_'), 'is$Map');
  data.operator$indexSet$2('type', this.type);
  if ($.boolConversionCheck($.eq(this.type, 128)))
    data.operator$indexSet$2('intContent', this.intContent);
  else if ($.boolConversionCheck($.eq(this.type, 64)))
    data.operator$indexSet$2('listContent', this.listContent);
  else if ($.boolConversionCheck($.eq(this.type, 4)))
    data.operator$indexSet$2('strContent', this.strContent);
  return $.JSON_stringify(data);
},
 Message$OptionSelected$1: function(hash) {
  this.intContent = $.intTypeCheck(hash);
},
 Message$fromJson$1: function(json) {
  var data = $.callTypeCheck($.JSON_parse($.stringTypeCheck(json)), 'is$Map');
  this.type = $.intTypeCheck(data.operator$index$1('type'));
  if ($.boolConversionCheck($.eq(this.type, 128)))
    this.intContent = $.intTypeCheck(data.operator$index$1('intContent'));
  else if ($.boolConversionCheck($.eq(this.type, 64)))
    this.listContent = $.listTypeCheck(data.operator$index$1('listContent'));
  else if ($.boolConversionCheck($.eq(this.type, 4)))
    this.strContent = $.stringTypeCheck(data.operator$index$1('strContent'));
}
};

$$.JsonUnsupportedObjectError = {"":
 ["unsupportedObject", "cause"],
 "super": "Object",
 toString$0: function() {
  if (!(this.cause == null))
    return 'Calling toJson method on object failed.';
  else
    return 'Object toJson method returns non-serializable value.';
}
};

$$._JsonParser = {"":
 ["json", "length?", "position"],
 "super": "Object",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1('Junk at the end of JSON input');
  return result;
},
 parseValue$0: function() {
  var token = $.intTypeCheck(this.token$0());
  if (token == null)
    this.error$1('Nothing to parse');
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2('null', null);
    case 102:
      return this.expectKeyword$2('false', false);
    case 116:
      return this.expectKeyword$2('true', true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1('Unexpected token');
  }
},
 expectKeyword$2: function(word, value) {
  for (var t1 = word.length, i = 0; $.boolConversionCheck($.lt(i, t1)); i = $.intTypeCheck($.add(i, 1))) {
    if (!$.eqB(this.char$0(), $.charCodeAt(word, i)))
      this.error$1('Expected keyword \'' + word + '\'');
    this.position = $.intTypeCheck($.add(this.position, 1));
  }
  return value;
},
 parseObject$0: function() {
  var object = $.makeLiteralMap([]);
  this.position = $.intTypeCheck($.add(this.position, 1));
  if (!$.boolConversionCheck(this.isToken$1(125))) {
    for (; true;) {
      var key = $.stringTypeCheck(this.parseString$0());
      if (!$.boolConversionCheck(this.isToken$1(58)))
        this.error$1('Expected \':\' when parsing object');
      this.position = $.intTypeCheck($.add(this.position, 1));
      $.indexSet(object, key, this.parseValue$0());
      if (!$.boolConversionCheck(this.isToken$1(44)))
        break;
      this.position = $.intTypeCheck($.add(this.position, 1));
    }
    if (!$.boolConversionCheck(this.isToken$1(125)))
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.intTypeCheck($.add(this.position, 1));
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.intTypeCheck($.add(this.position, 1));
  if (!$.boolConversionCheck(this.isToken$1(93))) {
    for (; true;) {
      list.push(this.parseValue$0());
      if (!$.boolConversionCheck(this.isToken$1(44)))
        break;
      this.position = $.intTypeCheck($.add(this.position, 1));
    }
    if (!$.boolConversionCheck(this.isToken$1(93)))
      this.error$1('Expected \']\' at end of list');
  }
  this.position = $.intTypeCheck($.add(this.position, 1));
  return list;
},
 parseString$0: function() {
  if (!$.boolConversionCheck(this.isToken$1(34)))
    this.error$1('Expected string literal');
  this.position = $.intTypeCheck($.add(this.position, 1));
  var charCodes = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(charCodes, {'E': 'int'});
  for (var t1 = this.json; true;) {
    var c = $.intTypeCheck(this.char$0());
    if ($.boolConversionCheck($.eq(c, 34))) {
      this.position = $.intTypeCheck($.add(this.position, 1));
      break;
    }
    if ($.boolConversionCheck($.eq(c, 92))) {
      this.position = $.intTypeCheck($.add(this.position, 1));
      var t2 = this.position;
      var t3 = $.get$length(this);
      if (t2 == null ? t3 == null : t2 === t3)
        this.error$1('\\ at the end of input');
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.boolConversionCheck($.gt($.add(this.position, 5), $.get$length(this))))
            this.error$1('Invalid unicode esacape sequence');
          var codeString = $.substring$2(t1, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.intTypeCheck($.int_parse('0x' + $.S(codeString)));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1('Invalid unicode esacape sequence');
          }

          this.position = $.intTypeCheck($.add(this.position, 4));
          break;
        default:
          this.error$1('Invalid esacape sequence in string literal');
      }
    }
    charCodes.push(c);
    this.position = $.intTypeCheck($.add(this.position, 1));
  }
  return $.StringImplementation_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  if (!$.boolConversionCheck(this.isToken$1(45)))
    this.error$1('Expected number literal');
  var startPos = this.position;
  var char$ = $.intTypeCheck(this.char$0());
  if (char$ === 45)
    char$ = $.intTypeCheck(this.nextChar$0());
  if (char$ === 48)
    char$ = $.intTypeCheck(this.nextChar$0());
  else if ($.boolConversionCheck(this.isDigit$1(char$))) {
    char$ = $.intTypeCheck(this.nextChar$0());
    for (; $.boolConversionCheck(this.isDigit$1(char$));)
      char$ = $.intTypeCheck(this.nextChar$0());
  } else
    this.error$1('Expected digit when parsing number');
  if (char$ === 46) {
    char$ = $.intTypeCheck(this.nextChar$0());
    if ($.boolConversionCheck(this.isDigit$1(char$))) {
      char$ = $.intTypeCheck(this.nextChar$0());
      for (; $.boolConversionCheck(this.isDigit$1(char$));)
        char$ = $.intTypeCheck(this.nextChar$0());
      var isInt = false;
    } else {
      this.error$1('Expected digit following comma');
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = $.intTypeCheck(this.nextChar$0());
    if (char$ === 45 || char$ === 43)
      char$ = $.intTypeCheck(this.nextChar$0());
    if ($.boolConversionCheck(this.isDigit$1(char$))) {
      char$ = $.intTypeCheck(this.nextChar$0());
      for (; $.boolConversionCheck(this.isDigit$1(char$));)
        char$ = $.intTypeCheck(this.nextChar$0());
      isInt = false;
    } else
      this.error$1('Expected digit following \'e\' or \'E\'');
  }
  var number = $.stringTypeCheck($.substring$2(this.json, startPos, this.position));
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 isDigit$1: function(char$) {
  return $.boolConversionCheck($.ge(char$, 48)) && $.boolConversionCheck($.le(char$, 57));
},
 isToken$1: function(tokenKind) {
  var t1 = this.token$0();
  if (typeof t1 !== 'number')
    return this.isToken$1$bailout(1, tokenKind, t1);
  return t1 === tokenKind;
},
 isToken$1$bailout: function(state, tokenKind, t1) {
  return $.eq(t1, tokenKind);
},
 char$0: function() {
  if ($.boolConversionCheck($.ge(this.position, $.get$length(this))))
    this.error$1('Unexpected end of JSON stream');
  return $.charCodeAt(this.json, this.position);
},
 nextChar$0: function() {
  var t1 = this.position;
  if (t1 !== (t1 | 0))
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  if ($.boolConversionCheck($.ge(this.position, $.get$length(this))))
    return 0;
  return $.charCodeAt(this.json, this.position);
},
 nextChar$0$bailout: function(state, t1) {
  this.position = $.intTypeCheck($.add(t1, 1));
  if ($.boolConversionCheck($.ge(this.position, $.get$length(this))))
    return 0;
  return $.charCodeAt(this.json, this.position);
},
 token$0: function() {
  for (var t1 = this.json; true;) {
    if ($.boolConversionCheck($.ge(this.position, $.get$length(this))))
      return;
    var char$ = $.intTypeCheck($.charCodeAt(t1, this.position));
    var token = $.intTypeCheck($.index($._JsonParser_tokens, char$));
    if (token === 32) {
      this.position = $.intTypeCheck($.add(this.position, 1));
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  $.stringTypeCheck(json);
  if (!($._JsonParser_tokens == null))
    return;
  var t1 = $.ListImplementation_List(126, 'int');
  $.setRuntimeTypeInfo(t1, {'E': 'int'});
  $._JsonParser_tokens = t1;
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$._JsonStringifier = {"":
 ["sb?", "seen"],
 "super": "Object",
 checkCycle$1: function(object) {
  for (var t1 = this.seen, i = 0; $.boolConversionCheck($.lt(i, t1.length)); i = $.intTypeCheck($.add(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? object == null : t2 === object)
      throw $.$$throw('Cyclic structure');
  }
  t1.push(object);
},
 stringifyValue$1: function(object) {
  if (!$.boolConversionCheck(this.stringifyJsonValue$1(object))) {
    this.checkCycle$1(object);
    try {
      var customJson = object.toJson$0();
      if (!$.boolConversionCheck(this.stringifyJsonValue$1(customJson)))
        throw $.$$throw($.JsonUnsupportedObjectError$(object));
      var t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      var e = t1;
      throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
    }

  }
},
 stringifyJsonValue$1: function(object) {
  var t1 = {};
  if (typeof object === 'number') {
    $.add$1(this.sb, $.toString(object));
    return true;
  } else if (object === true) {
    $.add$1(this.sb, 'true');
    return true;
  } else if (object === false) {
    $.add$1(this.sb, 'false');
    return true;
  } else if (object == null) {
    $.add$1(this.sb, 'null');
    return true;
  } else if (typeof object === 'string') {
    t1 = this.sb;
    $.add$1(t1, '"');
    $._JsonStringifier_escape(t1, object);
    $.add$1(t1, '"');
    return true;
  } else if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    this.checkCycle$1(object);
    object = $.listTypeCheck(object);
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.stringifyJsonValue$1$bailout(1, object);
    var t2 = this.sb;
    $.add$1(t2, '[');
    if (object.length > 0) {
      this.stringifyValue$1(object[0]);
      for (var i = 1; $.boolConversionCheck($.lt(i, object.length)); i = $.intTypeCheck($.add(i, 1))) {
        $.add$1(t2, ',');
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= object.length)
          throw $.ioore(i);
        this.stringifyValue$1(object[i]);
      }
    }
    $.add$1(t2, ']');
    t1 = this.seen;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
    return true;
  } else if (typeof object === 'object' && object !== null && object.is$Map()) {
    this.checkCycle$1(object);
    object = $.callTypeCheck(object, 'is$Map');
    t2 = this.sb;
    $.add$1(t2, '{');
    t1.first_10 = true;
    $.forEach(object, new $._JsonStringifier_stringifyJsonValue_anon(this, t1));
    $.add$1(t2, '}');
    t2 = this.seen;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
    return true;
  } else
    return false;
},
 stringifyJsonValue$1$bailout: function(state, env0) {
  switch (state) {
    case 1:
      object = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
    case 1:
      if (state === 0 && typeof object === 'number') {
        $.add$1(this.sb, $.toString(object));
        return true;
      } else
        switch (state) {
          case 0:
          case 1:
            if (state === 0 && object === true) {
              $.add$1(this.sb, 'true');
              return true;
            } else
              switch (state) {
                case 0:
                case 1:
                  if (state === 0 && object === false) {
                    $.add$1(this.sb, 'false');
                    return true;
                  } else
                    switch (state) {
                      case 0:
                      case 1:
                        if (state === 0 && object == null) {
                          $.add$1(this.sb, 'null');
                          return true;
                        } else
                          switch (state) {
                            case 0:
                            case 1:
                              if (state === 0 && typeof object === 'string') {
                                t1 = this.sb;
                                $.add$1(t1, '"');
                                $._JsonStringifier_escape(t1, object);
                                $.add$1(t1, '"');
                                return true;
                              } else
                                switch (state) {
                                  case 0:
                                  case 1:
                                    if (state === 1 || state === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
                                      switch (state) {
                                        case 0:
                                          this.checkCycle$1(object);
                                          var object = $.listTypeCheck(object);
                                        case 1:
                                          state = 0;
                                          var t2 = this.sb;
                                          $.add$1(t2, '[');
                                          if ($.boolConversionCheck($.gt($.get$length(object), 0))) {
                                            this.stringifyValue$1($.index(object, 0));
                                            for (var i = 1; $.boolConversionCheck($.lt(i, $.get$length(object))); i = $.intTypeCheck($.add(i, 1))) {
                                              $.add$1(t2, ',');
                                              this.stringifyValue$1($.index(object, i));
                                            }
                                          }
                                          $.add$1(t2, ']');
                                          t1 = this.seen;
                                          if (0 >= t1.length)
                                            throw $.ioore(0);
                                          t1.pop();
                                          return true;
                                      }
                                    else if (typeof object === 'object' && object !== null && object.is$Map()) {
                                      this.checkCycle$1(object);
                                      object = $.callTypeCheck(object, 'is$Map');
                                      t2 = this.sb;
                                      $.add$1(t2, '{');
                                      t1.first_10 = true;
                                      $.forEach(object, new $._JsonStringifier_stringifyJsonValue_anon(this, t1));
                                      $.add$1(t2, '}');
                                      t2 = this.seen;
                                      if (0 >= t2.length)
                                        throw $.ioore(0);
                                      t2.pop();
                                      return true;
                                    } else
                                      return false;
                                }
                          }
                    }
              }
        }
  }
}
};

$$._Random = {"":
 [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.ArgumentError$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 nextDouble$0: function() {
  return Math.random();
}
};

$$._Manager = {"":
 ["nextIsolateId?", "currentManagerId?", "nextManagerId?", "currentContext?", "rootContext?", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 set$nextIsolateId: function(v) { this.nextIsolateId = $.intTypeCheck(v); },
 set$currentManagerId: function(v) { this.currentManagerId = $.intTypeCheck(v); },
 set$nextManagerId: function(v) { this.nextManagerId = $.intTypeCheck(v); },
 set$currentContext: function(v) { this.currentContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 set$rootContext: function(v) { this.rootContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
    this.isWorker = $isWorker;
    this.supportsWorkers = $supportsWorkers;
    this.fromCommandLine = typeof(window) == 'undefined';
  
},
 _nativeInitWorkerMessageHandler$0: function() {
    $globalThis.onmessage = function (e) {
      _IsolateNatives._processWorkerMessage(this.mainManager, e);
    }
  
},
 maybeCloseWorker$0: function() {
  if ($.boolConversionCheck($.isEmpty(this.isolates)))
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.callTypeCheck($.HashMapImplementation$('int', '_IsolateContext'), 'is$Map');
  this.managers = $.callTypeCheck($.HashMapImplementation$('int', '_ManagerStub'), 'is$Map');
  if ($.boolConversionCheck(this.isWorker)) {
    this.mainManager = $.callTypeCheck($._MainManagerStub$(), 'is$_ManagerStub');
    this._nativeInitWorkerMessageHandler$0();
  }
},
 is$_Manager: true
};

$$._IsolateContext = {"":
 ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 set$id: function(v) { this.id = $.intTypeCheck(v); },
 initGlobals$0: function() {
$initGlobals(this);
},
 eval$1: function(code) {
  $.functionTypeCheck(code);
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
$setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  $.propertyTypeCheck(port, 'is$ReceivePort');
  if ($.boolConversionCheck(this.ports.containsKey$1(portId)))
    throw $.$$throw($.ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.boolConversionCheck($.isEmpty(this.ports)))
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = $.intTypeCheck(t2);
  this.ports = $.callTypeCheck($.HashMapImplementation$('int', 'ReceivePort'), 'is$Map');
  this.initGlobals$0();
},
 is$_IsolateContext: true
};

$$._EventLoop = {"":
 ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.boolConversionCheck($.isEmpty(t1)))
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($.boolConversionCheck($._globalState().get$isWorker()))
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null)) {
        if ($.boolConversionCheck($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id())))
          var t1 = $.boolConversionCheck($.boolConversionCheck($._globalState().get$fromCommandLine()) && $.boolConversionCheck($.isEmpty($._globalState().get$rootContext().get$ports())));
        else
          t1 = false;
        $.boolConversionCheck(t1);
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        throw $.$$throw($.ExceptionImplementation$('Program exited with open ReceivePorts.'));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; $.boolConversionCheck(this.runIteration$0());)
      ;
},
 run$0: function() {
  if (!$.boolConversionCheck($._globalState().get$isWorker()))
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

},
 is$_EventLoop: true
};

$$._IsolateEvent = {"":
 ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":
 [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  $.intTypeCheck(i);
  throw $.$$throw($.NotImplementedException$(null));
},
 set$onmessage: function(f) {
  throw $.$$throw($.ExceptionImplementation$('onmessage should not be set on MainManagerStub'));
},
 postMessage$1: function(msg) {
$globalThis.postMessage(msg);
},
 terminate$0: function() {
},
 is$_ManagerStub: function() { return true; }
};

$$._BaseSendPort = {"":
 ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  if (!(replyTo == null))
    var t1 = $.boolConversionCheck(!(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort));
  else
    t1 = false;
  if ($.boolConversionCheck(t1))
    throw $.$$throw($.ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.Completer_Completer();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"":
 ["_lib1_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.boolConversionCheck($.eq(this._lib1_receivePort, other._lib1_receivePort));
},
 hashCode$0: function() {
  return this._lib1_receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":
 ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort) {
    var t1 = this._workerId;
    var t2 = other._workerId;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this._isolateId;
      t2 = other._isolateId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._receivePortId;
        t2 = other._receivePortId;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    $.boolConversionCheck(t1);
  } else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._BufferingSendPort = {"":
 ["_id?", "_port", "_futurePort?", "pending?", "_isolateId"],
 "super": "_BaseSendPort",
 set$_port: function(v) { this._port = $.propertyTypeCheck(v, 'is$SendPort'); },
 set$pending: function(v) { this.pending = $.listTypeCheck(v); },
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  var t1 = this._port;
  if (!(t1 == null))
    t1.send$2(message, replyTo);
  else
    $.add$1(this.pending, $.makeLiteralMap(['message', message, 'replyTo', replyTo]));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_BufferingSendPort) {
    var t1 = this._id;
    var t2 = other._id;
    t2 = t1 == null ? t2 == null : t1 === t2;
    t1 = t2;
  } else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return this._id;
},
 _BufferingSendPort$2: function(isolateId, _futurePort) {
  $._BufferingSendPort__idCount = $.intTypeCheck($.add($._BufferingSendPort__idCount, 1));
  this._futurePort.then$1(new $.anon13(this));
},
 is$_BufferingSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"":
 ["_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = $.functionTypeCheck($.functionTypeCheck(onMessage));
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
},
 is$_ReceivePortImpl: true,
 is$ReceivePort: true
};

$$._PendingSendPortFinder = {"":
 ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  $.listTypeCheck(list);
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsSerializer = {"":
 ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._lib1_receivePort.get$_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsCopier = {"":
 ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._lib1_receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsDeserializer = {"":
 ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  $.listTypeCheck(x);
  var managerId = $.intTypeCheck($.index(x, 1));
  var isolateId = $.intTypeCheck($.index(x, 2));
  var receivePortId = $.intTypeCheck($.index(x, 3));
  var t1 = $._globalState().get$currentManagerId();
  if (managerId == null ? t1 == null : managerId === t1) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":
 ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  $.assert(this.tagged == null);
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.get$length(this.tagged);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state, length$) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
o['__MessageTraverser__attached_info__'] = (void 0);
},
 _setAttachedInfo$2: function(o, info) {
o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
return o['__MessageTraverser__attached_info__'];
},
 is$_MessageTraverserVisitedMap: true
};

$$._MessageTraverserVisitedMap = {"":
 [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
},
 is$_MessageTraverserVisitedMap: true
};

$$._MessageTraverser = {"":
 [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list);
  var copy = $.listTypeCheck($.index(this._visited, list));
  if (!(copy == null))
    return copy;
  var len = $.get$length(list);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this.visitList$1$bailout(1, list, len);
  copy = $.ListImplementation_List(len);
  $.indexSet(this._visited, list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= len)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state, list, len) {
  var copy = $.ListImplementation_List(len);
  $.indexSet(this._visited, list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  $.callTypeCheck(map, 'is$Map');
  t1.copy_10 = $.callTypeCheck($.index(this._visited, map), 'is$Map');
  var t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  $.indexSet(this._visited, map, t1.copy_10);
  $.forEach(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list);
  var copyId = $.intTypeCheck($.index(this._visited, list));
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1));
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  var copyId = $.intTypeCheck($.index(this._visited, map));
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1));
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  $.listTypeCheck(list);
  var len = $.get$length(list);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._serializeList$1$bailout(1, list, len);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= len)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state, list, len) {
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"":
 [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  $.assert(typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()));
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.intTypeCheck($.index($.listTypeCheck(x), 1));
  var result = $.index(this._deserialized, id);
  $.assert(!(result == null));
  return result;
},
 _deserializeList$1: function(x) {
  $.listTypeCheck(x);
  var id = $.intTypeCheck($.index(x, 1));
  var dartList = $.index(x, 2);
  $.listTypeCheck(dartList);
  $.indexSet(this._deserialized, id, dartList);
  var len = $.get$length(dartList);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._deserializeList$1$bailout(1, len, dartList);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeList$1$bailout: function(state, len, dartList) {
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  $.listTypeCheck(x);
  var result = $.HashMapImplementation$();
  $.callTypeCheck(result, 'is$Map');
  var id = $.intTypeCheck($.index(x, 1));
  $.indexSet(this._deserialized, id, result);
  var keys = $.index(x, 2);
  $.listTypeCheck(keys);
  var values = $.index(x, 3);
  $.listTypeCheck(values);
  var len = $.get$length(keys);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._deserializeMap$1$bailout(1, keys, values, result, len);
  $.assert(len === $.get$length(values));
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 _deserializeMap$1$bailout: function(state, keys, values, result, len) {
  var t2 = $.get$length(values);
  $.assert(len == null ? t2 == null : len === t2);
  for (var i = 0; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1)))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 deserializeObject$1: function(x) {
  $.listTypeCheck(x);
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"":
 ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds);
  $.functionTypeCheck(callback);
  this._handle = $.intTypeCheck($._window().setInterval$2(new $.anon15(this, callback), milliSeconds));
},
 _Timer$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds);
  $.functionTypeCheck(callback);
  this._handle = $.intTypeCheck($._window().setTimeout$2(new $.anon14(this, callback), milliSeconds));
}
};

$$.Uri = {"":
 ["scheme", "userInfo", "domain", "port", "path", "query", "fragment"],
 "super": "Object",
 query$1: function(arg0) { return this.query.call$1(arg0); },
 isAbsolute$0: function() {
  if ('' === this.scheme)
    return false;
  if (!('' === this.fragment))
    return false;
  return true;
},
 hasAuthority$0: function() {
  return !(this.userInfo === '') || !(this.domain === '') || !(this.port === 0);
},
 toString$0: function() {
  var sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
  var t1 = this.scheme;
  $.Uri__addIfNonEmpty(sb, t1, t1, ':');
  if ($.boolConversionCheck(this.hasAuthority$0()) || t1 === 'file') {
    $.add$1(sb, '//');
    t1 = this.userInfo;
    $.Uri__addIfNonEmpty(sb, t1, t1, '@');
    t1 = this.domain;
    $.add$1(sb, t1 == null ? 'null' : t1);
    t1 = this.port;
    if (!(t1 === 0)) {
      $.add$1(sb, ':');
      $.add$1(sb, $.toString(t1));
    }
  }
  t1 = this.path;
  $.add$1(sb, t1 == null ? 'null' : t1);
  t1 = this.query;
  $.Uri__addIfNonEmpty(sb, t1, '?', t1);
  t1 = this.fragment;
  $.Uri__addIfNonEmpty(sb, t1, '#', t1);
  return $.toString(sb);
}
};

$$.Pronoun = {"":
 ["nominative?", "accusative?", "genitive?", "self"],
 "super": "Object",
 toString$0: function() {
  return this.nominative;
},
 is$Pronoun: true
};

$$.Storyline = {"":
 ["strBuf", "reports"],
 "super": "Object",
 add$10: function(str, subject, object, but, positive, negative, endSentence, startSentence, wholeSentence, time) {
  $.stringTypeCheck(str);
  $.propertyTypeCheck(subject, 'is$Actor');
  $.propertyTypeCheck(object, 'is$Actor');
  this.reports.push($.makeLiteralMap(['string', str, 'subject', subject, 'object', object, 'but', but, 'positive', positive, 'negative', negative, 'endSentence', endSentence, 'startSentence', startSentence, 'wholeSentence', wholeSentence, 'time', time]));
},
 add$1: function(str) {
  return this.add$10(str,null,null,false,false,false,false,false,false,null)
},
 add$3$object$subject: function(str,object,subject) {
  return this.add$10(str,subject,object,false,false,false,false,false,false,null)
},
 add$10$but$endSentence$negative$object$positive$startSentence$subject$time$wholeSentence: function(str,but,endSentence,negative,object,positive,startSentence,subject,time,wholeSentence) {
  return this.add$10(str,subject,object,but,positive,negative,endSentence,startSentence,wholeSentence,time)
},
 string$1: function(i) {
  $.intTypeCheck(i);
  var t1 = $.lt(i, 0);
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.string$1$bailout(1, i, t1);
  if ($.boolConversionCheck(t1 || $.boolConversionCheck($.ge(i, this.reports.length))))
    return;
  else {
    t1 = this.reports;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return $.index(t1[i], 'string');
  }
},
 string$1$bailout: function(state, i, t1) {
  if ($.boolConversionCheck(t1 || $.boolConversionCheck($.ge(i, this.reports.length))))
    return;
  else {
    t1 = this.reports;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return $.index(t1[i], 'string');
  }
},
 get$string: function() { return new $.BoundClosure0(this, 'string$1'); },
 subject$1: function(i) {
  $.intTypeCheck(i);
  if ($.boolConversionCheck($.boolConversionCheck($.lt(i, 0)) || $.boolConversionCheck($.ge(i, this.reports.length))))
    return;
  else {
    var t1 = this.reports;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return $.index(t1[i], 'subject');
  }
},
 object$1: function(i) {
  $.intTypeCheck(i);
  if ($.boolConversionCheck($.boolConversionCheck($.lt(i, 0)) || $.boolConversionCheck($.ge(i, this.reports.length))))
    return;
  else {
    var t1 = this.reports;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return $.index(t1[i], 'object');
  }
},
 timeSincePrevious$1: function(i) {
  var t1 = this.reports;
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  if (!($.index(t1[i], 'time') == null)) {
    t1 = i - 1;
    if ($.boolConversionCheck(this.valid$1(t1))) {
      var t2 = this.reports;
      if (t1 < 0 || t1 >= t2.length)
        throw $.ioore(t1);
      var t3 = $.index(t2[t1], 'time') == null;
      t1 = t3;
    } else
      t1 = true;
  } else
    t1 = true;
  if (t1)
    return $.Storyline_VERY_LONG_TIME;
  else {
    t1 = this.reports;
    if (i >= t1.length)
      throw $.ioore(i);
    t2 = $.index(t1[i], 'time');
    if (typeof t2 !== 'number')
      return this.timeSincePrevious$1$bailout(1, i, t2);
    var t4 = this.reports;
    var t5 = i - 1;
    if (t5 < 0 || t5 >= t4.length)
      throw $.ioore(t5);
    var t6 = $.index(t4[t5], 'time');
    if (typeof t6 !== 'number')
      return this.timeSincePrevious$1$bailout(2, t6, t2);
    return t2 - t6;
  }
},
 timeSincePrevious$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var i = env0;
      t2 = env1;
      break;
    case 2:
      t6 = env0;
      t2 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.reports;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if (!($.index(t1[i], 'time') == null)) {
        t1 = i - 1;
        if ($.boolConversionCheck(this.valid$1(t1))) {
          var t2 = this.reports;
          if (t1 < 0 || t1 >= t2.length)
            throw $.ioore(t1);
          var t3 = $.index(t2[t1], 'time') == null;
          t1 = t3;
        } else
          t1 = true;
      } else
        t1 = true;
    default:
      if (state === 0 && $.boolConversionCheck(t1))
        return $.Storyline_VERY_LONG_TIME;
      else
        switch (state) {
          case 0:
            t1 = this.reports;
            if (i >= t1.length)
              throw $.ioore(i);
            t2 = $.index(t1[i], 'time');
          case 1:
            state = 0;
            var t4 = this.reports;
            var t5 = i - 1;
            if (t5 < 0 || t5 >= t4.length)
              throw $.ioore(t5);
            var t6 = $.index(t4[t5], 'time');
          case 2:
            state = 0;
            return $.sub(t2, t6);
        }
  }
},
 same$3: function(key, i, j) {
  $.intTypeCheck(j);
  if ($.boolConversionCheck(this.valid$1(i))) {
    var t1 = this.valid$1(j);
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.same$3$bailout(1, key, i, j, t1);
    t1 = !t1;
  } else
    t1 = true;
  if (t1)
    return false;
  t1 = this.reports;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  if (!($.index(t1[i], key) == null)) {
    t1 = this.reports;
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    var t2 = $.index(t1[j], key) == null;
    t1 = t2;
  } else
    t1 = true;
  if (t1)
    return false;
  t1 = this.reports;
  if (i >= t1.length)
    throw $.ioore(i);
  t2 = $.index(t1[i], key);
  var t3 = this.reports;
  if (j !== (j | 0))
    throw $.iae(j);
  if (j < 0 || j >= t3.length)
    throw $.ioore(j);
  if ($.boolConversionCheck($.eq(t2, $.index(t3[j], key))))
    return true;
  else
    return false;
},
 same$3$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var key = env0;
      var i = env1;
      var j = env2;
      t1 = env3;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(j);
    case 1:
      if (state === 1 || state === 0 && $.boolConversionCheck(this.valid$1(i)))
        switch (state) {
          case 0:
            var t1 = this.valid$1(j);
            $.boolConversionCheck(t1);
          case 1:
            state = 0;
            t1 = !t1;
        }
      else
        t1 = true;
      if (t1)
        return false;
      t1 = this.reports;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if (!($.index(t1[i], key) == null)) {
        t1 = this.reports;
        if (j !== (j | 0))
          throw $.iae(j);
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        var t2 = $.index(t1[j], key) == null;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        return false;
      t1 = this.reports;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = $.index(t1[i], key);
      var t3 = this.reports;
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t3.length)
        throw $.ioore(j);
      if ($.boolConversionCheck($.eq(t2, $.index(t3[j], key))))
        return true;
      else
        return false;
  }
},
 exchanged$4: function(key1, key2, i, j) {
  $.intTypeCheck(i);
  if ($.boolConversionCheck(this.valid$1(i))) {
    var t1 = this.valid$1(j);
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.exchanged$4$bailout(1, key1, key2, i, j, t1);
    t1 = !t1;
  } else
    t1 = true;
  if (t1)
    return false;
  t1 = this.reports;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  if (!($.index(t1[i], key1) == null)) {
    t1 = this.reports;
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    var t2 = $.index(t1[j], key1) == null;
    t1 = t2;
  } else
    t1 = true;
  if (t1)
    return false;
  t1 = this.reports;
  if (i >= t1.length)
    throw $.ioore(i);
  if (!($.index(t1[i], key2) == null)) {
    t1 = this.reports;
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    t2 = $.index(t1[j], key2) == null;
    t1 = t2;
  } else
    t1 = true;
  if (t1)
    return false;
  t1 = this.reports;
  if (i >= t1.length)
    throw $.ioore(i);
  t2 = $.index(t1[i], key1);
  var t3 = this.reports;
  if (j !== (j | 0))
    throw $.iae(j);
  if (j < 0 || j >= t3.length)
    throw $.ioore(j);
  if ($.boolConversionCheck($.eq(t2, $.index(t3[j], key2)))) {
    t1 = this.reports;
    if (i >= t1.length)
      throw $.ioore(i);
    t2 = $.index(t1[i], key2);
    t3 = this.reports;
    if (j >= t3.length)
      throw $.ioore(j);
    t2 = $.boolConversionCheck($.eq(t2, $.index(t3[j], key1)));
    t1 = t2;
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    return true;
  else
    return false;
},
 exchanged$4$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key1 = env0;
      var key2 = env1;
      var i = env2;
      var j = env3;
      t1 = env4;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(i);
    case 1:
      if (state === 1 || state === 0 && $.boolConversionCheck(this.valid$1(i)))
        switch (state) {
          case 0:
            var t1 = this.valid$1(j);
            $.boolConversionCheck(t1);
          case 1:
            state = 0;
            t1 = !t1;
        }
      else
        t1 = true;
      if (t1)
        return false;
      t1 = this.reports;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if (!($.index(t1[i], key1) == null)) {
        t1 = this.reports;
        if (j !== (j | 0))
          throw $.iae(j);
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        var t2 = $.index(t1[j], key1) == null;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        return false;
      t1 = this.reports;
      if (i >= t1.length)
        throw $.ioore(i);
      if (!($.index(t1[i], key2) == null)) {
        t1 = this.reports;
        if (j !== (j | 0))
          throw $.iae(j);
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        t2 = $.index(t1[j], key2) == null;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        return false;
      t1 = this.reports;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = $.index(t1[i], key1);
      var t3 = this.reports;
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t3.length)
        throw $.ioore(j);
      if ($.boolConversionCheck($.eq(t2, $.index(t3[j], key2)))) {
        t1 = this.reports;
        if (i >= t1.length)
          throw $.ioore(i);
        t2 = $.index(t1[i], key2);
        t3 = this.reports;
        if (j >= t3.length)
          throw $.ioore(j);
        t2 = $.boolConversionCheck($.eq(t2, $.index(t3[j], key1)));
        t1 = t2;
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        return true;
      else
        return false;
  }
},
 valid$1: function(i) {
  if ($.boolConversionCheck($.boolConversionCheck($.ge(i, this.reports.length)) || $.boolConversionCheck($.lt(i, 0))))
    return false;
  else
    return true;
},
 sameSentiment$2: function(i, j) {
  if ($.boolConversionCheck(this.valid$1(i))) {
    var t1 = this.valid$1(j);
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.sameSentiment$2$bailout(1, i, j, t1);
    t1 = !t1;
  } else
    t1 = true;
  if (t1)
    return false;
  if ($.boolConversionCheck(this.exchanged$4('subject', 'object', i, j)) && !$.eqB(this.subject$1(i).get$team(), this.subject$1(j).get$team())) {
    t1 = this.reports;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
      t1 = this.reports;
      if (j < 0 || j >= t1.length)
        throw $.ioore(j);
      var t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
      t1 = t2;
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return true;
    t1 = this.reports;
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
      t1 = this.reports;
      if (j < 0 || j >= t1.length)
        throw $.ioore(j);
      t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
      t1 = t2;
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return true;
  }
  t1 = this.same$3('subject', i, j);
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.sameSentiment$2$bailout(2, i, j, t1);
  if (!t1)
    return false;
  t1 = this.reports;
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
    t1 = this.reports;
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
    t1 = t2;
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    return true;
  t1 = this.reports;
  if (i >= t1.length)
    throw $.ioore(i);
  if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
    t1 = this.reports;
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
    t1 = t2;
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    return true;
  else
    return false;
},
 sameSentiment$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var i = env0;
      var j = env1;
      t1 = env2;
      break;
    case 2:
      i = env0;
      j = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      if (state === 1 || state === 0 && $.boolConversionCheck(this.valid$1(i)))
        switch (state) {
          case 0:
            var t1 = this.valid$1(j);
            $.boolConversionCheck(t1);
          case 1:
            state = 0;
            t1 = !t1;
        }
      else
        t1 = true;
      if (t1)
        return false;
      if ($.boolConversionCheck(this.exchanged$4('subject', 'object', i, j)) && !$.eqB(this.subject$1(i).get$team(), this.subject$1(j).get$team())) {
        t1 = this.reports;
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
          t1 = this.reports;
          if (j < 0 || j >= t1.length)
            throw $.ioore(j);
          var t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
          t1 = t2;
        } else
          t1 = false;
        if ($.boolConversionCheck(t1))
          return true;
        t1 = this.reports;
        if (i >= t1.length)
          throw $.ioore(i);
        if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
          t1 = this.reports;
          if (j < 0 || j >= t1.length)
            throw $.ioore(j);
          t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
          t1 = t2;
        } else
          t1 = false;
        if ($.boolConversionCheck(t1))
          return true;
      }
      t1 = this.same$3('subject', i, j);
      $.boolConversionCheck(t1);
    case 2:
      state = 0;
      if (!t1)
        return false;
      t1 = this.reports;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
        t1 = this.reports;
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
        t1 = t2;
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        return true;
      t1 = this.reports;
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
        t1 = this.reports;
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
        t1 = t2;
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        return true;
      else
        return false;
  }
},
 oppositeSentiment$2: function(i, j) {
  if ($.boolConversionCheck(this.valid$1(i))) {
    var t1 = this.valid$1(j);
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.oppositeSentiment$2$bailout(1, i, j, t1);
    t1 = !t1;
  } else
    t1 = true;
  if (t1)
    return false;
  if ($.boolConversionCheck(this.exchanged$4('subject', 'object', i, j)) && !$.eqB(this.subject$1(i).get$team(), this.subject$1(j).get$team())) {
    t1 = this.reports;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
      t1 = this.reports;
      if (j < 0 || j >= t1.length)
        throw $.ioore(j);
      var t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
      t1 = t2;
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return true;
    t1 = this.reports;
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
      t1 = this.reports;
      if (j < 0 || j >= t1.length)
        throw $.ioore(j);
      t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
      t1 = t2;
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return true;
  }
  t1 = this.same$3('subject', i, j);
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.oppositeSentiment$2$bailout(2, i, j, t1);
  if (!t1)
    return false;
  t1 = this.reports;
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
    t1 = this.reports;
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
    t1 = t2;
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    return true;
  t1 = this.reports;
  if (i >= t1.length)
    throw $.ioore(i);
  if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
    t1 = this.reports;
    if (j < 0 || j >= t1.length)
      throw $.ioore(j);
    t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
    t1 = t2;
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    return true;
  else
    return false;
},
 oppositeSentiment$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var i = env0;
      var j = env1;
      t1 = env2;
      break;
    case 2:
      i = env0;
      j = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      if (state === 1 || state === 0 && $.boolConversionCheck(this.valid$1(i)))
        switch (state) {
          case 0:
            var t1 = this.valid$1(j);
            $.boolConversionCheck(t1);
          case 1:
            state = 0;
            t1 = !t1;
        }
      else
        t1 = true;
      if (t1)
        return false;
      if ($.boolConversionCheck(this.exchanged$4('subject', 'object', i, j)) && !$.eqB(this.subject$1(i).get$team(), this.subject$1(j).get$team())) {
        t1 = this.reports;
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
          t1 = this.reports;
          if (j < 0 || j >= t1.length)
            throw $.ioore(j);
          var t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
          t1 = t2;
        } else
          t1 = false;
        if ($.boolConversionCheck(t1))
          return true;
        t1 = this.reports;
        if (i >= t1.length)
          throw $.ioore(i);
        if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
          t1 = this.reports;
          if (j < 0 || j >= t1.length)
            throw $.ioore(j);
          t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
          t1 = t2;
        } else
          t1 = false;
        if ($.boolConversionCheck(t1))
          return true;
      }
      t1 = this.same$3('subject', i, j);
      $.boolConversionCheck(t1);
    case 2:
      state = 0;
      if (!t1)
        return false;
      t1 = this.reports;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.index(t1[i], 'positive'))) {
        t1 = this.reports;
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        t2 = $.boolConversionCheck($.index(t1[j], 'negative'));
        t1 = t2;
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        return true;
      t1 = this.reports;
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.index(t1[i], 'negative'))) {
        t1 = this.reports;
        if (j < 0 || j >= t1.length)
          throw $.ioore(j);
        t2 = $.boolConversionCheck($.index(t1[j], 'positive'));
        t1 = t2;
      } else
        t1 = false;
      if ($.boolConversionCheck(t1))
        return true;
      else
        return false;
  }
},
 substitute$4: function(i, str, useSubjectPronoun, useObjectPronoun) {
  if (i !== (i | 0))
    return this.substitute$4$bailout(1, i, str, useSubjectPronoun, useObjectPronoun);
  var result = $.stringTypeCheck($.replaceAll(str, '<action>', this.string$1(i)));
  if ($.boolConversionCheck(useObjectPronoun || $.boolConversionCheck(this.same$3('object', i, i - 1))))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<object>', this.object$1(i).get$pronoun().get$accusative())), '<object\'s>', this.object$1(i).get$pronoun().get$genitive()));
  if ($.boolConversionCheck(useSubjectPronoun || $.boolConversionCheck(this.same$3('subject', i, i - 1))))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<subject>', this.subject$1(i).get$pronoun().get$nominative())), '<subject\'s>', this.subject$1(i).get$pronoun().get$genitive()));
  var t1 = i - 1;
  if ($.boolConversionCheck(!(this.object$1(t1) == null) && !(this.subject$1(i) == null) && !(this.subject$1(t1) == null) && $.boolConversionCheck($.eq(this.object$1(t1), this.subject$1(i))) && !$.eqB(this.subject$1(t1).get$pronoun(), this.subject$1(i).get$pronoun())))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<subject>', this.subject$1(i).get$pronoun().get$nominative())), '<subject\'s>', this.subject$1(i).get$pronoun().get$genitive()));
  if ($.boolConversionCheck(!(this.subject$1(t1) == null) && !(this.object$1(i) == null) && !(this.subject$1(t1) == null) && $.boolConversionCheck($.eq(this.subject$1(t1), this.object$1(i))) && !$.eqB(this.subject$1(t1).get$pronoun(), this.subject$1(i).get$pronoun())))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<object>', this.object$1(i).get$pronoun().get$accusative())), '<object\'s>', this.object$1(i).get$pronoun().get$genitive()));
  return $.Storyline_getString(result, this.subject$1(i), this.object$1(i));
},
 substitute$4$bailout: function(state, i, str, useSubjectPronoun, useObjectPronoun) {
  var result = $.stringTypeCheck($.replaceAll(str, '<action>', this.string$1(i)));
  if ($.boolConversionCheck(useObjectPronoun || $.boolConversionCheck(this.same$3('object', i, $.sub(i, 1)))))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<object>', this.object$1(i).get$pronoun().get$accusative())), '<object\'s>', this.object$1(i).get$pronoun().get$genitive()));
  if ($.boolConversionCheck(useSubjectPronoun || $.boolConversionCheck(this.same$3('subject', i, $.sub(i, 1)))))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<subject>', this.subject$1(i).get$pronoun().get$nominative())), '<subject\'s>', this.subject$1(i).get$pronoun().get$genitive()));
  if (!(this.object$1($.sub(i, 1)) == null)) {
    if (!(this.subject$1(i) == null))
      var t1 = $.boolConversionCheck(!(this.subject$1($.sub(i, 1)) == null) && $.boolConversionCheck($.eq(this.object$1($.sub(i, 1)), this.subject$1(i))) && !$.eqB(this.subject$1($.sub(i, 1)).get$pronoun(), this.subject$1(i).get$pronoun()));
    else
      t1 = false;
    $.boolConversionCheck(t1);
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<subject>', this.subject$1(i).get$pronoun().get$nominative())), '<subject\'s>', this.subject$1(i).get$pronoun().get$genitive()));
  if (!(this.subject$1($.sub(i, 1)) == null)) {
    if (!(this.object$1(i) == null))
      t1 = $.boolConversionCheck(!(this.subject$1($.sub(i, 1)) == null) && $.boolConversionCheck($.eq(this.subject$1($.sub(i, 1)), this.object$1(i))) && !$.eqB(this.subject$1($.sub(i, 1)).get$pronoun(), this.subject$1(i).get$pronoun()));
    else
      t1 = false;
    $.boolConversionCheck(t1);
  } else
    t1 = false;
  if ($.boolConversionCheck(t1))
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<object>', this.object$1(i).get$pronoun().get$accusative())), '<object\'s>', this.object$1(i).get$pronoun().get$genitive()));
  return $.Storyline_getString(result, this.subject$1(i), this.object$1(i));
},
 substitute$2: function(i,str) {
  return this.substitute$4(i,str,false,false)
},
 clear$0: function() {
  $.clear(this.reports);
  $.clear(this.strBuf);
},
 toString$0: function() {
  var length$ = this.reports.length;
  if ($.boolConversionCheck(length$ < 1))
    return '';
  for (var t1 = length$ - 1, lastEndSentence = -1, endThisSentence = false, endPreviousSentence = true, but = false, i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = i === 0;
    if (!t2) {
      var objectSubjectSwitch = $.boolTypeCheck(this.exchanged$4('subject', 'object', $.sub(i, 1), i));
      var t3 = this.reports;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t3.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.boolConversionCheck($.index(t3[i], 'but')) || $.boolConversionCheck(this.oppositeSentiment$2(i, i - 1)))) {
        t3 = this.reports;
        var t4 = i - 1;
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        but = !$.boolConversionCheck($.index(t3[t4], 'but'));
      } else
        but = false;
      t3 = this.reports;
      if (i >= t3.length)
        throw $.ioore(i);
      $.indexSet(t3[i], 'but', but);
      if (typeof lastEndSentence !== 'number')
        throw $.iae(lastEndSentence);
      if (!$.boolConversionCheck(i - lastEndSentence >= 3)) {
        if (!endThisSentence) {
          t3 = this.reports;
          if (i >= t3.length)
            throw $.ioore(i);
          if (!$.boolConversionCheck($.index(t3[i], 'startSentence'))) {
            t3 = this.reports;
            t4 = i - 1;
            if (t4 !== (t4 | 0))
              throw $.iae(t4);
            if (t4 < 0 || t4 >= t3.length)
              throw $.ioore(t4);
            if (!$.boolConversionCheck($.index(t3[t4], 'endSentence'))) {
              t3 = this.reports;
              if (i >= t3.length)
                throw $.ioore(i);
              if (!$.boolConversionCheck($.index(t3[i], 'wholeSentence'))) {
                if ($.boolConversionCheck($.boolConversionCheck(this.same$3('subject', i, t4)) || objectSubjectSwitch)) {
                  if (but) {
                    if (typeof lastEndSentence !== 'number')
                      throw $.iae(lastEndSentence);
                    t3 = $.boolConversionCheck(i - lastEndSentence > 1);
                  } else
                    t3 = false;
                  if (!$.boolConversionCheck(t3)) {
                    if (but) {
                      t3 = this.reports;
                      if (t4 >= t3.length)
                        throw $.ioore(t4);
                      var t5 = $.boolConversionCheck($.index(t3[t4], 'but'));
                      t3 = t5;
                    } else
                      t3 = false;
                    t3 = $.boolConversionCheck($.boolConversionCheck(t3) || $.boolConversionCheck($.gt(this.timeSincePrevious$1(i), $.Storyline_SHORT_TIME)));
                  } else
                    t3 = true;
                  $.boolConversionCheck(t3);
                } else
                  t3 = true;
                $.boolConversionCheck(t3);
              } else
                t3 = true;
              $.boolConversionCheck(t3);
            } else
              t3 = true;
            $.boolConversionCheck(t3);
          } else
            t3 = true;
          $.boolConversionCheck(t3);
        } else
          t3 = true;
        $.boolConversionCheck(t3);
        endPreviousSentence = t3;
      } else
        endPreviousSentence = true;
      if (endPreviousSentence) {
        t3 = this.reports;
        t4 = i - 1;
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        t5 = $.boolConversionCheck($.index(t3[t4], 'wholeSentence'));
        var t6 = this.strBuf;
        if (t5)
          $.add$1(t6, ' ');
        else
          $.add$1(t6, '. ');
        if (but) {
          t3 = this.reports;
          if (i >= t3.length)
            throw $.ioore(i);
          t4 = !$.boolConversionCheck($.index(t3[i], 'wholeSentence'));
          t3 = t4;
        } else
          t3 = false;
        if (t3)
          $.add$1(this.strBuf, $.randomly(['But ', 'But ', 'However, ', 'Nonetheless, ', 'Nevertheless, ']));
        endThisSentence = false;
      } else if (but) {
        $.add$1(this.strBuf, $.randomly([' but ', ' but ', ' yet ', ', but ']));
        endThisSentence = !$.boolConversionCheck(this.sameSentiment$2(i, i + 1)) && true;
      } else {
        if ($.boolConversionCheck(this.same$3('subject', i, i - 1))) {
          if ($.boolConversionCheck($.startsWith(this.string$1(i), '<subject> '))) {
            if ($.boolConversionCheck(i < t1)) {
              if (typeof lastEndSentence !== 'number')
                throw $.iae(lastEndSentence);
              t3 = $.boolConversionCheck(i - lastEndSentence < 2);
            } else
              t3 = false;
            $.boolConversionCheck(t3);
          } else
            t3 = false;
          $.boolConversionCheck(t3);
        } else
          t3 = false;
        $.boolConversionCheck(t3);
        t4 = this.strBuf;
        if (t3) {
          $.add$1(t4, ', ');
          endThisSentence = false;
        } else {
          $.add$1(t4, $.randomly([' and ', ' and ', ', and ']));
          endThisSentence = true;
        }
      }
    }
    var report = $.stringTypeCheck(this.string$1(i));
    $.boolConversionCheck(endPreviousSentence);
    t3 = !endPreviousSentence;
    report = $.stringTypeCheck(this.substitute$2(i, t3 ? $.boolConversionCheck(this.same$3('subject', i, $.sub(i, 1))) ? $.boolConversionCheck($.startsWith(this.string$1($.sub(i, 1)), '<subject> ')) ? $.boolConversionCheck($.startsWith(report, '<subject> ')) ? $.stringTypeCheck($.replaceFirst(report, '<subject> ', '')) : report : report : report : report));
    if ($.boolConversionCheck(endPreviousSentence || t2) && !$.boolConversionCheck(but))
      report = $.capitalize(report);
    $.add$1(this.strBuf, report);
    if (endPreviousSentence)
      lastEndSentence = i;
    t2 = this.reports;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t2.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.index(t2[i], 'wholeSentence')))
      endThisSentence = true;
  }
  t2 = this.reports;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= t2.length)
    throw $.ioore(t1);
  if (!$.boolConversionCheck($.index(t2[t1], 'wholeSentence')))
    $.add$1(this.strBuf, '.');
  return $.toString(this.strBuf);
},
 Storyline$0: function() {
  var t1 = $.ListImplementation_List(null, 'Map<String, Dynamic_>');
  $.setRuntimeTypeInfo(t1, {'E': 'Map<String, Dynamic_>'});
  this.reports = t1;
  this.strBuf = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
},
 is$Storyline: true
};

$$.GameEntity = {"":
 ["names", "pronoun?"],
 "super": "Object",
 set$names: function(v) { this.names = $.listTypeCheck(v); },
 set$pronoun: function(v) { this.pronoun = $.propertyTypeCheck(v, 'is$Pronoun'); },
 hashCode$0: function() {
  var t1 = $.GLOBAL_HASH_I;
  $.GLOBAL_HASH_I = $.intTypeCheck($.add(t1, 1));
  return t1;
},
 get$name: function() {
  return $.randomly(this.names);
},
 GameEntity$0: function() {
  this.names = $.ListImplementation_List(null);
},
 is$GameEntity: true
};

$$.Actor = {"":
 ["alive?", "isPlayer?", "team?", "_hitpoints", "_stance", "stanceUpStrings", "stanceDownStrings", "moves?", "_currentMove", "previousMove?", "weapon?", "armors?", "tillEndOfMove?", "recoveringFromMove", "combat?", "_target?", "on?", "maxHitpoints", "maxStance", "speed", "fighting", "names", "pronoun"],
 "super": "GameEntity",
 set$team: function(v) { this.team = $.intTypeCheck(v); },
 set$weapon: function(v) { this.weapon = $.propertyTypeCheck(v, 'is$WeaponType'); },
 set$tillEndOfMove: function(v) { this.tillEndOfMove = $.intTypeCheck(v); },
 set$combat: function(v) { this.combat = $.propertyTypeCheck(v, 'is$Combat'); },
 set$speed: function(v) { this.speed = $.intTypeCheck(v); },
 set$fighting: function(v) { this.fighting = $.intTypeCheck(v); },
 report$10: function(str, subject, object, but, positive, negative, endSentence, startSentence, wholeSentence, reportOnlyOnAlive) {
  $.stringTypeCheck(str);
  $.propertyTypeCheck(object, 'is$Actor');
  $.boolTypeCheck(negative);
  $.boolTypeCheck(endSentence);
  var t1 = this.combat;
  if (t1 == null)
    return;
  if (subject == null)
    subject = this;
  if (!$.boolConversionCheck(subject.get$alive()) && reportOnlyOnAlive)
    return;
  t1.get$storyline().add$10$but$endSentence$negative$object$positive$startSentence$subject$time$wholeSentence(str, but, endSentence, negative, object, positive, startSentence, subject, t1.get$time(), wholeSentence);
},
 report$1: function(str) {
  return this.report$10(str,null,null,false,false,false,false,false,false,true)
},
 report$2$positive: function(str,positive) {
  return this.report$10(str,null,null,false,positive,false,false,false,false,true)
},
 report$2$negative: function(str,negative) {
  return this.report$10(str,null,null,false,false,negative,false,false,false,true)
},
 report$3$negative$reportOnlyOnAlive: function(str,negative,reportOnlyOnAlive) {
  return this.report$10(str,null,null,false,false,negative,false,false,false,reportOnlyOnAlive)
},
 report$3$object$positive: function(str,object,positive) {
  return this.report$10(str,null,object,false,positive,false,false,false,false,true)
},
 report$3$negative$object: function(str,negative,object) {
  return this.report$10(str,null,object,false,false,negative,false,false,false,true)
},
 report$3$object$wholeSentence: function(str,object,wholeSentence) {
  return this.report$10(str,null,object,false,false,false,false,false,wholeSentence,true)
},
 report$3$endSentence$object: function(str,endSentence,object) {
  return this.report$10(str,null,object,false,false,false,endSentence,false,false,true)
},
 report$2$wholeSentence: function(str,wholeSentence) {
  return this.report$10(str,null,null,false,false,false,false,false,wholeSentence,true)
},
 get$modifiedFighting: function() {
  var t1 = this._stance;
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var stanceMod = $.intTypeCheck($.toInt($.max((29 - t1) / 10 + 1, 0)));
  var t2 = this.maxHitpoints;
  var t3 = this._hitpoints;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  var hitpointsMod = $.intTypeCheck($.toInt($.max(0, ((t2 - t3) / t2 - 0.7) * 10)));
  t1 = this.get$currentMove() == null;
  t2 = this.fighting;
  if (t1)
    return $.sub($.sub(t2, stanceMod), hitpointsMod);
  else
    return $.add($.sub($.sub(t2, stanceMod), hitpointsMod), this.get$currentMove().get$type().get$fightingMod());
},
 get$modifiedAttacking: function() {
  if (this.get$currentMove() == null)
    return this.get$modifiedFighting();
  else
    return $.sub(this.get$modifiedFighting(), this.get$currentMove().get$type().get$fightingMod());
},
 get$modifiedDodging: function() {
  var value = this.get$modifiedFighting();
  $.intTypeCheck(value);
  if (value !== (value | 0))
    return this.get$modifiedDodging$bailout(1, value);
  for (var t1 = $.iterator(this.armors); $.boolConversionCheck(t1.hasNext$0());)
    value = $.intTypeCheck($.add(value, t1.next$0().get$dodgingMod()));
  return value;
},
 get$modifiedDodging$bailout: function(state, value) {
  for (var t1 = $.iterator(this.armors); $.boolConversionCheck(t1.hasNext$0());)
    value = $.intTypeCheck($.add(value, t1.next$0().get$dodgingMod()));
  return value;
},
 get$currentMove: function() {
  return this._currentMove;
},
 set$currentMove: function(value) {
  $.propertyTypeCheck(value, 'is$CombatMoveType');
  var t1 = this._currentMove;
  if (!(t1 == null))
    this.previousMove = $.propertyTypeCheck(t1.get$type(), 'is$CombatMoveType');
  if (value == null) {
    t1 = this._currentMove;
    if (!(t1 == null)) {
      this.tillEndOfMove = $.intTypeCheck(t1.get$type().get$recovery());
      if ($.boolConversionCheck($.gt(this.tillEndOfMove, 0)))
        this.recoveringFromMove = true;
    }
    this._currentMove = null;
  } else {
    this._currentMove = $.CurrentCombatMove$(value, this, this.get$target());
    this.tillEndOfMove = $.intTypeCheck(this._currentMove.get$type().get$duration());
    $.index(this._currentMove.get$on(), 'start').dispatchAll$1($.CombatEvent$fromMove(this._currentMove));
  }
},
 get$hitpoints: function() {
  return this._hitpoints;
},
 set$hitpoints: function(value) {
  $.intTypeCheck(value);
  if ($.boolConversionCheck($.le(value, 0))) {
    $.index(this.on, 'die').dispatchAll$0();
    this.alive = false;
    return;
  }
  if ($.boolConversionCheck($.lt(value, this._hitpoints))) {
    $.index(this.on, 'hitpointsDown').dispatchAll$0();
    if (!(this.get$currentMove() == null))
      $.index(this.get$currentMove().get$on(), 'hitpointsDown').dispatchAll$0();
  } else if ($.boolConversionCheck($.gt(value, this._hitpoints))) {
    $.index(this.on, 'hitpointsUp').dispatchAll$0();
    if (!(this.get$currentMove() == null))
      $.index(this.get$currentMove().get$on(), 'hitpointsUp').dispatchAll$0();
  }
  var t1 = this.maxHitpoints;
  var almostDyingThreshold = $.intTypeCheck($.min(3, $.toInt(t1 / 3)));
  if ($.boolConversionCheck($.boolConversionCheck($.gt(this._hitpoints, almostDyingThreshold)) && $.boolConversionCheck($.lt(value, almostDyingThreshold))))
    $.index(this.on, 'almostDying').dispatchAll$0();
  this._hitpoints = $.intTypeCheck($.min(value, t1));
},
 get$stance: function() {
  return this._stance;
},
 set$stance: function(value) {
  $.intTypeCheck(value);
  if (!this.alive)
    return;
  var prevStance = $.intTypeCheck(this._stance);
  this._stance = $.intTypeCheck($.min(value, this.maxStance));
  this._stance = $.intTypeCheck($.max(0, this._stance));
  if (!$.eqB($.toInt($.div(this._stance, 10)), $.toInt($.div(prevStance, 10)))) {
    var t1 = $.boolConversionCheck($.gt(this._stance, prevStance));
    var t2 = this._stance;
    if (t1) {
      this.report$2$positive($.index(this.stanceUpStrings, $.min(5, $.toInt($.div(t2, 10)))), true);
      $.index(this.on, 'stanceUp').dispatchAll$0();
      if (!(this.get$currentMove() == null))
        $.index(this.get$currentMove().get$on(), 'stanceUp').dispatchAll$0();
    } else {
      this.report$2$negative($.index(this.stanceDownStrings, $.min(5, $.toInt($.div(t2, 10)))), true);
      $.index(this.on, 'stanceDown').dispatchAll$0();
      if (!(this.get$currentMove() == null))
        $.index(this.get$currentMove().get$on(), 'stanceDown').dispatchAll$0();
      if ($.boolConversionCheck($.boolConversionCheck($.gt($.sub(prevStance, this._stance), 10)) && $.boolConversionCheck($.lt(this._stance, 10))))
        this.set$hitpoints($.sub(this.get$hitpoints(), 1));
    }
  }
},
 get$target: function() {
  return this._target;
},
 set$target: function(value) {
  this._target = $.propertyTypeCheck(value, 'is$Actor');
  this.previousMove = null;
},
 isArmoredAgainst$3: function(weapon, move, e) {
  $.propertyTypeCheck(weapon, 'is$WeaponType');
  $.propertyTypeCheck(move, 'is$CombatMoveType');
  for (var t1 = $.iterator(this.armors), t2 = !(e == null); result = false, $.boolConversionCheck(t1.hasNext$0());) {
    var t3 = t1.next$0();
    if (!$.boolConversionCheck(move.hasFlag$1(t3.get$coveringEffects())))
      continue;
    if (!$.boolConversionCheck(move.hasFlag$1(t3.get$coveringTargets())))
      continue;
    if (!$.boolConversionCheck(move.hasFlag$1(t3.get$coveringSides())))
      continue;
    if ($.boolConversionCheck(move.get$isHitpointsDamaging()))
      if ($.boolConversionCheck($.gt(t3.get$hardness(), weapon.get$piercing()))) {
        if (t2)
          e.set$armor(t3);
        var result = true;
        break;
      }
  }
  return result;
},
 isArmoredAgainst$2: function(weapon,move) {
  return this.isArmoredAgainst$3(weapon,move,null)
},
 update$0: function() {
  if (!this.alive)
    return;
  $.index(this.on, 'update').dispatchAll$0();
  if (!this.alive)
    return;
  this.tillEndOfMove = $.intTypeCheck($.sub(this.tillEndOfMove, 1));
  $.print($.S(this.get$name()) + ' tillEndOfMove: ' + $.S(this.tillEndOfMove));
  if ($.boolConversionCheck($.gt(this.tillEndOfMove, 0)) && !(this.get$currentMove() == null)) {
    var e = $.CombatEvent$fromMove(this.get$currentMove());
    if (!(this.get$target() == null))
      var t1 = $.boolConversionCheck(!$.boolConversionCheck(this.get$target().get$alive()) && $.boolConversionCheck(this.get$currentMove().get$type().get$isOffensive()));
    else
      t1 = false;
    if ($.boolConversionCheck(t1)) {
      $.index(this.get$currentMove().get$on(), 'cancel').dispatchAll$1(e);
      this.set$currentMove(null);
      this.set$target(null);
      return;
    } else if ($.boolConversionCheck(this.get$currentMove().get$type().canContinue$2(this, this.get$target())))
      $.index(this.get$currentMove().get$on(), 'update').dispatchAll$1(e);
    else {
      $.index(this.get$currentMove().get$on(), 'cancel').dispatchAll$1(e);
      this.set$currentMove(null);
      return;
    }
  } else if ($.boolConversionCheck($.le(this.tillEndOfMove, 0))) {
    if (!(this.get$currentMove() == null)) {
      e = $.CombatEvent$fromMove(this.get$currentMove());
      if ($.boolConversionCheck(this.get$currentMove().get$type().canContinue$2(this, this.get$target())))
        if ($.boolConversionCheck(this.get$currentMove().get$type().get$isOffensive())) {
          var chanceToDodge = $.doubleTypeCheck(this.get$currentMove().get$type().chanceToDodge$2(this, this.get$target()));
          if ($.boolConversionCheck($.lt($.Random_Random(null).nextDouble$0(), chanceToDodge))) {
            $.print('- dodge success');
            e.set$chance(chanceToDodge);
            e.set$chanceAll(chanceToDodge);
            $.index(this.get$target().get$on(), 'dodge').dispatchAll$1(e);
            $.index(this.get$currentMove().get$on(), 'sufferDodge').dispatchAll$1(e);
            $.index(this.on, 'sufferDodge').dispatchAll$1(e);
            this.set$currentMove(null);
            return;
          } else {
            $.print('- dodge fail');
            var chanceToBlock = $.doubleTypeCheck(this.get$currentMove().get$type().chanceToBlock$2(this, this.get$target()));
            if ($.boolConversionCheck($.lt($.Random_Random(null).nextDouble$0(), chanceToBlock))) {
              $.print('- block success');
              e.set$chance(chanceToBlock);
              e.set$chanceAll(chanceToBlock);
              $.index(this.get$currentMove().get$on(), 'sufferMeetWeapon').dispatchAll$1(e);
              if ($.boolConversionCheck($.ge(this.get$target().get$weapon().get$hardness(), this.weapon.get$piercing())))
                $.index(this.get$currentMove().get$on(), 'sufferBlock').dispatchAll$1(e);
              else {
                $.index(this.get$target().get$weapon().get$on(), 'sufferPierced').dispatchAll$1(e);
                if (!(this.get$target().get$weapon().get$weaponWhenPierced() == null)) {
                  t1 = this.get$target().get$weapon().get$weaponWhenPierced();
                  this.get$target().set$weapon(t1);
                } else
                  $.print('Warning: weapon ' + $.S(this.get$target().get$weapon().get$name()) + ' doesn\'t have \'weaponWhenPierced\' defined.');
              }
              $.index(this.get$target().get$on(), 'block').dispatchAll$1(e);
              $.index(this.on, 'sufferBlock').dispatchAll$1(e);
              this.set$currentMove(null);
              return;
            } else {
              $.print('- block fail => hit');
              if (typeof chanceToBlock !== 'number')
                throw $.iae(chanceToBlock);
              t1 = 1 - chanceToBlock;
              e.set$chance(t1);
              if (typeof chanceToDodge !== 'number')
                throw $.iae(chanceToDodge);
              e.set$chanceAll(t1 * (1 - chanceToDodge));
              if ($.boolConversionCheck(this.get$target().isArmoredAgainst$3(this.weapon, this.get$currentMove().get$type(), e))) {
                $.index(this.get$currentMove().get$on(), 'sufferDeflect').dispatchAll$1(e);
                $.index(e.armor.get$on(), 'deflect').dispatchAll$1(e);
                $.index(this.get$target().get$on(), 'deflect').dispatchAll$1(e);
                $.index(this.on, 'sufferDeflect').dispatchAll$1(e);
              } else {
                $.index(this.get$currentMove().get$on(), 'hit').dispatchAll$1(e);
                $.index(this.get$target().get$on(), 'sufferHit').dispatchAll$1(e);
                if (!(this.get$target().get$currentMove() == null))
                  $.index(this.get$target().get$currentMove().get$on(), 'sufferHit').dispatchAll$1(e);
                $.index(this.on, 'hit').dispatchAll$1(e);
              }
              this.set$currentMove(null);
              return;
            }
          }
        } else {
          $.index(this.get$currentMove().get$on(), 'end').dispatchAll$1(e);
          this.set$currentMove(null);
          return;
        }
      else {
        $.index(this.get$currentMove().get$on(), 'cancel').dispatchAll$1(e);
        this.set$currentMove(null);
        return;
      }
    }
    if (!$.boolConversionCheck(this.isPlayer)) {
      if (this.get$target() == null || !$.boolConversionCheck(this.get$target().get$alive())) {
        var possibleEnemies = $.listTypeCheck($.filter(this.combat.get$actors(), new $.Actor_update_anon(this)));
        if (!$.boolConversionCheck($.isEmpty(possibleEnemies)))
          this.set$target($.randomly(possibleEnemies));
        else {
          this.alive = false;
          return;
        }
      }
      if (this.get$target() == null || !$.boolConversionCheck($.some(this.moves, new $.Actor_update_anon0(this))))
        this.report$1('<subject> ' + $.S($.randomly(['just stands there', 'doesn\'t do anything', 'does nothing'])));
      else
        this.set$currentMove(this.chooseMove$0());
    }
  }
},
 getPossibleMoves$1: function(max) {
  var possibleMoves = $.ListImplementation_List$from($.filter(this.moves, new $.Actor_getPossibleMoves_anon(this)));
  if (possibleMoves.length < 2)
    return possibleMoves;
  $.sort(possibleMoves, new $.Actor_getPossibleMoves_anon0(this));
  var redundantMovesMap = $.callTypeCheck($.HashMapImplementation$('int', 'CombatMoveType'), 'is$Map');
  for (var i = 1; $.boolConversionCheck($.lt(i, possibleMoves.length)); i = $.intTypeCheck($.add(i, 1)))
    for (var j = 0; $.boolConversionCheck($.lt(j, i)); j = $.intTypeCheck($.add(j, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      var t1 = possibleMoves.length;
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      var t2 = possibleMoves[i].get$flags();
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      var t3 = $.countBits($.and(t2, possibleMoves[j].get$flags()));
      var t4 = possibleMoves.length;
      if (i >= t4)
        throw $.ioore(i);
      var t5 = possibleMoves[i].get$flags();
      if (j >= t4)
        throw $.ioore(j);
      var similarity = $.doubleTypeCheck($.div(t3, $.countBits($.or(t5, possibleMoves[j].get$flags()))));
      if ($.boolConversionCheck($.gt(similarity, 0.7))) {
        if (i >= possibleMoves.length)
          throw $.ioore(i);
        t1 = $.S(possibleMoves[i].get$string()) + ' is similar to ';
        if (j >= possibleMoves.length)
          throw $.ioore(j);
        $.print(t1 + $.S(possibleMoves[j].get$string()) + ': ' + $.S(similarity) + '.');
        if (i >= possibleMoves.length)
          throw $.ioore(i);
        redundantMovesMap.operator$indexSet$2(i, possibleMoves[i]);
        break;
      }
    }
  var finalMoves = $.ListImplementation_List(possibleMoves.length, 'CombatMoveType');
  $.setRuntimeTypeInfo(finalMoves, {'E': 'CombatMoveType'});
  t1 = possibleMoves.length;
  t2 = $.get$length(redundantMovesMap);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var redundantIndex = $.intTypeCheck(t1 - t2);
  for (var regularIndex = 0, i = 0; $.boolConversionCheck($.lt(i, possibleMoves.length)); i = $.intTypeCheck($.add(i, 1))) {
    t1 = !$.boolConversionCheck(redundantMovesMap.containsKey$1(i));
    t2 = possibleMoves.length;
    t3 = finalMoves.length;
    if (t1) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t1 = possibleMoves[i];
      if (regularIndex !== (regularIndex | 0))
        throw $.iae(regularIndex);
      if (regularIndex < 0 || regularIndex >= t3)
        throw $.ioore(regularIndex);
      finalMoves[regularIndex] = t1;
      regularIndex = $.intTypeCheck(regularIndex + 1);
    } else {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t1 = possibleMoves[i];
      if (redundantIndex !== (redundantIndex | 0))
        throw $.iae(redundantIndex);
      if (redundantIndex < 0 || redundantIndex >= t3)
        throw $.ioore(redundantIndex);
      finalMoves[redundantIndex] = t1;
      redundantIndex = $.intTypeCheck(redundantIndex + 1);
    }
  }
  return $.getRange(finalMoves, 0, $.min(finalMoves.length, max));
},
 getPossibleMoves$1$max: function(max) {
  return this.getPossibleMoves$1(max)
},
 chooseMove$1: function(max) {
  var possibleMoves = this.getPossibleMoves$1$max(max);
  $.listTypeCheck(possibleMoves);
  var random = $.Random_Random(null).nextDouble$0();
  $.doubleTypeCheck(random);
  var len = $.get$length(possibleMoves);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this.chooseMove$1$bailout(1, random, possibleMoves, len, 0);
  var allParts = $.toInt(len * (len + 1) / 2);
  $.intTypeCheck(allParts);
  if (allParts !== (allParts | 0))
    return this.chooseMove$1$bailout(2, random, possibleMoves, len, allParts);
  var part = $.doubleTypeCheck(0);
  for (var pos = 0; $.boolConversionCheck($.lt(pos, len)); pos = $.intTypeCheck($.add(pos, 1))) {
    if (typeof pos !== 'number')
      throw $.iae(pos);
    part = $.doubleTypeCheck($.add(part, len - pos));
    if ($.boolConversionCheck($.lt(random, $.div(part, allParts))))
      break;
  }
  return $.index(possibleMoves, pos);
},
 chooseMove$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      random = env0;
      possibleMoves = env1;
      len = env2;
      break;
    case 2:
      random = env0;
      possibleMoves = env1;
      len = env2;
      allParts = env3;
      break;
  }
  switch (state) {
    case 0:
      var possibleMoves = this.getPossibleMoves$1$max(max);
      $.listTypeCheck(possibleMoves);
      var random = $.Random_Random(null).nextDouble$0();
      $.doubleTypeCheck(random);
      var len = $.get$length(possibleMoves);
      $.intTypeCheck(len);
    case 1:
      state = 0;
      var allParts = $.toInt($.div($.mul(len, $.add(len, 1)), 2));
      $.intTypeCheck(allParts);
    case 2:
      state = 0;
      var part = $.doubleTypeCheck(0);
      for (var pos = 0; $.boolConversionCheck($.lt(pos, len)); pos = $.intTypeCheck($.add(pos, 1))) {
        part = $.doubleTypeCheck($.add(part, $.sub(len, pos)));
        if ($.boolConversionCheck($.lt(random, $.div(part, allParts))))
          break;
      }
      return $.index(possibleMoves, pos);
  }
},
 chooseMove$0: function() {
  return this.chooseMove$1(1000)
},
 Actor$0: function() {
  this.on = $.CombatCallbackHandler$(this);
  this.weapon = $.WeaponType$(null, 0, 0, 0);
  this.armors = $.propertyTypeCheck($.Set_Set('ArmorType'), 'is$Set');
  this.names = ['actor'];
  this.pronoun = $.CTC19;
  this._hitpoints = this.maxHitpoints;
  this._stance = this.maxStance;
  this.moves = $.propertyTypeCheck($.Set_Set(), 'is$Set');
  this.stanceUpStrings = $.CTC20;
  this.stanceDownStrings = $.CTC21;
  $.add$1($.index(this.on, 'almostDying'), $.Actor_defaultOnAlmostDying);
  $.add$1($.index(this.on, 'die'), $.Actor_defaultOnDie);
},
 is$Actor: true
};

$$.Player = {"":
 ["alive", "isPlayer", "team", "_hitpoints", "_stance", "stanceUpStrings", "stanceDownStrings", "moves", "_currentMove", "previousMove", "weapon", "armors", "tillEndOfMove", "recoveringFromMove", "combat", "_target", "on", "maxHitpoints", "maxStance", "speed", "fighting", "names", "pronoun"],
 "super": "Actor",
 Player$0: function() {
  this.isPlayer = true;
  this.team = 1;
  this.names = ['player'];
  this.pronoun = $.CTC17;
}
};

$$.CombatMoveType = {"":
 ["string?", "choiceString?", "thirdPartyString?", "duration?", "recovery?", "damage?", "stanceDamage?", "baseChanceToDodge?", "baseChanceToBlock?", "fightingMod?", "flags?", "on?", "isApplicable", "canContinue", "chanceToDodge", "chanceToBlock", "computeSuitability", "names", "pronoun"],
 "super": "GameEntity",
 set$isApplicable: function(v) { this.isApplicable = $.functionTypeCheck(v); },
 set$canContinue: function(v) { this.canContinue = $.functionTypeCheck(v); },
 set$computeSuitability: function(v) { this.computeSuitability = $.functionTypeCheck(v); },
 hasFlag$1: function(otherFlags) {
  $.intTypeCheck(otherFlags);
  var t1 = this.flags;
  if (typeof otherFlags !== 'number')
    throw $.iae(otherFlags);
  if (otherFlags !== (otherFlags | 0))
    return this.hasFlag$1$bailout(1, otherFlags, t1);
  return (t1 & otherFlags) >>> 0 !== 0;
},
 hasFlag$1$bailout: function(state, otherFlags, t1) {
  return (t1 & otherFlags) >>> 0 !== 0;
},
 get$isOffensive: function() {
  return this.hasFlag$1(524288);
},
 get$isHitpointsDamaging: function() {
  return this.hasFlag$1(32768);
},
 isApplicable$2: function(arg0, arg1) { return this.isApplicable.call$2(arg0, arg1); },
 canContinue$2: function(arg0, arg1) { return this.canContinue.call$2(arg0, arg1); },
 chanceToDodge$2: function(arg0, arg1) { return this.chanceToDodge.call$2(arg0, arg1); },
 chanceToDodge$2: function(arg0, arg1) { return this.chanceToDodge.call$2(arg0, arg1); },
 chanceToBlock$2: function(arg0, arg1) { return this.chanceToBlock.call$2(arg0, arg1); },
 chanceToBlock$2: function(arg0, arg1) { return this.chanceToBlock.call$2(arg0, arg1); },
 computeSuitability$2: function(arg0, arg1) { return this.computeSuitability.call$2(arg0, arg1); },
 computeChanceToHit$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  var chanceToDodge = $.doubleTypeCheck(this.chanceToDodge$2(performer, target));
  var chanceToBlock = $.doubleTypeCheck(this.chanceToBlock$2(performer, target));
  if (typeof chanceToDodge !== 'number')
    throw $.iae(chanceToDodge);
  var t1 = 1 - chanceToDodge;
  if (typeof chanceToBlock !== 'number')
    throw $.iae(chanceToBlock);
  return t1 * (1 - chanceToBlock);
},
 initDefaultFunctions$0: function() {
  this.on = $.CombatCallbackHandler$(this);
  this.isApplicable = $.functionTypeCheck(new $.CombatMoveType_initDefaultFunctions_anon(this));
  this.canContinue = $.functionTypeCheck(new $.CombatMoveType_initDefaultFunctions_anon0(this));
  this.chanceToDodge = $.functionTypeCheck(new $.CombatMoveType_initDefaultFunctions_anon1(this));
  this.chanceToBlock = $.functionTypeCheck(new $.CombatMoveType_initDefaultFunctions_anon2(this));
  this.computeSuitability = $.functionTypeCheck(new $.CombatMoveType_initDefaultFunctions_anon3(this));
  $.add$1($.index(this.on, 'start'), $.CombatMoveType_defaultOnStart);
  $.add$1($.index(this.on, 'hit'), $.CombatMoveType_defaultOnHit);
  $.add$1($.index(this.on, 'sufferDeflect'), $.CombatMoveType_defaultOnSufferDeflect);
  $.add$1($.index(this.on, 'sufferBlock'), $.CombatMoveType_defaultOnSufferBlock);
  $.add$1($.index(this.on, 'sufferMeetWeapon'), $.CombatMoveType_defaultOnSufferMeetWeapon);
  $.add$1($.index(this.on, 'sufferDodge'), $.CombatMoveType_defaultOnSufferDodge);
  $.add$1($.index(this.on, 'cancel'), $.CombatMoveType_defaultOnCancel);
},
 CombatMoveType$11: function(string, choiceString, thirdPartyString, flags, duration, recovery, damage, stanceDamage, baseChanceToBlock, baseChanceToDodge, fightingMod) {
  this.initDefaultFunctions$0();
},
 is$CombatMoveType: true
};

$$.CurrentCombatMove = {"":
 ["type?", "performer?", "target?", "on?", "names", "pronoun"],
 "super": "GameEntity",
 set$target: function(v) { this.target = $.propertyTypeCheck(v, 'is$Actor'); },
 CurrentCombatMove$3: function(type, performer, target) {
  this.on = $.CombatCallbackHandler$(this);
},
 is$CurrentCombatMove: true
};

$$.WeaponType = {"":
 ["piercing?", "hardness?", "blockingMod", "weaponWhenPierced?", "moves?", "specialMoves", "on?", "names", "pronoun"],
 "super": "GameEntity",
 get$barehanded: function() {
  return this.hardness === 0;
},
 get$blunt: function() {
  var t1 = this.hardness;
  return t1 > 0 && t1 < 3;
},
 get$sharp: function() {
  return this.hardness >= 3;
},
 WeaponType$4: function(name$, piercing, hardness, blockingMod) {
  $.stringTypeCheck(name$);
  this.names = !(name$ == null) ? [name$] : ['weapon'];
  this.on = $.CombatCallbackHandler$(this);
  $.add$1($.index(this.on, 'sufferPierced'), $.WeaponType_defaultOnSufferPierced);
},
 is$WeaponType: true
};

$$.ArmorType = {"":
 ["hardness?", "dodgingMod?", "coveringTargets?", "coveringSides?", "coveringEffects?", "on?", "names", "pronoun"],
 "super": "GameEntity",
 ArmorType$6: function(name$, hardness, dodgingMod, coveringTargets, coveringSides, coveringEffects) {
  $.stringTypeCheck(name$);
  this.names = !(name$ == null) ? [name$] : ['armor'];
  this.on = $.CombatCallbackHandler$(this);
},
 is$ArmorType: true
};

$$.CombatEvent = {"":
 ["performer?", "target?", "move", "weapon?", "armor?", "combat?", "_chance", "_chanceAll", "luckUsed", "stopPropagation?"],
 "super": "Object",
 set$target: function(v) { this.target = $.propertyTypeCheck(v, 'is$Actor'); },
 set$weapon: function(v) { this.weapon = $.propertyTypeCheck(v, 'is$WeaponType'); },
 set$armor: function(v) { this.armor = $.propertyTypeCheck(v, 'is$ArmorType'); },
 set$combat: function(v) { this.combat = $.propertyTypeCheck(v, 'is$Combat'); },
 get$chance: function() {
  return this._chance;
},
 set$chance: function(value) {
  this._chance = $.doubleTypeCheck(value);
},
 get$chanceAll: function() {
  return this._chanceAll;
},
 set$chanceAll: function(value) {
  this._chanceAll = $.doubleTypeCheck(value);
},
 CombatEvent$fromMove$1: function(currentMove) {
  $.propertyTypeCheck(currentMove, 'is$CurrentCombatMove');
  this.performer = $.propertyTypeCheck(currentMove.get$performer(), 'is$Actor');
  this.target = $.propertyTypeCheck(currentMove.get$target(), 'is$Actor');
  this.move = $.propertyTypeCheck(currentMove.get$type(), 'is$CombatMoveType');
  this.weapon = $.propertyTypeCheck(this.performer.get$weapon(), 'is$WeaponType');
  $.assert($.eq(this.performer.get$combat(), this.target.get$combat()));
  this.combat = $.propertyTypeCheck(this.performer.get$combat(), 'is$Combat');
},
 is$CombatEvent: true
};

$$.CombatCallback = {"":
 ["functions", "_this", "_key"],
 "super": "Object",
 add$1: function(f) {
  $.functionTypeCheck(f);
  $.add$1(this.functions, f);
},
 addFirst$1: function(f) {
  $.functionTypeCheck(f);
  this.functions.addFirst$1(f);
},
 addLast$1: function(f) {
  $.functionTypeCheck(f);
  $.addLast(this.functions, f);
},
 clear$0: function() {
  $.clear(this.functions);
},
 replaceAllWith$1: function(f) {
  $.functionTypeCheck(f);
  this.clear$0();
  this.add$1(f);
},
 get$last: function() {
  return $.last(this.functions);
},
 last$0: function() { return this.get$last().call$0(); },
 dispatchAll$1: function(e) {
  var t1 = this._this;
  if (typeof t1 === 'object' && t1 !== null && !!t1.is$CurrentCombatMove) {
    if (e == null)
      e = $.CombatEvent$fromMove(t1);
    $.index(t1.get$type().get$on(), this._key).dispatchAll$1(e);
  }
  for (var t2 = $.iterator(this.functions), t3 = e == null; $.boolConversionCheck(t2.hasNext$0());) {
    var t4 = t2.next$0();
    if (t3)
      t4.call$1(t1);
    else {
      t4.call$2(t1, e);
      if ($.boolConversionCheck(e.get$stopPropagation()))
        break;
    }
  }
},
 dispatchAll$0: function() {
  return this.dispatchAll$1(null)
},
 CombatCallback$2: function(_this, _key) {
  this.functions = $.propertyTypeCheck($.Queue_Queue('Function'), 'is$Queue');
},
 is$CombatCallback: true
};

$$.CombatCallbackHandler = {"":
 ["_this", "_callbacks"],
 "super": "Object",
 operator$index$1: function(key) {
  $.stringTypeCheck(key);
  var t1 = $.boolConversionCheck(this._callbacks.containsKey$1(key));
  var t2 = this._callbacks;
  if (t1)
    return t2.operator$index$1(key);
  else {
    t2.operator$indexSet$2(key, $.CombatCallback$(this._this, key));
    return this._callbacks.operator$index$1(key);
  }
},
 operator$indexSet$2: function(key, value) {
  $.stringTypeCheck(key);
  $.propertyTypeCheck(value, 'is$CombatCallback');
  this._callbacks.operator$indexSet$2(key, value);
},
 CombatCallbackHandler$1: function(_this) {
  this._callbacks = $.callTypeCheck($.HashMapImplementation$('String', 'CombatCallback'), 'is$Map');
},
 is$CombatCallbackHandler: true
};

$$.Combat = {"":
 ["storyline?", "_started", "finished?", "interactionNeeded", "on?", "_prevTime", "time?", "actors?", "_player?", "playerChoices?", "names", "pronoun"],
 "super": "GameEntity",
 set$time: function(v) { this.time = $.intTypeCheck(v); },
 set$_player: function(v) { this._player = $.propertyTypeCheck(v, 'is$Actor'); },
 set$playerChoices: function(v) { this.playerChoices = $.listTypeCheck(v); },
 start$0: function() {
  $.forEach(this.actors, new $.Combat_start_anon(this));
  this._started = true;
},
 update$0: function() {
  var t1 = this.time;
  if (typeof t1 !== 'number')
    return this.update$0$bailout(1, t1, 0);
  var t3 = this._prevTime;
  if (t3 !== (t3 | 0))
    return this.update$0$bailout(2, t1, t3);
  var timePassed = t1 > t3;
  this._prevTime = $.intTypeCheck(t1);
  if (timePassed) {
    $.index(this.on, 'update').dispatchAll$0();
    $.forEach(this.actors, new $.Combat_update_anon());
    t1 = $.some(this.actors, new $.Combat_update_anon0(this));
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.update$0$bailout(3, t1, 0);
    if (!t1) {
      this.finished = true;
      return;
    }
  }
  t1 = this._player;
  if (!(t1 == null))
    if ($.boolConversionCheck(t1.get$alive())) {
      var t2 = t1.get$tillEndOfMove();
      if (typeof t2 !== 'number')
        return this.update$0$bailout(4, t2, 0);
      t2 = t2 <= 0;
    } else
      t2 = false;
  else
    t2 = false;
  if ($.boolConversionCheck(t2)) {
    if (t1.get$target() == null) {
      var possibleEnemies = $.filter(this.actors, new $.Combat_update_anon1(this));
      $.listTypeCheck(possibleEnemies);
      if (typeof possibleEnemies !== 'object' || possibleEnemies === null || possibleEnemies.constructor !== Array && !possibleEnemies.is$JavaScriptIndexingBehavior())
        return this.update$0$bailout(5, possibleEnemies, 0);
      t1 = possibleEnemies.length;
      if (t1 === 1) {
        if (0 >= t1)
          throw $.ioore(0);
        t2 = possibleEnemies[0];
        this._player.set$target(t2);
      } else
        $.forEach(possibleEnemies, new $.Combat_update_anon2(this));
    } else {
      var possibleMoves = this._player.getPossibleMoves$1$max(50);
      $.listTypeCheck(possibleMoves);
      t1 = $.isEmpty(possibleMoves);
      $.boolConversionCheck(t1);
      if (typeof t1 !== 'boolean')
        return this.update$0$bailout(6, possibleMoves, t1);
      if (!t1)
        $.forEach(possibleMoves, new $.Combat_update_anon3(this));
      if ($.boolConversionCheck($.some(this.actors, new $.Combat_update_anon4(this))))
        $.add$1(this.playerChoices, $.Choice$('Target another enemy.', null, true, new $.Combat_update_anon5(this)));
    }
    t1 = $.isEmpty(this.playerChoices);
    $.boolConversionCheck(t1);
    if (typeof t1 !== 'boolean')
      return this.update$0$bailout(7, t1, 0);
    if (!t1)
      this.interactionNeeded = true;
  }
  t1 = this.time;
  if (typeof t1 !== 'number')
    return this.update$0$bailout(8, t1, 0);
  this.time = $.intTypeCheck(t1 + 1);
},
 update$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
    case 3:
      t1 = env0;
      break;
    case 4:
      t1 = env0;
      break;
    case 5:
      possibleEnemies = env0;
      break;
    case 6:
      possibleMoves = env0;
      t1 = env1;
      break;
    case 7:
      t1 = env0;
      break;
    case 8:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.time;
    case 1:
      state = 0;
      var t3 = this._prevTime;
    case 2:
      state = 0;
      var timePassed = $.boolTypeCheck($.gt(t1, t3));
      this._prevTime = $.intTypeCheck(this.time);
    case 3:
      if (state === 3 || state === 0 && timePassed)
        switch (state) {
          case 0:
            $.index(this.on, 'update').dispatchAll$0();
            $.forEach(this.actors, new $.Combat_update_anon());
            t1 = $.some(this.actors, new $.Combat_update_anon0(this));
            $.boolConversionCheck(t1);
          case 3:
            state = 0;
            if (!t1) {
              this.finished = true;
              return;
            }
        }
      t1 = this._player;
    case 4:
      if (state === 4 || state === 0 && !(t1 == null))
        switch (state) {
          case 0:
          case 4:
            if (state === 4 || state === 0 && $.boolConversionCheck(t1.get$alive()))
              switch (state) {
                case 0:
                  t1 = t1.get$tillEndOfMove();
                case 4:
                  state = 0;
                  t1 = $.boolConversionCheck($.le(t1, 0));
              }
            else
              t1 = false;
            $.boolConversionCheck(t1);
        }
      else
        t1 = false;
    default:
      if (state === 7 || state === 6 || state === 5 || state === 0 && $.boolConversionCheck(t1))
        switch (state) {
          case 0:
          default:
            if (state === 5 || state === 0 && this._player.get$target() == null)
              switch (state) {
                case 0:
                  var possibleEnemies = $.filter(this.actors, new $.Combat_update_anon1(this));
                  $.listTypeCheck(possibleEnemies);
                case 5:
                  state = 0;
                  if ($.boolConversionCheck($.eq($.get$length(possibleEnemies), 1))) {
                    t1 = $.index(possibleEnemies, 0);
                    this._player.set$target(t1);
                  } else
                    $.forEach(possibleEnemies, new $.Combat_update_anon2(this));
              }
            else
              switch (state) {
                case 0:
                  var possibleMoves = this._player.getPossibleMoves$1$max(50);
                  $.listTypeCheck(possibleMoves);
                  t1 = $.isEmpty(possibleMoves);
                  $.boolConversionCheck(t1);
                case 6:
                  state = 0;
                  if (!t1)
                    $.forEach(possibleMoves, new $.Combat_update_anon3(this));
                  if ($.boolConversionCheck($.some(this.actors, new $.Combat_update_anon4(this))))
                    $.add$1(this.playerChoices, $.Choice$('Target another enemy.', null, true, new $.Combat_update_anon5(this)));
              }
            t1 = $.isEmpty(this.playerChoices);
            $.boolConversionCheck(t1);
          case 7:
            state = 0;
            if (!t1)
              this.interactionNeeded = true;
        }
      t1 = this.time;
    case 8:
      state = 0;
      this.time = $.intTypeCheck($.add(t1, 1));
  }
},
 updateUntilInteraction$0: function() {
  while (true) {
    if (!(!this.finished && !this.interactionNeeded))
      break;
    this.update$0();
  }
  this.interactionNeeded = false;
},
 Combat$0: function() {
  this.storyline = $.Storyline$();
  this.actors = $.ListImplementation_List(null);
  this.playerChoices = $.ListImplementation_List(null);
  this.on = $.CombatCallbackHandler$(this);
},
 is$Combat: true,
 is$LoopedEvent: true
};

$$.ScripterImpl = {"":
 ["_interfacePort", "pages", "pageHandles", "blocks", "currentPageIndex", "currentPageName", "currentBlock", "nextPageIndex", "repeatBlockBit", "nextScriptStack", "choices", "vars", "textBuffer"],
 "super": "Scripter",
 start$1: function(event$) {
  $.propertyTypeCheck(event$, 'is$LoopedEvent');
  this.vars.operator$indexSet$2('_curLoopedEvent', event$);
  var t1 = this.vars;
  var t2 = $.ListImplementation_List(null, 'Choice');
  $.setRuntimeTypeInfo(t2, {'E': 'Choice'});
  t1.operator$indexSet$2('_curLoopedEventChoices', t2);
  event$.set$playerChoices(this.vars.operator$index$1('_curLoopedEventChoices'));
  event$.start$0();
  this.updateLoopedEvent$0();
},
 updateLoopedEvent$0: function() {
  var event$ = $.propertyTypeCheck(this.vars.operator$index$1('_curLoopedEvent'), 'is$LoopedEvent');
  if ($.boolConversionCheck(event$.get$finished()))
    return;
  $.clear(event$.get$playerChoices());
  event$.updateUntilInteraction$0();
  this.echo$1($.toString(event$.get$storyline()));
  $.clear(event$.get$storyline());
  $.addAll(this.choices, event$.get$playerChoices());
  this.nextScript$1(this.get$updateLoopedEvent());
},
 get$updateLoopedEvent: function() { return new $.BoundClosure1(this, 'updateLoopedEvent$0'); },
 initBlock$0: function() {
  this.set$v_moveStomachPunch($.CombatMoveType$('hit to the stomach', 'hit <object> to the stomach', '<subject> {hit<s>|punch<es>} <object> to the stomach', 821392, 4, 1, 1, 2, 0.3, 0.1, 0));
  var t1 = new $.ScripterImpl_initBlock_anon();
  this.get$v_moveStomachPunch().set$canContinue(t1);
  this.get$v_moveStomachPunch().set$isApplicable(t1);
  this.set$v_moveRightHook($.CombatMoveType$('right hook', 'punch <object> in the head with <subject\'s> right hook', '<subject> {hit<s>|punch<es>} <object> in the {face|head} with <subject\'s> right hook', 822274, 6, 1, 2, 8, 0.4, 0.4, -1));
  t1 = new $.ScripterImpl_initBlock_anon0();
  this.get$v_moveRightHook().set$canContinue(t1);
  this.get$v_moveRightHook().set$isApplicable(t1);
  $.index(this.get$v_moveRightHook().get$on(), 'hit').addFirst$1(new $.ScripterImpl_initBlock_anon1());
  this.set$v_moveJab($.CombatMoveType$('jab at face', 'quickly jab at <object\'s> face', '<subject> {{lightly|quickly} jab<s>|throw<s> a {light|quick} jab} at <object\'s> {face|head}', 723088, 2, 1, 0, 3, 0.3, 0.1, 0));
  t1 = new $.ScripterImpl_initBlock_anon2();
  this.get$v_moveJab().set$canContinue(t1);
  this.get$v_moveJab().set$isApplicable(t1);
  this.set$v_moveGroinPunch($.CombatMoveType$('hit to the groin', 'punch <object> {in the groin|between the legs|into the genitals}', '<subject> {hit<s>|punch<es>} <object> {in the groin|between the legs|into the genitals}', 821408, 4, 2, 5, 5, 0.7, 0.4, 0));
  t1 = new $.ScripterImpl_initBlock_anon3();
  this.get$v_moveGroinPunch().set$canContinue(t1);
  this.get$v_moveGroinPunch().set$isApplicable(t1);
  this.set$v_moveKickLegs($.CombatMoveType$('kick to the legs', 'kick <object\'s> legs', '<subject> kick<s> <object\'s> legs', 857152, 6, 2, 0, 15, 0.2, 0.2, -1));
  t1 = new $.ScripterImpl_initBlock_anon4();
  this.get$v_moveKickLegs().set$canContinue(t1);
  this.get$v_moveKickLegs().set$isApplicable(t1);
  this.set$v_moveFootSweep($.CombatMoveType$('foot sweep', 'sweep <object\'s> feet', '<subject> {undercut<s>|sweep<s>} <object\'s> legs', 857152, 6, 4, 0, 31, 0.2, 0.4, -1));
  $.add$1($.index(this.get$v_moveFootSweep().get$on(), 'hit'), new $.ScripterImpl_initBlock_anon5());
  t1 = new $.ScripterImpl_initBlock_anon6();
  this.get$v_moveFootSweep().set$canContinue(t1);
  this.get$v_moveFootSweep().set$isApplicable(t1);
  this.set$v_moveKickOnGround($.CombatMoveType$('kick', 'kick <object> while on the ground', '<subject> kick<s> <object> {|while }on the ground', 823440, 4, 3, 3, 10, 0.4, 0.2, 0));
  t1 = new $.ScripterImpl_initBlock_anon7();
  this.get$v_moveKickOnGround().set$canContinue(t1);
  this.get$v_moveKickOnGround().set$isApplicable(t1);
  this.set$v_moveStepBack($.CombatMoveType$('step back', 'focus on defense', '<subject> {{withdraw<s>|back<s> away} {a little|a bit|a little bit}|give<s> a {|little} bit of ground}', 1054720, 5, 0, 0, 0, 1, 1, 1));
  t1 = new $.ScripterImpl_initBlock_anon8();
  this.get$v_moveStepBack().set$canContinue(t1);
  this.get$v_moveStepBack().set$isApplicable(t1);
  $.index(this.get$v_moveStepBack().get$on(), 'start').replaceAllWith$1(new $.ScripterImpl_initBlock_anon9());
  $.index(this.get$v_moveStepBack().get$on(), 'end').replaceAllWith$1(new $.ScripterImpl_initBlock_anon10());
  this.set$v_moveBasicParryHand($.CombatMoveType$('parry', 'parry <object\'s> move', '<subject> {gather<s>|brace<s>} to parry <object\'s> {attack|move}', 1050624, 3, 1, 0, 0, 1, 1, 1));
  t1 = new $.ScripterImpl_initBlock_anon11();
  this.get$v_moveBasicParryHand().set$isApplicable(t1);
  t1 = new $.ScripterImpl_initBlock_anon12();
  this.get$v_moveBasicParryHand().set$canContinue(t1);
  $.add$1($.index(this.get$v_moveBasicParryHand().get$on(), 'end'), new $.ScripterImpl_initBlock_anon13());
  t1 = new $.ScripterImpl_initBlock_anon14();
  this.get$v_moveBasicParryHand().set$computeSuitability(t1);
  this.set$v_moveStandUp($.CombatMoveType$('stand up', 'stand up', '<subject> {stand<s> up|{rise<s>|get<s>} to <subject\'s> feet|get<s> up}', 1052672, 8, 0, 0, 0, 1, 1, -1));
  t1 = new $.ScripterImpl_initBlock_anon15();
  this.get$v_moveStandUp().set$isApplicable(t1);
  $.add$1($.index(this.get$v_moveStandUp().get$on(), 'update'), new $.ScripterImpl_initBlock_anon16());
  $.index(this.get$v_moveStandUp().get$on(), 'start').replaceAllWith$1(new $.ScripterImpl_initBlock_anon17());
  $.index(this.get$v_moveStandUp().get$on(), 'end').replaceAllWith$1(new $.ScripterImpl_initBlock_anon18());
  t1 = new $.ScripterImpl_initBlock_anon19();
  this.get$v_moveStandUp().set$computeSuitability(t1);
  this.set$v_moveRollOut($.CombatMoveType$('roll', 'roll out of the way', '<subject> roll<s> {out|away} of <object\'s> {way|reach}', 1048576, 3, 1, 0, 0, 1, 1, -1));
  t1 = new $.ScripterImpl_initBlock_anon20();
  this.get$v_moveRollOut().set$isApplicable(t1);
  $.index(this.get$v_moveRollOut().get$on(), 'end').replaceAllWith$1(new $.ScripterImpl_initBlock_anon21());
  t1 = new $.ScripterImpl_initBlock_anon22();
  this.get$v_moveRollOut().set$computeSuitability(t1);
  this.set$v_moveSlash($.CombatMoveType$('slash', 'slash <object\'s> body', '<subject> slash<es> <object\'s> body', 822288, 5, 3, 10, 5, 0.7, 0.4, -1));
  this.set$v_humanMoves([this.get$v_moveStomachPunch(), this.get$v_moveRightHook(), this.get$v_moveJab(), this.get$v_moveKickLegs(), this.get$v_moveFootSweep(), this.get$v_moveKickOnGround(), this.get$v_moveStepBack(), this.get$v_moveStandUp(), this.get$v_moveBasicParryHand(), this.get$v_moveGroinPunch(), this.get$v_moveRollOut()]);
  this.set$v_weaponHands($.WeaponType$('hand', 0, 0, 0));
  this.set$v_weaponSword($.WeaponType$('sword', 3, 3, 0));
  this.set$v_armorClothes($.ArmorType$('clothes', 0, 0, 126, 1920, 98304));
  this.set$v_armorHelmet($.ArmorType$('helmet', 1, 0, 2, 1920, 98304));
  this.set$v_player($.Player$());
  $.addAll(this.get$v_player().get$moves(), this.get$v_humanMoves());
  t1 = this.get$v_weaponHands();
  this.get$v_player().set$weapon(t1);
  this.get$v_player().set$fighting(1);
},
 ScripterImpl$0: function() {
  this.pageHandles = $.callTypeCheck($.makeLiteralMap(['runTests', 2, 'interactiveTest', 1, 'autoFight', 3, 'playable', 4, 'welcome', 0, 'die', 5]), 'is$Map');
  this.pages = [['# Thin Ice System (TIS) Testing ', 'Note this is still very experimental, especially outside the command line interface. But it should work. ', $.makeLiteralMap(['string', 'Play ', 'goto', 'interactiveTest']), $.makeLiteralMap(['string', 'Run automatic fight ', 'goto', 'autoFight']), $.makeLiteralMap(['string', 'Run tests ', 'goto', 'runTests'])], ['You encounter a worthy opponent: a drunk man wearing a helmet! ', new $.anon(this), 'He charges at you! ', new $.anon0(this), 'And that\'s the end of the fight! '], ['Running tests & asserts. ', 'Assert util functions. ', new $.anon1(), 'Assert Storyline string functions. ', new $.anon2(this)], ['Asserting that more actors of the same type can take out less actors, most of the time. ', new $.anon3(this)], [new $.anon4(this), new $.anon5(this), 'Congratulations! You beat your first enemies! '], ['You died like the bitch you are. ']];
}
};

$$.Message0 = {"":
 ["type?", "listContent?", "strContent", "intContent?"],
 "super": "Object",
 toJson$0: function() {
  var data = $.callTypeCheck($.HashMapImplementation$('String', 'Dynamic_'), 'is$Map');
  data.operator$indexSet$2('type', this.type);
  if ($.boolConversionCheck($.eq(this.type, 128)))
    data.operator$indexSet$2('intContent', this.intContent);
  else if ($.boolConversionCheck($.eq(this.type, 64)))
    data.operator$indexSet$2('listContent', this.listContent);
  else if ($.boolConversionCheck($.eq(this.type, 4)))
    data.operator$indexSet$2('strContent', this.strContent);
  return $.JSON_stringify(data);
},
 Message$ShowChoices$3: function(choices, prependText, endOfPage) {
  $.listTypeCheck(choices);
  $.stringTypeCheck(prependText);
  var choicesToSend = !$.boolTypeCheck(endOfPage) ? $.listTypeCheck($.filter(choices, new $.anon10())) : $.listTypeCheck($.filter(choices, new $.anon11()));
  $.DEBUG_SCR('Sending choices.');
  var t1 = $.ListImplementation_List(null, 'Dynamic_');
  $.setRuntimeTypeInfo(t1, {'E': 'Dynamic_'});
  this.listContent = t1;
  $.add$1(this.listContent, prependText);
  $.forEach(choicesToSend, new $.anon12(this));
},
 Message$TextResult$1: function(str) {
  this.strContent = $.stringTypeCheck(str);
},
 Message$fromJson$1: function(json) {
  var data = $.callTypeCheck($.JSON_parse($.stringTypeCheck(json)), 'is$Map');
  this.type = $.intTypeCheck(data.operator$index$1('type'));
  if ($.boolConversionCheck($.eq(this.type, 128)))
    this.intContent = $.intTypeCheck(data.operator$index$1('intContent'));
  else if ($.boolConversionCheck($.eq(this.type, 64)))
    this.listContent = $.listTypeCheck(data.operator$index$1('listContent'));
  else if ($.boolConversionCheck($.eq(this.type, 4)))
    this.strContent = $.stringTypeCheck(data.operator$index$1('strContent'));
},
 is$Message0: true
};

$$.UserInteraction = {"":
 ["shown?", "waitForEndOfPage?"],
 "super": "Object",
 set$shown: function(v) { this.shown = $.boolTypeCheck(v); },
 hashCode$0: function() {
  return this.hash;
},
 UserInteraction$0: function() {
  this.hash = $.intTypeCheck($.Random_Random(null).nextInt$1(30000));
}
};

$$.Choice = {"":
 ["string?", "f?", "$goto?", "showNow", "shown", "waitForEndOfPage", "hash"],
 "super": "UserInteraction",
 goto$1: function(arg0) { return this.$goto.call$1(arg0); },
 then$1: function(_f) {
  this.f = $.functionTypeCheck(_f);
  return this;
},
 Choice$fromMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  this.string = $.stringTypeCheck(map.operator$index$1('string'));
  this.$goto = $.stringTypeCheck(map.operator$index$1('goto'));
  if ($.boolConversionCheck(map.containsKey$1('showNow')))
    this.showNow = $.boolTypeCheck(map.operator$index$1('showNow'));
  this.f = $.functionTypeCheck(map.operator$index$1('then'));
},
 Choice$4$goto$$showNow$then: function(string, goto$, showNow, then) {
  $.boolTypeCheck(showNow);
  this.f = $.functionTypeCheck(then);
  this.waitForEndOfPage = !showNow;
},
 is$Choice: true
};

$$.Scripter = {"":
 ["pageHandles?", "nextPageIndex"],
 "super": "Object",
 set$nextPageIndex: function(v) { this.nextPageIndex = $.intTypeCheck(v); },
 callback$2: function(messageJson, replyTo) {
  $.stringTypeCheck(messageJson);
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  var message = $.Message$fromJson(messageJson);
  'Received message from interface: ' + $.S(message.type) + '.';
  this._interfacePort = replyTo;
  if ($.boolConversionCheck($.eq(message.type, 0)))
    $.port().close$0();
  else {
    var t1 = this.pages;
    if (!(t1 == null)) {
      var t2 = this.currentPageIndex;
      t1 = $.boolConversionCheck(!(t2 == null) && $.boolConversionCheck($.ge(t2, $.get$length(t1))));
    } else
      t1 = true;
    $.boolConversionCheck(t1);
    t2 = this._interfacePort;
    if (t1)
      t2.send$2($.Message$EndOfBook().toJson$0(), $.port().toSendPort$0());
    else
      t2.send$2(this.goOneStep$1(message).toJson$0(), $.port().toSendPort$0());
  }
},
 get$callback: function() { return new $.BoundClosure(this, 'callback$2'); },
 goOneStep$1: function(incomingMessage) {
  var t1 = {};
  if ($.boolConversionCheck($.eq(incomingMessage.type, 16))) {
    this.currentPageIndex = 0;
    this.currentBlock = null;
    $.clear(this.nextScriptStack);
    this.initScriptEnvironment$0();
  }
  if ($.boolConversionCheck($.eq(incomingMessage.type, 128))) {
    t1.message_1 = null;
    $.forEach(this.choices, new $.Scripter_goOneStep_anon(this, t1, incomingMessage));
    t1 = t1.message_1;
    if (!(t1 == null))
      return t1;
    else
      return $.Message$NoResult();
  }
  if (!$.boolConversionCheck($.isEmpty(this.nextScriptStack)))
    return this.runScriptBlock$1$script($.functionTypeCheck($.removeLast(this.nextScriptStack)));
  t1 = this.nextPageIndex;
  if (!(t1 == null)) {
    this.currentPageIndex = $.intTypeCheck(t1);
    this.currentBlock = null;
    this.nextPageIndex = null;
    $.clear(this.choices);
  }
  t1 = this.currentBlock;
  if (t1 == null)
    this.currentBlock = 0;
  else if (this.repeatBlockBit)
    this.repeatBlockBit = false;
  else
    this.currentBlock = $.intTypeCheck($.add(t1, 1));
  'currentPageIndex = ' + $.S(this.currentPageIndex) + ', currentBlock = ' + $.S(this.currentBlock);
  this.blocks = $.listTypeCheck($.index(this.pages, this.currentPageIndex));
  if ($.boolConversionCheck($.ge(this.currentBlock, $.get$length(this.blocks))))
    if ($.boolConversionCheck($.some(this.choices, new $.Scripter_goOneStep_anon0())))
      return $.Message$ShowChoices(this.choices, '', true);
    else
      return $.Message$EndOfBook();
  else {
    t1 = $.index(this.blocks, this.currentBlock);
    if (typeof t1 === 'string')
      return $.Message$TextResult($.index(this.blocks, this.currentBlock));
    else {
      t1 = $.index(this.blocks, this.currentBlock);
      if (typeof t1 === 'object' && t1 !== null && t1.is$Map()) {
        $.add$1(this.choices, $.Choice$fromMap($.index(this.blocks, this.currentBlock)));
        return $.Message$NoResult();
      } else {
        t1 = $.index(this.blocks, this.currentBlock);
        if (typeof t1 === 'function' || typeof t1 === 'object' && t1 !== null && !!t1.is$Function)
          return this.runScriptBlock$1($.index(this.blocks, this.currentBlock));
      }
    }
  }
},
 initScriptEnvironment$0: function() {
  var t1 = $.ListImplementation_List(null, 'Choice');
  $.setRuntimeTypeInfo(t1, {'E': 'Choice'});
  this.choices = t1;
  this.vars = $.callTypeCheck($.HashMapImplementation$('String', 'Dynamic_'), 'is$Map');
  this.initBlock$0();
},
 noSuchMethod$2: function(name$, args) {
  $.stringTypeCheck(name$);
  $.listTypeCheck(args);
  if ($.boolConversionCheck($.boolConversionCheck($.startsWith(name$, 'get:')) || $.boolConversionCheck($.startsWith(name$, 'get '))))
    return this.vars.operator$index$1($.substring$1(name$, 4));
  else if ($.boolConversionCheck($.boolConversionCheck($.startsWith(name$, 'set:')) || $.boolConversionCheck($.startsWith(name$, 'set ')))) {
    this.vars.operator$indexSet$2($.substring$1(name$, 4), $.index(args, 0));
    return;
  } else
    throw $.$$throw($.NoSuchMethodError$(this, name$, args, null));
},
 echo$1: function(str) {
  $.stringTypeCheck(str);
  if ($.boolConversionCheck($.gt($.get$length(this.textBuffer), 0)))
    $.add$1(this.textBuffer, ' ');
  $.add$1(this.textBuffer, str);
},
 goto$1: function(pageHandle) {
  $.stringTypeCheck(pageHandle);
  this.nextPageIndex = $.intTypeCheck($.index(this.pageHandles, pageHandle));
},
 get$$goto: function() { return new $.BoundClosure0(this, 'goto$1'); },
 nextScript$1: function(f) {
  $.functionTypeCheck(f);
  $.add$1(this.nextScriptStack, f);
},
 runScriptBlock$1: function(script) {
  $.functionTypeCheck(script);
  this.textBuffer = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
  this.choices = $.listTypeCheck($.filter(this.choices, new $.Scripter_runScriptBlock_anon()));
  if (script == null)
    $.index(this.blocks, this.currentBlock).call$0();
  else
    script.call$0();
  if ($.boolConversionCheck($.some(this.choices, new $.Scripter_runScriptBlock_anon0())))
    return $.Message$ShowChoices(this.choices, $.toString(this.textBuffer), false);
  return $.Message$TextResult($.toString(this.textBuffer));
},
 runScriptBlock$1$script: function(script) {
  return this.runScriptBlock$1(script)
},
 Scripter$0: function() {
  $.DEBUG_SCR('Scripter has been created.');
  var t1 = $.ListImplementation_List(null, 'Function');
  $.setRuntimeTypeInfo(t1, {'E': 'Function'});
  this.nextScriptStack = t1;
  this.initScriptEnvironment$0();
  $.port().receive$1(this.get$callback());
}
};

$$._AbstractWorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._AudioContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._BatteryManagerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._BodyElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._DOMApplicationCacheEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._DedicatedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._FilteredElementList = {"":
 ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $._FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Element');
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength);
  var len = $.get$length(this);
  if ($.boolConversionCheck($.ge(newLength, len)))
    return;
  else if ($.boolConversionCheck($.lt(newLength, 0)))
    throw $.$$throw($.CTC26);
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure0(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach($.listSuperNativeTypeCheck(collection, 'is$Collection'), this.get$add());
},
 addLast$1: function(value) {
  this.add$1($.callTypeCheck(value, 'is$Element'));
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC25);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start);
  $.intTypeCheck(rangeLength);
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $._FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    result.remove$0();
  return result;
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.filter(this.get$_filtered(), f);
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  return $.some(this.get$_filtered(), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  $.intTypeCheck(rangeLength);
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Element');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $.lastIndexOf$2(this.get$_filtered(), element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return $.last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DocumentEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._ChildrenElementList = {"":
 ["_lib_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  var output = $.ListImplementation_List($.get$length(t1));
  var len = $.get$length(t1);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return this._toList$0$bailout(1, len, output, t1);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = t1.operator$index$1(i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state, len, output, t1) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = t1.operator$index$1(i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(this._childElements); $.boolConversionCheck(t1.hasNext$0());)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(f, output));
  return $._FrozenElementList$_wrap(output);
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0());)
    if ($.boolConversionCheck(f.call$1(t1.next$0())))
      return true;
  return false;
},
 isEmpty$0: function() {
  return this._lib_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return this._childElements.operator$index$1(index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_ElementImpl');
  this._lib_element.$dom_replaceChild$2(value, this._childElements.operator$index$1(index));
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength);
  throw $.$$throw($.CTC24);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_ElementImpl');
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1($.callTypeCheck(value, 'is$_ElementImpl'));
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._lib_element; $.boolConversionCheck(t1.hasNext$0());)
    t2.$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC25);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []));
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Element');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  this._lib_element.set$text('');
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._lib_element.$dom_removeChild$1(result);
  return result;
},
 last$0: function() {
  return this._lib_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementList = {"":
 ["_nodeList"],
 "super": "Object",
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0());)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  var out = [];
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2)))
      out.push(t2);
  }
  return out;
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0());)
    if ($.boolConversionCheck(f.call$1(t1.next$0())))
      return true;
  return false;
},
 isEmpty$0: function() {
  return $.isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC24);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength);
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC24);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC24);
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC24);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC24);
},
 getRange$2: function(start, rangeLength) {
  $.intTypeCheck(rangeLength);
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Element');
  return $.lastIndexOf$2(this._nodeList, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  throw $.$$throw($.CTC24);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC24);
},
 last$0: function() {
  return $.last(this._nodeList);
},
 is$_FrozenElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementListIterator = {"":
 ["_lib_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1 = this.hasNext$0();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC10);
  t1 = this._lib_list;
  var t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC10);
  t1 = this._lib_list;
  var t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 hasNext$0: function() {
  var t1 = this._index;
  var t2 = $.get$length(this._lib_list);
  if (typeof t2 !== 'number')
    return this.hasNext$0$bailout(1, t1, t2);
  return t1 < t2;
},
 hasNext$0$bailout: function(state, t1, t2) {
  return $.lt(t1, t2);
},
 is$Iterator: true
};

$$._ElementEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._EventSourceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._EventsImpl = {"":
 ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  $.stringTypeCheck(type);
  return $._EventListenerListImpl$(this._ptr, type);
}
};

$$._EventListenerListImpl = {"":
 ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._add$2($.functionTypeCheck(listener), useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._remove$2($.functionTypeCheck(listener), useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 _add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
},
 _remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
}
};

$$._FileReaderEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._FileWriterEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._FrameSetElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._HttpRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._HttpRequestUploadEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBDatabaseEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBOpenDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._IDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._IDBTransactionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._IDBVersionChangeRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._InputElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._JavaScriptAudioNodeEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._LocalWindowEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._MediaElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._MediaStreamEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MessagePortEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._ChildNodeListLazy = {"":
 ["_lib_this"],
 "super": "Object",
 last$0: function() {
  return this._lib_this.lastChild;
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._lib_this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._lib_this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._lib_this; $.boolConversionCheck(t1.hasNext$0());)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._lib_this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._lib_this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._lib_this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._lib_this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.UnsupportedOperationException$('Cannot sort immutable List.'));
},
 lastIndexOf$2: function(element, start) {
  return $._Lists_lastIndexOf(this, $.callTypeCheck(element, 'is$Node'), start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []));
},
 get$length: function() {
  return $.get$length(this._lib_this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return $.index(this._lib_this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ListWrapper = {"":
 [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  return $.forEach(this._lib_list, f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $.filter(this._lib_list, f);
},
 some$1: function(f) {
  $.functionTypeCheck(f);
  return $.some(this._lib_list, f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength);
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  return $.addAll(this._lib_list, collection);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  return $.sort(this._lib_list, compare);
},
 lastIndexOf$2: function(element, start) {
  return $.lastIndexOf$2(this._lib_list, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 last$0: function() {
  return $.last(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  $.intTypeCheck(rangeLength);
  return $.getRange(this._lib_list, start, rangeLength);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NodeListWrapper = {"":
 ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._NodeListWrapper$($.filter(this._lib_list, f));
},
 getRange$2: function(start, rangeLength) {
  $.intTypeCheck(rangeLength);
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NotificationEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$._PeerConnection00EventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._RTCPeerConnectionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._SVGElementInstanceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._SharedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._SpeechRecognitionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$start: function() {
  return this.operator$index$1('start');
},
 start$1: function(arg0) { return this.get$start().call$1(arg0); },
 start$0: function() { return this.get$start().call$0(); }
};

$$._TextTrackCueEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._WebSocketEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$._WorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._WorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_AbstractWorkerEventsImpl"
};

$$._DOMWindowCrossFrameImpl = {"":
 ["_window"],
 "super": "Object",
 close$0: function() {
  return this._window.close();
}
};

$$._FixedSizeListIterator = {"":
 ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 hasNext$0: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"":
 [],
 "super": "Object",
 hasNext$0: function() {
  var t1 = $.get$length(this._array);
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1);
  return t1 > this._pos;
},
 hasNext$0$bailout: function(state, t1) {
  return $.gt(t1, this._pos);
},
 next$0: function() {
  var t1 = this.hasNext$0();
  $.boolConversionCheck(t1);
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC10);
  t1 = this._array;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.next$0$bailout(2, t1);
  var t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state, env0) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.hasNext$0();
      $.boolConversionCheck(t1);
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC10);
      t1 = this._array;
    case 2:
      state = 0;
      var t3 = this._pos;
      this._pos = t3 + 1;
      return $.index(t1, t3);
  }
},
 is$Iterator: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":
 ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var length$ = $.get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.call$1$bailout(1, value, t1, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":
 ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i);
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":
 ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i);
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":
 [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":
 ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC2);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    var length$ = $.get$length(e);
    $.intTypeCheck(length$);
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(1, e, length$, 0, 0);
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
        var element = $.index(e, i);
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          for (var j = 0; $.boolConversionCheck($.lt(j, i)); j = $.intTypeCheck($.add(j, 1)))
            $.indexSet(copy, j, $.index(e, j));
          $.indexSet(copy, i, elementCopy);
          i = $.intTypeCheck($.add(i, 1));
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (i !== (i | 0))
      return this.call$1$bailout(2, e, i, length$, copy);
    for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
      $.indexSet(copy, i, this.call$1($.index(e, i)));
    return copy;
  }
  throw $.$$throw($.CTC9);
},
 call$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var e = env0;
      length$ = env1;
      break;
    case 2:
      e = env0;
      i = env1;
      length$ = env2;
      copy = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC2);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state === 2 || state === 1 || state === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state) {
          case 0:
            var length$ = $.get$length(e);
            $.intTypeCheck(length$);
          case 1:
            state = 0;
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
            if (t1) {
              t3.call$2(slot, true);
              for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
                var element = $.index(e, i);
                var elementCopy = this.call$1(element);
                if (!(elementCopy == null ? element == null : elementCopy === element)) {
                  copy = t2.call$1(slot);
                  if (true === copy) {
                    copy = new Array(length$);
                    t3.call$2(slot, copy);
                  }
                  for (var j = 0; $.boolConversionCheck($.lt(j, i)); j = $.intTypeCheck($.add(j, 1)))
                    $.indexSet(copy, j, $.index(e, j));
                  $.indexSet(copy, i, elementCopy);
                  i = $.intTypeCheck($.add(i, 1));
                  break;
                }
              }
              if (copy == null) {
                t3.call$2(slot, e);
                copy = e;
              }
            } else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 2:
            state = 0;
            for (; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC9);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":
 ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"":
 ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (!$.boolConversionCheck(t1.first_1))
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._JsonStringifier_stringifyJsonValue_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  $.stringTypeCheck(key);
  var t1 = this.box_0;
  var t2 = !$.boolConversionCheck(t1.first_10);
  var t3 = this.this_2;
  if (t2)
    $.add$1(t3.get$sb(), ',"');
  else
    $.add$1(t3.get$sb(), '"');
  t2 = this.this_2;
  $._JsonStringifier_escape(t2.get$sb(), key);
  $.add$1(t2.get$sb(), '":');
  t2.stringifyValue$1(value);
  t1.first_10 = false;
}
};

$$.anon = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = $.Actor$();
  var t2 = this.this_0;
  t2.set$v_man(t1);
  $.addAll(t2.get$v_man().get$moves(), t2.get$v_humanMoves());
  t1 = t2.get$v_weaponHands();
  t2.get$v_man().set$weapon(t1);
  t2.get$v_man().set$fighting(0);
  t1 = ['the drunkard', 'the drunk man', 'the man'];
  t2.get$v_man().set$names(t1);
  $.add$1($.index(t2.get$v_man().get$on(), 'sufferHit'), new $.anon9());
  $.add$1(t2.get$v_man().get$armors(), t2.get$v_armorHelmet());
}
};

$$.anon9 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  _this.report$1('<subject> looks very surprised');
}
};

$$.anon0 = {"":
 ["this_1"],
 "super": "Closure",
 call$0: function() {
  var t1 = $.Combat$();
  var t2 = this.this_1;
  t2.set$v_combat(t1);
  $.addAll(t2.get$v_combat().get$actors(), [t2.get$v_player(), t2.get$v_man()]);
  t2.start$1(t2.get$v_combat());
}
};

$$.anon1 = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $.assert($.countBits(15) === 4);
  $.assert($.countBits(255) === 8);
  $.assert($.countBits(65535) === 16);
  $.assert($.countBits(65534) === 15);
  $.assert($.countBits(65534) === 15);
  $.assert($.capitalize('things') === 'Things');
  $.assert($.capitalize('/things') === '/things');
}
};

$$.anon2 = {"":
 ["this_2"],
 "super": "Closure",
 call$0: function() {
  var result = $.stringTypeCheck($.Storyline_resolveRandoms('you {hit|punch} him in the face'));
  $.print(result);
  $.assert(result === 'you hit him in the face' || result === 'you punch him in the face');
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{you|thy} have my word, {Sir|Sire}'));
  $.print(result);
  $.assert($.boolConversionCheck($.startsWith(result, 'you have')) || $.boolConversionCheck($.startsWith(result, 'thy have')));
  $.assert($.boolConversionCheck($.endsWith(result, ', Sir')) || $.boolConversionCheck($.endsWith(result, ', Sire')));
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{||blank }options'));
  $.print(result);
  $.assert(result === 'options' || result === 'blank options');
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{||blank }options'));
  $.print(result);
  $.assert(result === 'options' || result === 'blank options');
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{1|two|3} options'));
  $.print(result);
  $.assert(result === '1 options' || result === 'two options' || result === '3 options');
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{1|two|3} options'));
  $.print(result);
  $.assert(result === '1 options' || result === 'two options' || result === '3 options');
  result = $.stringTypeCheck($.Storyline_resolveRandoms('{I am deeply {honoured|humbled}|You {honour|humble} me, Sire}.'));
  $.print(result);
  $.assert($.boolConversionCheck($.startsWith(result, 'I am')) || $.boolConversionCheck($.startsWith(result, 'You ')));
  $.assert($.boolConversionCheck($.endsWith(result, 'ed.')) || $.boolConversionCheck($.endsWith(result, 'Sire.')));
  result = $.stringTypeCheck($.Storyline_resolveRandoms('No tags.'));
  $.print(result);
  $.assert(result === 'No tags.');
  var result0 = $.stringTypeCheck($.Storyline_resolveRandoms('This is {not an option string}.'));
  $.print(result0);
  $.assert(result0 === 'This is {not an option string}.');
  var result1 = $.stringTypeCheck($.Storyline_resolveRandoms('{}malformed {} horrible string{}'));
  $.print(result1);
  $.assert(result1 === '{}malformed {} horrible string{}');
  var result2 = $.stringTypeCheck($.Storyline_resolveRandoms('{unbalanced{g|er|e}'));
  $.print(result2);
  $.assert(result2 === '{unbalanced{g|er|e}');
  for (var countBelow = 0, i = 0; $.boolConversionCheck($.lt(i, 1000)); i = $.intTypeCheck($.add(i, 1)))
    if ($.boolConversionCheck($.lt($.doubleTypeCheck($.Random_Random(null).nextDouble$0()), 0.1)))
      countBelow = $.intTypeCheck($.add(countBelow, 1));
  $.print('There were ' + $.S(countBelow) + ' throws (out of 1000) that resulted with less than 0.1.');
  $.assert($.lt(countBelow, 500));
  $.assert($.lt(countBelow, 200));
  var a = $.Actor$();
  var b = $.Actor$();
  b.set$stance(19);
  var t1 = this.this_2;
  $.assert($.eq(t1.get$v_moveKickLegs().canContinue$2(a, b), false));
  $.assert($.eq(t1.get$v_moveKickLegs().isApplicable$2(a, b), false));
}
};

$$.anon3 = {"":
 ["this_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_3;
  t1.set$v_NUMBER_OF_RUNS(10);
  t1.set$v_teamOneWins(0);
  t1.set$v_teamTwoWins(0);
  var runTest = $.functionTypeCheck(new $.anon7(t1));
  for (var i = 0; $.boolConversionCheck($.lt(i, t1.get$v_NUMBER_OF_RUNS())); i = $.intTypeCheck($.add(i, 1)))
    runTest.call$0();
  $.print('Swarm vs Individual: ' + $.S(t1.get$v_teamOneWins()) + ' : ' + $.S(t1.get$v_teamTwoWins()));
  $.assert($.gt(t1.get$v_teamOneWins(), t1.get$v_teamTwoWins()));
}
};

$$.anon7 = {"":
 ["this_4"],
 "super": "Closure",
 call$0: function() {
  var t1 = $.Actor$();
  var t2 = this.this_4;
  t2.set$v_swarmer1(t1);
  t1 = ['the first swarmer'];
  t2.get$v_swarmer1().set$names(t1);
  t2.get$v_swarmer1().set$pronoun($.CTC15);
  $.addAll(t2.get$v_swarmer1().get$moves(), t2.get$v_humanMoves());
  t2.get$v_swarmer1().set$team(2);
  t2.set$v_swarmer2($.Actor$());
  t1 = ['the second swarmer'];
  t2.get$v_swarmer2().set$names(t1);
  t2.get$v_swarmer2().set$pronoun($.CTC15);
  $.addAll(t2.get$v_swarmer2().get$moves(), t2.get$v_humanMoves());
  t2.get$v_swarmer2().set$team(2);
  t2.set$v_swarmer3($.Actor$());
  t1 = ['the third swarmer'];
  t2.get$v_swarmer3().set$names(t1);
  t2.get$v_swarmer3().set$pronoun($.CTC15);
  $.addAll(t2.get$v_swarmer3().get$moves(), t2.get$v_humanMoves());
  t2.get$v_swarmer3().set$team(2);
  t2.set$v_individual1($.Actor$());
  t1 = ['the first individual'];
  t2.get$v_individual1().set$names(t1);
  $.addAll(t2.get$v_individual1().get$moves(), t2.get$v_humanMoves());
  t2.get$v_individual1().set$team(3);
  t2.set$v_individual2($.Actor$());
  t1 = ['the second individual'];
  t2.get$v_individual2().set$names(t1);
  $.addAll(t2.get$v_individual2().get$moves(), t2.get$v_humanMoves());
  t2.get$v_individual2().set$team(3);
  t2.set$v_combat($.Combat$());
  $.addAll(t2.get$v_combat().get$actors(), [t2.get$v_individual1(), t2.get$v_swarmer1(), t2.get$v_individual2(), t2.get$v_swarmer2(), t2.get$v_swarmer3()]);
  $.add$1($.index(t2.get$v_combat().get$on(), 'update'), new $.anon8());
  t2.get$v_combat().start$0();
  t2.get$v_combat().updateUntilInteraction$0();
  $.assert(t2.get$v_combat().get$finished());
  if (!$.boolConversionCheck(!$.boolConversionCheck(t2.get$v_swarmer1().get$alive()) && !$.boolConversionCheck(t2.get$v_swarmer2().get$alive()) && !$.boolConversionCheck(t2.get$v_swarmer3().get$alive())))
    t1 = !$.boolConversionCheck(t2.get$v_individual1().get$alive()) && !$.boolConversionCheck(t2.get$v_individual2().get$alive());
  else
    t1 = true;
  $.assert(t1);
  t1 = $.toString(t2.get$v_combat().get$storyline());
  $.stringTypeCheck(t1);
  $.print(t1);
  if ($.boolConversionCheck($.boolConversionCheck(t2.get$v_individual1().get$alive()) || $.boolConversionCheck(t2.get$v_individual2().get$alive())))
    t2.set$v_teamTwoWins($.add(t2.get$v_teamTwoWins(), 1));
  else
    t2.set$v_teamOneWins($.add(t2.get$v_teamOneWins(), 1));
}
};

$$.anon8 = {"":
 [],
 "super": "Closure",
 call$1: function(combat) {
  if ($.boolConversionCheck($.eq($.mod(combat.get$time(), 10), 0)))
    $.add$1(combat.get$storyline(), 'it\'s 10 seconds later');
}
};

$$.anon4 = {"":
 ["this_5"],
 "super": "Closure",
 call$0: function() {
  var t1 = $.Actor$();
  var t2 = this.this_5;
  t2.set$v_wolf(t1);
  t1 = ['the orcling', 'the orcling', 'the young orcling'];
  t2.get$v_wolf().set$names(t1);
  t2.get$v_wolf().set$pronoun($.CTC15);
  $.addAll(t2.get$v_wolf().get$moves(), t2.get$v_humanMoves());
  t2.get$v_wolf().set$hitpoints(2);
  t2.get$v_wolf().set$speed(1);
  t2.set$v_orc($.Actor$());
  t1 = ['the orc', 'the big orc', 'the ugly orc'];
  t2.get$v_orc().set$names(t1);
  $.addAll(t2.get$v_orc().get$moves(), t2.get$v_humanMoves());
  t2.set$v_combat($.Combat$());
  $.addAll(t2.get$v_combat().get$actors(), [t2.get$v_wolf(), t2.get$v_orc(), t2.get$v_player()]);
  $.add$1($.index(t2.get$v_combat().get$on(), 'update'), new $.anon6());
  t2.start$1(t2.get$v_combat());
}
};

$$.anon6 = {"":
 [],
 "super": "Closure",
 call$1: function(combat) {
  if ($.boolConversionCheck($.eq($.mod(combat.get$time(), 10), 5)))
    $.add$1(combat.get$storyline(), 'a lonely bird beeps in the distance');
}
};

$$.anon5 = {"":
 ["this_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_6;
  if (!$.boolConversionCheck(t1.get$v_player().get$alive()))
    t1.goto$1(1);
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"":
 ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  var length$ = $.get$length(t1);
  $.intTypeCheck(length$);
  if (length$ !== (length$ | 0))
    return this.call$1$bailout(1, value, t1, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"":
 ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i);
  return $.index(this.copies_2, i);
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"":
 ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i);
  $.indexSet(this.copies_3, i, x);
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"":
 ["writeSlot_7", "mustCopy_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (e instanceof Date)
    throw $.$$throw($.CTC2);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC3);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, copy, e, slot);
    this.writeSlot_7.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0());) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    var length$ = $.get$length(e);
    $.intTypeCheck(length$);
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(2, e, length$, slot);
    copy = $.boolConversionCheck(this.mustCopy_6) ? new Array(length$) : e;
    this.writeSlot_7.call$2(slot, copy);
    for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
      $.indexSet(copy, i, this.call$1($.index(e, i)));
    return copy;
  }
  return e;
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      copy = env0;
      var e = env1;
      slot = env2;
      break;
    case 2:
      e = env0;
      length$ = env1;
      slot = env2;
      break;
  }
  switch (state) {
    case 0:
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC2);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC3);
    case 1:
      if (state === 1 || state === 0 && $._isJavaScriptSimpleObject(e))
        switch (state) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 1:
            state = 0;
            this.writeSlot_7.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0());) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 2:
      if (state === 2 || state === 0 && e instanceof Array)
        switch (state) {
          case 0:
            slot = this.findSlot_5.call$1(e);
            copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            var length$ = $.get$length(e);
            $.intTypeCheck(length$);
          case 2:
            state = 0;
            copy = $.boolConversionCheck(this.mustCopy_6) ? new Array(length$) : e;
            this.writeSlot_7.call$2(slot, copy);
            for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1)))
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      return e;
  }
}
};

$$.DoubleLinkedQueue_length__ = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.intTypeCheck($.add(t1.counter_1, 1));
}
};

$$.LinkedHashMapImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.Combat_update_anon = {"":
 [],
 "super": "Closure",
 call$1: function(actor) {
  actor.update$0();
  $.index(actor.get$on(), 'update').dispatchAll$0();
}
};

$$.Combat_update_anon0 = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(a) {
  return $.boolConversionCheck(a.get$alive()) && $.boolConversionCheck($.some(this.this_0.get$actors(), new $.Combat_update_anon8(a)));
}
};

$$.Combat_update_anon8 = {"":
 ["a_1"],
 "super": "Closure",
 call$1: function(b) {
  return $.boolConversionCheck(b.get$alive()) && !$.eqB(b.get$team(), this.a_1.get$team());
}
};

$$.Combat_update_anon1 = {"":
 ["this_2"],
 "super": "Closure",
 call$1: function(o) {
  return !$.eqB(o.get$team(), this.this_2.get$_player().get$team()) && $.boolConversionCheck(o.get$alive());
}
};

$$.Combat_update_anon2 = {"":
 ["this_3"],
 "super": "Closure",
 call$1: function(enemy) {
  var t1 = this.this_3;
  $.add$1(t1.get$playerChoices(), $.Choice$('Target ' + $.S(enemy.get$name()) + '.', null, true, new $.Combat_update_anon7(t1, enemy)));
}
};

$$.Combat_update_anon7 = {"":
 ["this_5", "enemy_4"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_5;
  var t2 = t1.get$storyline();
  var t3 = t1.get$_player();
  var t4 = this.enemy_4;
  t2.add$3$object$subject('<subject> now lock on to <object>', t4, t3);
  t1.get$_player().set$target(t4);
}
};

$$.Combat_update_anon3 = {"":
 ["this_6"],
 "super": "Closure",
 call$1: function(move) {
  var t1 = this.this_6;
  var t2 = t1.get$playerChoices();
  var t3 = $.S(move.get$choiceString()) + ' (';
  var t4 = t1.get$_player();
  var t5 = t3 + $.S(move.computeSuitability$2(t4, t4.get$target())) + ') (';
  var t6 = t1.get$_player();
  var t7 = t5 + $.S(move.computeChanceToHit$2(t6, t6.get$target())) + ')';
  var t8 = t1.get$_player();
  $.add$1(t2, $.Choice$($.capitalize($.Storyline_getString(t7, t8, t8.get$target())), null, true, new $.Combat_update_anon6(t1, move)));
}
};

$$.Combat_update_anon6 = {"":
 ["this_8", "move_7"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.move_7;
  this.this_8.get$_player().set$currentMove(t1);
}
};

$$.Combat_update_anon4 = {"":
 ["this_9"],
 "super": "Closure",
 call$1: function(a) {
  if ($.boolConversionCheck(a.get$alive())) {
    var t1 = this.this_9;
    t1 = !$.eqB(a, t1.get$_player().get$target()) && !$.eqB(a.get$team(), t1.get$_player().get$team());
  } else
    t1 = false;
  return t1;
}
};

$$.Combat_update_anon5 = {"":
 ["this_10"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_10;
  t1.get$_player().set$target(null);
  t1.set$time($.sub(t1.get$time(), 1));
}
};

$$.Actor_update_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(o) {
  return !$.eqB(o.get$team(), this.this_0.get$team()) && $.boolConversionCheck(o.get$alive());
}
};

$$.Actor_update_anon0 = {"":
 ["this_1"],
 "super": "Closure",
 call$1: function(m) {
  var t1 = this.this_1;
  return m.isApplicable$2(t1, t1.get$target());
}
};

$$.Actor_getPossibleMoves_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(m) {
  var t1 = this.this_0;
  return m.isApplicable$2(t1, t1.get$target());
}
};

$$.Actor_getPossibleMoves_anon0 = {"":
 ["this_1"],
 "super": "Closure",
 call$2: function(a, b) {
  var t1 = this.this_1;
  return $.sub(b.computeSuitability$2(t1, t1.get$target()), a.computeSuitability$2(t1, t1.get$target()));
}
};

$$.Combat_start_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(a) {
  var t1 = this.this_0;
  a.set$combat(t1);
  if ($.boolConversionCheck(a.get$isPlayer()))
    t1.set$_player(a);
}
};

$$.invokeClosure_anon = {"":
 ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":
 ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"":
 ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$.Actor_defaultOnAlmostDying_anon = {"":
 [],
 "super": "Closure",
 call$1: function(a) {
  $.propertyTypeCheck(a, 'is$Actor');
  if ($.boolConversionCheck($.eq($.mod(a.get$combat().get$time(), 12), 6)))
    if ($.boolConversionCheck($.randomly([true, false])))
      a.report$2$negative('blood is dripping into <subject\'s> eyes', true);
}
};

$$._StorageImpl_getKeys_anon = {"":
 ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$.HashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, key);
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, entry.get$key());
}
};

$$.HashSetImplementation_filter__ = {"":
 ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  if ($.boolConversionCheck(this.f_1.call$1(key)))
    $.add$1(this.result_0, key);
}
};

$$.HashSetImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$.HashSetImplementation_addAll__ = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  this.this_0.add$1(value);
}
};

$$._BaseSendPort_call_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._NativeJsSendPort_send_anon = {"":
 ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_lib1_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"":
 ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_lib1_receivePort().get$_callback() == null)) {
    if ($.boolConversionCheck(this.shouldSerialize_6)) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_lib1_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._waitForPendingPorts_anon = {"":
 ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$._WorkerSendPort_send_anon = {"":
 ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  t2 = $.boolConversionCheck($._globalState().get$isWorker());
  var t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_getValues_anon = {"":
 ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$.HashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, value);
}
};

$$.LinkedHashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.intTypeCheck($.add(t3, 1));
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._Copier_visitMap_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._PendingSendPortFinder_visitList_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Futures_wait_anon = {"":
 ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  $.indexSet(t1, this.pos_4, value);
  var t2 = this.box_0;
  var remaining = $.intTypeCheck($.sub(t2.remaining_1, 1));
  t2.remaining_1 = remaining;
  if (remaining === 0 && !$.boolConversionCheck(this.result_3.get$isComplete()))
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":
 ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (!$.boolConversionCheck(this.result_6.get$isComplete()))
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$.Scripter_goOneStep_anon = {"":
 ["this_3", "box_0", "incomingMessage_2"],
 "super": "Closure",
 call$1: function(choice) {
  if ($.boolConversionCheck($.eq($.hashCode(choice), this.incomingMessage_2.get$intContent()))) {
    'Found choice that was selected: ' + $.S(choice.get$string());
    var t1 = choice.get$$goto();
    if (!(t1 == null)) {
      var t2 = this.this_3;
      t2.set$nextPageIndex($.index(t2.get$pageHandles(), t1));
    }
    t1 = choice.get$f();
    if (!(t1 == null)) {
      var message = $.propertyTypeCheck(this.this_3.runScriptBlock$1$script(t1), 'is$Message0');
      this.box_0.message_1 = message;
    }
  }
}
};

$$.Scripter_goOneStep_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(choice) {
  return !$.boolConversionCheck(choice.get$shown());
}
};

$$.anon10 = {"":
 [],
 "super": "Closure",
 call$1: function(choice) {
  return !$.boolConversionCheck(choice.get$waitForEndOfPage()) && !$.boolConversionCheck(choice.get$shown());
}
};

$$.anon11 = {"":
 [],
 "super": "Closure",
 call$1: function(choice) {
  return !$.boolConversionCheck(choice.get$shown());
}
};

$$.anon12 = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(choice) {
  $.add$1(this.this_0.get$listContent(), $.makeLiteralMap(['string', choice.get$string(), 'hash', $.hashCode(choice)]));
  choice.set$shown(true);
}
};

$$.Scripter_runScriptBlock_anon = {"":
 [],
 "super": "Closure",
 call$1: function(choice) {
  return !$.boolConversionCheck($.propertyTypeCheck(choice, 'is$Choice').get$shown());
}
};

$$.Scripter_runScriptBlock_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(choice) {
  return !$.boolConversionCheck(choice.get$waitForEndOfPage());
}
};

$$.ScripterImpl_initBlock_anon = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 20)) && $.boolConversionCheck($.ge(target.get$stance(), 20));
}
};

$$.ScripterImpl_initBlock_anon0 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 20)) && $.boolConversionCheck($.ge(target.get$stance(), 10));
}
};

$$.ScripterImpl_initBlock_anon1 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  e.get$performer().report$2$wholeSentence('{Boom|Thump}!', true);
}
};

$$.ScripterImpl_initBlock_anon2 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 20)) && $.boolConversionCheck($.ge(target.get$stance(), 10));
}
};

$$.ScripterImpl_initBlock_anon3 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 10)) && $.boolConversionCheck($.ge(target.get$stance(), 20));
}
};

$$.ScripterImpl_initBlock_anon4 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 30)) && $.boolConversionCheck($.ge(target.get$stance(), 20));
}
};

$$.ScripterImpl_initBlock_anon5 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  if (!(e.get$target().get$currentMove() == null)) {
    $.index(e.get$target().get$currentMove().get$on(), 'cancel').dispatchAll$1($.CombatEvent$fromMove(e.get$target().get$currentMove()));
    e.get$target().set$currentMove(null);
  }
}
};

$$.ScripterImpl_initBlock_anon6 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 10)) && $.boolConversionCheck($.ge(target.get$stance(), 20));
}
};

$$.ScripterImpl_initBlock_anon7 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 20)) && $.boolConversionCheck($.lt(target.get$stance(), 20));
}
};

$$.ScripterImpl_initBlock_anon8 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.ge(performer.get$stance(), 20);
}
};

$$.ScripterImpl_initBlock_anon9 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  e.get$performer().report$1(_this.get$thirdPartyString());
}
};

$$.ScripterImpl_initBlock_anon10 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  var t1 = e.get$performer();
  t1.set$stance($.add(t1.get$stance(), 10));
}
};

$$.ScripterImpl_initBlock_anon11 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  if ($.boolConversionCheck($.ge(performer.get$stance(), 10))) {
    if (!(target.get$currentMove() == null)) {
      if ($.boolConversionCheck($.gt(target.get$tillEndOfMove(), 3))) {
        if ($.boolConversionCheck(target.get$currentMove().get$type().get$isOffensive()))
          var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(target.get$target(), performer)) && $.boolConversionCheck(target.get$currentMove().get$type().hasFlag$1(2048)));
        else
          t1 = false;
        $.boolConversionCheck(t1);
      } else
        t1 = false;
      $.boolConversionCheck(t1);
    } else
      t1 = false;
    $.boolConversionCheck(t1);
  } else
    t1 = false;
  return t1;
}
};

$$.ScripterImpl_initBlock_anon12 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.boolConversionCheck($.ge(performer.get$stance(), 10)) && !(target.get$currentMove() == null);
}
};

$$.ScripterImpl_initBlock_anon13 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  var t1 = e.get$target().get$currentMove().get$type().computeChanceToHit$2(e.get$target(), e.get$performer());
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var chanceToParry = $.doubleTypeCheck(1 - t1);
  t1 = $.boolConversionCheck($.lt($.Random_Random(null).nextDouble$0(), chanceToParry));
  var t2 = e.get$performer();
  if (t1) {
    t2.report$3$object$wholeSentence('<subject> {stop<s>|intercept<s>} <object\'s> ' + $.S(e.get$target().get$currentMove().get$type().get$string()) + ' which gives ' + $.S(e.get$performer().get$pronoun().get$accusative()) + ' a chance to counter-attack.', e.get$target(), true);
    e.get$target().set$currentMove(null);
    e.get$target().set$tillEndOfMove(4);
  } else
    t2.report$3$negative$object('<subject\'s> {try|attempt} to parry <object\'s> ' + $.S(e.get$target().get$currentMove().get$type().get$string()) + ' {fails|is unsuccessful|doesn\'t work out}', true, e.get$target());
}
};

$$.ScripterImpl_initBlock_anon14 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return 100;
}
};

$$.ScripterImpl_initBlock_anon15 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.lt(performer.get$stance(), 20);
}
};

$$.ScripterImpl_initBlock_anon16 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  if ($.boolConversionCheck($.le(e.get$performer().get$tillEndOfMove(), $.toInt($.div(_this.get$duration(), 2))))) {
    var t1 = e.get$performer();
    t1.set$stance($.add(t1.get$stance(), 4));
  }
}
};

$$.ScripterImpl_initBlock_anon17 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  var again = $.boolConversionCheck($.eq(e.get$performer().get$previousMove(), _this)) ? ' again' : '';
  e.get$performer().report$1('<subject> {gather<s>|begin<s>|tr<ies>} to stand up' + again);
}
};

$$.ScripterImpl_initBlock_anon18 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  var t1 = e.get$performer();
  t1.set$stance($.add(t1.get$stance(), 10));
}
};

$$.ScripterImpl_initBlock_anon19 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return 100;
}
};

$$.ScripterImpl_initBlock_anon20 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  return $.lt(performer.get$stance(), 10);
}
};

$$.ScripterImpl_initBlock_anon21 = {"":
 [],
 "super": "Closure",
 call$2: function(_this, e) {
  e.get$performer().report$2$positive('<subject> {{end<s>|finish<es>} <subject\'s> roll|roll<s> a bit out of the way}', true);
  if ($.boolConversionCheck(!(e.get$target().get$currentMove() == null) && $.boolConversionCheck($.ge($.sub(e.get$target().get$currentMove().get$type().get$duration(), e.get$target().get$tillEndOfMove()), 3)))) {
    $.index(e.get$target().get$currentMove().get$on(), 'cancel').dispatchAll$1($.CombatEvent$fromMove(e.get$target().get$currentMove()));
    e.get$target().set$currentMove(null);
  }
  var t1 = e.get$performer();
  t1.set$stance($.add(t1.get$stance(), 10));
}
};

$$.ScripterImpl_initBlock_anon22 = {"":
 [],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return 100;
}
};

$$.CombatMoveType_initDefaultFunctions_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return $.CombatMoveType_defaultIsApplicable(this.this_0, performer, target);
}
};

$$.CombatMoveType_initDefaultFunctions_anon0 = {"":
 ["this_1"],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return $.CombatMoveType_defaultCanContinue(this.this_1, performer, target);
}
};

$$.CombatMoveType_initDefaultFunctions_anon1 = {"":
 ["this_2"],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return $.CombatMoveType_defaultChanceToDodge(this.this_2, performer, target);
}
};

$$.CombatMoveType_initDefaultFunctions_anon2 = {"":
 ["this_3"],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return $.CombatMoveType_defaultChanceToBlock(this.this_3, performer, target);
}
};

$$.CombatMoveType_initDefaultFunctions_anon3 = {"":
 ["this_4"],
 "super": "Closure",
 call$2: function(performer, target) {
  $.propertyTypeCheck(performer, 'is$Actor');
  $.propertyTypeCheck(target, 'is$Actor');
  return $.CombatMoveType_defaultComputeSuitability(this.this_4, performer, target);
}
};

$$._IsolateNatives__spawn_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(msg, replyPort) {
  $.propertyTypeCheck(replyPort, 'is$SendPort');
  this.port_1.close$0();
  $.assert($.eq(msg, 'spawned'));
  this.completer_0.complete$1(replyPort);
}
};

$$.anon13 = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(p) {
  var t1 = this.this_0;
  t1.set$_port(p);
  for (var t2 = $.iterator(t1.get$pending()); $.boolConversionCheck(t2.hasNext$0());) {
    var t3 = t2.next$0();
    p.send$2($.index(t3, 'message'), $.index(t3, 'replyTo'));
  }
  t1.set$pending(null);
}
};

$$._IsolateNatives__startNonWorker_function = {"":
 ["functionName_1", "replyPort_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate($._IsolateNatives__getJSFunctionFromName(this.functionName_1), this.replyPort_0);
}
};

$$._IsolateNatives__spawnWorker_anon = {"":
 ["worker_0"],
 "super": "Closure",
 call$1: function(e) {
  $._IsolateNatives__processWorkerMessage(this.worker_0, e);
}
};

$$._IsolateNatives__processWorkerMessage_function = {"":
 ["entryPoint_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate(this.entryPoint_1, this.replyTo_0);
}
};

$$.HtmlInterface_createChoice_anon = {"":
 ["this_1", "hash_0"],
 "super": "Closure",
 call$1: function(ev) {
  $.callTypeCheck(ev, 'is$Event');
  var t1 = this.this_1;
  t1.get$_scripterPort().send$2($.Message$OptionSelected(this.hash_0).toJson$0(), t1.get$_receivePort().toSendPort$0());
  $.clear(t1.get$choicesOl().get$elements());
}
};

$$._ChildrenElementList_filter_anon = {"":
 ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  $.callTypeCheck(element, 'is$Element');
  if ($.boolConversionCheck(this.f_1.call$1(element)))
    $.add$1(this.output_0, element);
}
};

$$._FilteredElementList__filtered_anon = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._FilteredElementList_removeRange_anon = {"":
 [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.startRootIsolate_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $.functionTypeCheck($._timerFactory);
  return;
}
};

$$._EventLoop__runHelper_next = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (!$.boolConversionCheck(this.this_0.runIteration$0()))
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon14 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon15 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
 ['self', 'target'],
 'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure0 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure1 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId);
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, 'is$_ReceivePortImpl'), isolateId);
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.Storyline_getString = function(str, subject, object) {
  $.propertyTypeCheck(subject, 'is$Actor');
  $.propertyTypeCheck(object, 'is$Actor');
  if (!(subject == null)) {
    var result = $.boolConversionCheck($.eq(subject.get$pronoun(), $.CTC17)) ? $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(str, '<subject>', subject.get$pronoun().get$nominative())), '<subject\'s>', subject.get$pronoun().get$genitive())), '<s>', '')), '<es>', '')), '<ies>', 'y')), '<does>', 'do')), '<is>', 'are')) : $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceFirst(str, '<subject>', subject.get$name())), '<subject>', subject.get$pronoun().get$nominative())), '<s>', 's')), '<es>', 'es')), '<ies>', 'ies')), '<does>', 'does')), '<is>', 'is'));
    result = $.stringTypeCheck($.replaceAll(result, '<subjectPronoun>', subject.get$pronoun().get$nominative()));
    if ($.boolConversionCheck($.lt($.indexOf$1(str, '<subject>'), $.indexOf$1(str, '<subject\'s>'))))
      result = $.stringTypeCheck($.replaceAll(result, '<subject\'s>', subject.get$pronoun().get$genitive()));
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceFirst(result, '<subject\'s>', $.S(subject.get$name()) + '\'s')), '<subject\'s>', subject.get$pronoun().get$genitive())), '<subjectPronoun\'s>', subject.get$pronoun().get$genitive()));
  } else
    result = str;
  if (!(object == null)) {
    result = $.boolConversionCheck(object.get$isPlayer()) ? $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll(result, '<object>', object.get$pronoun().get$accusative())), '<object\'s>', object.get$pronoun().get$genitive())) : $.stringTypeCheck($.replaceAll(result, '<object>', object.get$name()));
    result = $.stringTypeCheck($.replaceAll(result, '<objectPronoun>', object.get$pronoun().get$accusative()));
    if ($.boolConversionCheck($.lt($.indexOf$1(str, '<object>'), $.indexOf$1(str, '<object\'s>'))))
      result = $.stringTypeCheck($.replaceAll(result, '<object\'s>', object.get$pronoun().get$genitive()));
    result = $.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceAll($.stringTypeCheck($.replaceFirst(result, '<object\'s>', $.S(object.get$name()) + '\'s')), '<object\'s>', object.get$pronoun().get$genitive())), '<objectPronoun\'s>', object.get$pronoun().get$genitive()));
  }
  return $.Storyline_resolveRandoms(result);
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.CombatMoveType_defaultOnHit = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$performer().report$3$object$positive($.S(_this.get$thirdPartyString()) + ' (' + $.S(e.get$chanceAll()) + ')', e.get$target(), true);
  var t1 = e.get$target();
  t1.set$hitpoints($.sub(t1.get$hitpoints(), _this.get$damage()));
  t1 = e.get$target();
  t1.set$stance($.sub(t1.get$stance(), _this.get$stanceDamage()));
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();

};

$.CombatMoveType$ = function(string, choiceString, thirdPartyString, flags, duration, recovery, damage, stanceDamage, baseChanceToBlock, baseChanceToDodge, fightingMod) {
  var t1 = new $.CombatMoveType(string, choiceString, thirdPartyString, duration, recovery, damage, stanceDamage, $.doubleTypeCheck(baseChanceToDodge), $.doubleTypeCheck(baseChanceToBlock), fightingMod, flags, null, null, null, null, null, null, $.listTypeCheck(null), $.CTC15);
  t1.GameEntity$0();
  t1.CombatMoveType$11(string, choiceString, thirdPartyString, flags, duration, recovery, damage, stanceDamage, baseChanceToBlock, baseChanceToDodge, fightingMod);
  return t1;
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, $.listTypeCheck($.listTypeCheck(list)));
  $.setRuntimeTypeInfo(t1, {'T': T});
  return t1;
};

$._JavaScriptAudioNodeEventsImpl$ = function(_ptr) {
  return new $._JavaScriptAudioNodeEventsImpl(_ptr);
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.intTypeCheck($.get$length(json)), 0);
  t1._JsonParser$1(json);
  return t1;
};

$.CombatMoveType_defaultChanceToDodge = function(_this, performer, target) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  var fightingDiff = $.intTypeCheck($.sub(target.get$modifiedDodging(), performer.get$modifiedAttacking()));
  if ($.boolConversionCheck($.ge(fightingDiff, 10)))
    return 1;
  else if ($.boolConversionCheck($.le(fightingDiff, -10)))
    return 0;
  else if (fightingDiff === 0)
    return _this.get$baseChanceToDodge();
  else {
    var t1 = $.boolConversionCheck($.gt(fightingDiff, 0));
    var t2 = _this.get$baseChanceToDodge();
    if (t1) {
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      t1 = 1 - t2;
      if (typeof fightingDiff !== 'number')
        throw $.iae(fightingDiff);
      return $.add(t2, t1 * fightingDiff / 10);
    } else
      return $.sub(t2, $.div($.mul(t2, $.abs(fightingDiff)), 10));
  }
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.DualPivotQuicksort__dualPivotQuicksort = function(a, left, right, compare) {
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $.DualPivotQuicksort__dualPivotQuicksort$bailout(1, a, left, right, compare, 0, 0, 0, 0, 0, 0);
  $.functionTypeCheck(compare);
  $.assert($.gt($.sub(right, left), 32));
  var sixth = $.intTypeCheck($.tdiv($.add($.sub(right, left), 1), 6));
  var index1 = $.add(left, sixth);
  $.intTypeCheck(index1);
  var index5 = $.sub(right, sixth);
  $.intTypeCheck(index5);
  var index3 = $.intTypeCheck($.tdiv($.add(left, right), 2));
  var index2 = $.intTypeCheck($.sub(index3, sixth));
  var index4 = $.intTypeCheck($.add(index3, sixth));
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  var t2 = a.length;
  if (index1 < 0 || index1 >= t2)
    throw $.ioore(index1);
  var el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t2)
    throw $.ioore(index2);
  var el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t2)
    throw $.ioore(index3);
  var el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t2)
    throw $.ioore(index4);
  var el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t2)
    throw $.ioore(index5);
  var el5 = a[index5];
  if ($.boolConversionCheck($.gt(compare.call$2(el1, el2), 0))) {
    var t0 = el1;
    el1 = el2;
    el2 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el4, el5), 0))) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el1, el3), 0))) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el2, el3), 0))) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el1, el4), 0))) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el3, el4), 0))) {
    t0 = el3;
    el3 = el4;
    el4 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el2, el5), 0))) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el2, el3), 0))) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.boolConversionCheck($.gt(compare.call$2(el4, el5), 0))) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  var t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left !== (left | 0))
    throw $.iae(left);
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right !== (right | 0))
    throw $.iae(right);
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  var less = left + 1;
  $.intTypeCheck(less);
  if (less !== (less | 0))
    return $.DualPivotQuicksort__dualPivotQuicksort$bailout(2, a, left, right, compare, el2, index1, index5, el4, less, 0);
  var great = right - 1;
  $.intTypeCheck(great);
  if (great !== (great | 0))
    return $.DualPivotQuicksort__dualPivotQuicksort$bailout(3, a, left, right, compare, el2, great, index1, index5, el4, less);
  var pivots_are_equal = $.boolTypeCheck($.eq(compare.call$2(el2, el4), 0));
  if (pivots_are_equal)
    for (var k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      var ak = a[k];
      var comp = $.intTypeCheck(compare.call$2(ak, el2));
      if (comp === 0)
        continue;
      if ($.boolConversionCheck($.lt(comp, 0))) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        less = $.intTypeCheck($.add(less, 1));
      } else
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = $.intTypeCheck(compare.call$2(a[great], el2));
          if ($.boolConversionCheck($.gt(comp, 0))) {
            great = $.intTypeCheck(great - 1);
            continue;
          } else {
            t1 = $.boolConversionCheck($.lt(comp, 0));
            var great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              var less0 = $.intTypeCheck(less + 1);
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.boolConversionCheck($.lt($.intTypeCheck(compare.call$2(ak, el2)), 0))) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        less = $.intTypeCheck($.add(less, 1));
      } else if ($.boolConversionCheck($.gt($.intTypeCheck(compare.call$2(ak, el4)), 0)))
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.boolConversionCheck($.gt($.intTypeCheck(compare.call$2(a[great], el4)), 0))) {
            great = $.intTypeCheck(great - 1);
            if ($.boolConversionCheck($.lt(great, k)))
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.boolConversionCheck($.lt($.intTypeCheck(compare.call$2(a[great], el2)), 0));
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = $.intTypeCheck(less + 1);
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = $.sub(less, 1);
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  t2 = a.length;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t1 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t1;
  t1 = $.sub(less, 1);
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  a[t1] = el2;
  t1 = $.add(great, 1);
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  var t3 = a.length;
  if (t1 < 0 || t1 >= t3)
    throw $.ioore(t1);
  t1 = a[t1];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t1;
  t1 = $.add(great, 1);
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  a[t1] = el4;
  $.DualPivotQuicksort__doSort(a, left, $.sub(less, 2), compare);
  $.DualPivotQuicksort__doSort(a, $.add(great, 2), right, compare);
  if ($.boolConversionCheck(pivots_are_equal))
    return;
  if ($.boolConversionCheck($.boolConversionCheck($.lt(less, index1)) && $.boolConversionCheck($.gt(great, index5)))) {
    while (true) {
      if (less !== (less | 0))
        throw $.iae(less);
      if (less < 0 || less >= a.length)
        throw $.ioore(less);
      if (!$.boolConversionCheck($.eq(compare.call$2(a[less], el2), 0)))
        break;
      less = $.intTypeCheck(less + 1);
    }
    while (true) {
      if (great !== (great | 0))
        throw $.iae(great);
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.boolConversionCheck($.eq(compare.call$2(a[great], el4), 0)))
        break;
      great = $.intTypeCheck(great - 1);
    }
    for (k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.intTypeCheck(compare.call$2(ak, el2)) === 0) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        less = $.intTypeCheck($.add(less, 1));
      } else if ($.intTypeCheck(compare.call$2(ak, el4)) === 0)
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.intTypeCheck(compare.call$2(a[great], el4)) === 0) {
            great = $.intTypeCheck(great - 1);
            if ($.boolConversionCheck($.lt(great, k)))
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.boolConversionCheck($.lt($.intTypeCheck(compare.call$2(a[great], el2)), 0));
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = $.intTypeCheck(less + 1);
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              $.intTypeCheck(great0);
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $.DualPivotQuicksort__doSort(a, less, great, compare);
  } else
    $.DualPivotQuicksort__doSort(a, less, great, compare);
};

$.buildDynamicMetadata = function(inputTable) {
  $.listTypeCheck(inputTable);
  var result = [];
  for (var i = 0; $.listTypeCheck(inputTable), $.boolConversionCheck($.lt(i, inputTable.length)); i = $.intTypeCheck($.add(i, 1))) {
    $.listTypeCheck(inputTable);
    var t1 = inputTable[i];
    $.listTypeCheck(t1);
    var tag = t1[0];
    var array = inputTable[i];
    $.listTypeCheck(array);
    var tags = array[1];
    var set = {};
    var tagNames = $.listTypeCheck(tags.split('|'));
    for (var j = 0, index = 1; $.listTypeCheck(tagNames), $.boolConversionCheck($.lt(j, tagNames.length)); j = $.intTypeCheck($.add(j, 1))) {
      $.listTypeCheck(tagNames);
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC27)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.ListImplementation_List$from = function(other, E) {
  return $.ListImplementation__from($.listSuperNativeTypeCheck(other, 'is$Iterable'));
};

$._Timer$repeating = function(milliSeconds, callback) {
  $.functionTypeCheck(callback);
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$.Primitives_parseDouble = function(string) {
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  var result = parseFloat(string);
  if ($.boolConversionCheck($.isNaN(result)) && !(string === 'NaN'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.floor$0();
  return Math.floor(receiver);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.hashCode = function(receiver) {
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.hashCode$0();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var t1 = $.add(hash, receiver.charCodeAt(i));
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    hash = 536870911 & t1;
    var hash0 = 536870911 & hash + 524287 & hash << 10;
    hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 6)) >>> 0);
    hash = hash0;
  }
  if (typeof hash !== 'number')
    throw $.iae(hash);
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 11)) >>> 0);
  if (typeof hash0 !== 'number')
    throw $.iae(hash0);
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.FutureImpl_FutureImpl$immediate = function(value, T) {
  var res = $.FutureImpl$();
  res._setValue$1(value);
  return res;
};

$._waitForPendingPorts = function(message, callback) {
  $.functionTypeCheck(callback);
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.CombatMoveType_defaultIsApplicable = function(_this, performer, target) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  return true;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.functionTypeCheck($.getFunctionForTypeNameOf());
  return $._getTypeNameOf.call$1(obj);
};

$.CombatEvent$fromMove = function(currentMove) {
  $.propertyTypeCheck(currentMove, 'is$CurrentCombatMove');
  var t1 = $.propertyTypeCheck(null, 'is$WeaponType');
  var t2 = $.propertyTypeCheck(null, 'is$ArmorType');
  var t3 = $.propertyTypeCheck(null, 'is$Combat');
  var t4 = $.doubleTypeCheck(null);
  t4 = new $.CombatEvent(null, null, null, t1, t2, t3, t4, t4, $.boolTypeCheck(null), false);
  t4.CombatEvent$fromMove$1(currentMove);
  return t4;
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
};

$._IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg = $._deserializeMessage($._IsolateNatives__getEventData(e));
  switch ($.index(msg, 'command')) {
    case 'start':
      var t1 = $.index(msg, 'id');
      $._globalState().set$currentManagerId(t1);
      var entryPoint = $._IsolateNatives__getJSFunctionFromName($.index(msg, 'functionName'));
      var replyTo = $._deserializeMessage($.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), 'worker-start');
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'spawn-worker':
      $._IsolateNatives__spawnWorker($.index(msg, 'functionName'), $.index(msg, 'uri'), $.index(msg, 'replyPort'));
      break;
    case 'message':
      $.index(msg, 'port').send$2($.index(msg, 'msg'), $.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'close':
      $._IsolateNatives__log('Closing Worker');
      $._globalState().get$managers().remove$1(sender.get$id());
      sender.terminate$0();
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'log':
      $._IsolateNatives__log($.index(msg, 'msg'));
      break;
    case 'print':
      if ($.boolConversionCheck($._globalState().get$isWorker()))
        $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'print', 'msg', msg])));
      else
        $.print($.index(msg, 'msg'));
      break;
    case 'error':
      throw $.$$throw($.index(msg, 'msg'));
  }
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$.toUpperCase = function(receiver) {
  if (!(typeof receiver === 'string'))
    return receiver.toUpperCase$0();
  return receiver.toUpperCase();
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$.CombatMoveType_defaultOnCancel = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$performer().report$3$negative$object('{there\'s no way <subject> can ' + $.S(_this.get$choiceString()) + ' now|<subject> find<s> it impossible to ' + $.S(_this.get$choiceString()) + ' now}', true, e.get$target());
};

$.StringBuffer_StringBuffer = function(content$) {
  return $.StringBufferImpl$(content$);
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_functionName), $.listTypeCheck($.listTypeCheck(_arguments)), existingArgumentNames);
};

$.HashSetImplementation$ = function(E) {
  var t1 = new $.HashSetImplementation(null);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1.HashSetImplementation$0();
  return t1;
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.some = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.some$1(f);
  else
    return $.Collections_some(receiver, f);
};

$.Collections_some = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0());)
    if ($.boolConversionCheck(f.call$1(t1.next$0())))
      return true;
  return false;
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  $.stringTypeCheck(name$);
  $.listTypeCheck(arguments$);
  var tag = $.stringTypeCheck($.getTypeNameOf(obj));
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; t1 = $._dynamicMetadata0(), $.listTypeCheck(t1), $.boolConversionCheck($.lt(i, t1.length)); i = $.intTypeCheck($.add(i, 1))) {
      var t1 = $._dynamicMetadata0();
      $.listTypeCheck(t1);
      var entry = $.propertyTypeCheck(t1[i], 'is$MetaInfo');
      if (entry.get$_set()[tag]) {
        t1 = entry.get$_tag();
        $.stringTypeCheck(t1);
        method = methods[t1];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.Uri__parseIntOrZero = function(val) {
  $.stringTypeCheck(val);
  if (!(val == null) && !(val === ''))
    return $.int_parse(val);
  else
    return 0;
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$.regExpMakeNative = function(regExp, global) {
  $.propertyTypeCheck(regExp, 'is$JSSyntaxRegExp');
  var pattern = $.stringTypeCheck(regExp.get$pattern());
  var multiLine = $.boolTypeCheck(regExp.get$multiLine());
  var ignoreCase = $.boolTypeCheck(regExp.get$ignoreCase());
  $.checkString(pattern);
  var sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
  if (multiLine)
    $.add$1(sb, 'm');
  if (ignoreCase)
    $.add$1(sb, 'i');
  if (global)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.or = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a | b) >>> 0;
  return a.operator$or$1(b);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.main = function() {
  $.HtmlInterface$();
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.ListImplementation__from = function(other) {
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); $.boolConversionCheck(t1.hasNext$0());)
    result.push(t1.next$0());
  return result;
};

$._Collections_some = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0());)
    if ($.boolConversionCheck(f.call$1(t1.next$0())))
      return true;
  return false;
};

$.CombatMoveType_defaultOnSufferDodge = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$target().report$3$object$positive('<subject> dodge<s> <object\'s> ' + $.S(_this.get$string()) + ' (' + $.S(e.get$chance()) + ')', e.get$performer(), true);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'boolean')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'bool'));
};

$.Maps_mapToString = function(m) {
  $.callTypeCheck(m, 'is$Map');
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$.randomly = function(choices) {
  $.listTypeCheck(choices);
  var number = $.numTypeCheck($.get$length(choices));
  if (number === 0)
    throw $.$$throw($.ExceptionImplementation$('Cannot randomly choose from an empty set.'));
  if (typeof number !== 'number')
    throw $.iae(number);
  var portionSize = 1 / number;
  return $.index(choices, $.intTypeCheck($.toInt($.floor($.div($.doubleTypeCheck($.Random_Random(null).nextDouble$0()), portionSize)))));
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure);
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.Player$ = function() {
  var t1 = new $.Player(true, false, 2, null, null, null, $.listTypeCheck(null), $.propertyTypeCheck(null, 'is$Set'), $.propertyTypeCheck(null, 'is$CurrentCombatMove'), $.propertyTypeCheck(null, 'is$CombatMoveType'), $.propertyTypeCheck(null, 'is$WeaponType'), $.propertyTypeCheck(null, 'is$Set'), 0, false, $.propertyTypeCheck(null, 'is$Combat'), $.propertyTypeCheck(null, 'is$Actor'), $.propertyTypeCheck(null, 'is$CombatCallbackHandler'), 10, 45, 0, 0, $.listTypeCheck(null), $.CTC15);
  t1.GameEntity$0();
  t1.Actor$0();
  t1.Player$0();
  return t1;
};

$._IsolateNatives__getJSFunctionName = function(f) {
  $.functionTypeCheck(f);
return f.$name || (void 0);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._callInIsolate = function(isolate, function$) {
  $.propertyTypeCheck(isolate, 'is$_IsolateContext').eval$1($.functionTypeCheck(function$));
  $._globalState().get$topEventLoop().run$0();
};

$.mod = function(a, b) {
  if ($.checkNumbers(a, b)) {
    var result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assert(!(value == null));
  return value;
};

$._DOMWindowCrossFrameImpl$ = function(_window) {
  return new $._DOMWindowCrossFrameImpl(_window);
};

$.Collections_collectionToString = function(c) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return $.toString(result);
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  else {
    $.checkNull(element);
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$.Message$EndOfBook = function() {
  return new $.Message0(32, null, null, $.intTypeCheck(null));
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.CombatMoveType_defaultComputeSuitability = function(_this, performer, target) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  if ($.boolConversionCheck(_this.get$isOffensive())) {
    var chanceToHit = $.numTypeCheck(_this.computeChanceToHit$2(performer, target));
    var value = $.intTypeCheck($.toInt($.mul($.mul($.intTypeCheck($.toInt($.mul($.add(_this.get$damage(), $.div(_this.get$stanceDamage(), 5)), 10))), chanceToHit), chanceToHit)));
    var t1 = performer.get$previousMove();
    if (!(t1 == null))
      value = $.intTypeCheck($.sub(value, $.mul($.countBits($.and(_this.get$flags(), t1.get$flags())), 10)));
    return $.boolConversionCheck(target.isArmoredAgainst$2(performer.get$weapon(), _this)) ? $.intTypeCheck($.sub(value, 100)) : value;
  } else
    return $.mul(_this.get$fightingMod(), 10);
};

$.StringBufferImpl$ = function(content$) {
  var t1 = new $.StringBufferImpl(null, null);
  t1.StringBufferImpl$1(content$);
  return t1;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  var res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.callTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.NoSuchMethodError_safeToString = function(object) {
  if (!(typeof object === 'number' && Math.floor(object) === object))
    var t1 = $.boolConversionCheck(typeof object === 'number' || typeof object === 'boolean' || null == object);
  else
    t1 = true;
  if ($.boolConversionCheck(t1))
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.stringTypeCheck($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"'))) + '"';
  return $.Primitives_objectToString(object);
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.propertyTypeCheck($.iterator(keyValuePairs), 'is$Iterator');
  var result = $.callTypeCheck($.LinkedHashMapImplementation$(), 'is$Map');
  for (; $.boolConversionCheck(iterator.hasNext$0());)
    result.operator$indexSet$2($.stringTypeCheck(iterator.next$0()), iterator.next$0());
  return result;
};

$.StringImplementation_concatAll = function(strings) {
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray($.listTypeCheck(strings)), '');
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  if (!('' === test)) {
    $.add$1(sb, first == null ? 'null' : first);
    $.add$1(sb, second == null ? 'null' : second);
  }
};

$._FilteredElementList$ = function(node) {
  $.callTypeCheck(node, 'is$Node');
  return new $._FilteredElementList(node, $.listTypeCheck(node.get$nodes()));
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; $.boolConversionCheck(iterator.hasNext$0());)
    $.add$1(receiver, iterator.next$0());
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$._IsolateNatives__getEventData = function(e) {
return e.data
};

$.stringReplaceFirstUnchecked = function(receiver, from, to) {
  return $.stringReplaceJS(receiver, from, to);
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting);
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$.replaceFirst = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceFirst$2(from, to);
  $.checkString(to);
  return $.stringReplaceFirstUnchecked(receiver, from, to);
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$.Combat$ = function() {
  var t1 = new $.Combat(null, false, false, false, null, 0, 0, $.listTypeCheck(null), $.propertyTypeCheck(null, 'is$Actor'), $.listTypeCheck(null), $.listTypeCheck(null), $.CTC15);
  t1.GameEntity$0();
  t1.Combat$0();
  return t1;
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.DEBUG_CMD = function(str) {
  $.print('CMD: ' + str);
};

$.Message$Start = function() {
  return new $.Message(16, null, null, $.intTypeCheck(null));
};

$.TypeErrorImplementation$ = function(value, type) {
  return new $.TypeErrorImplementation('type \'' + $.S($.Primitives_objectTypeName(value)) + '\' is not a subtype ' + 'of type \'' + $.S(type) + '\'');
};

$.CurrentCombatMove$ = function(type, performer, target) {
  var t1 = new $.CurrentCombatMove(type, performer, $.propertyTypeCheck(target, 'is$Actor'), null, null, $.CTC15);
  t1.GameEntity$0();
  t1.CurrentCombatMove$3(type, performer, target);
  return t1;
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.WeaponType$ = function(name$, piercing, hardness, blockingMod) {
  var t1 = new $.WeaponType(piercing, hardness, blockingMod, null, null, $.propertyTypeCheck(null, 'is$Set'), $.propertyTypeCheck(null, 'is$CombatCallbackHandler'), $.listTypeCheck(null), $.CTC15);
  t1.GameEntity$0();
  t1.WeaponType$4(name$, piercing, hardness, blockingMod);
  return t1;
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  var t1 = new $._DoubleLinkedQueueIterator($.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel'), null);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._ReceivePortFactory_ReceivePort = function() {
  return $._ReceivePortImpl$();
};

$._Device_isIE = function() {
  return !$.boolConversionCheck($._Device_isOpera()) && $.boolConversionCheck($.contains$2($._Device_userAgent(), 'MSIE', 0));
};

$.CombatCallback$ = function(_this, _key) {
  var t1 = new $.CombatCallback(null, _this, _key);
  t1.CombatCallback$2(_this, _key);
  return t1;
};

$.CombatMoveType_defaultOnSufferBlock = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$target().report$3$object$positive('<subject> deflect<s> it', e.get$performer(), true);
  var actualStanceDamage = $.intTypeCheck($.max(0, $.sub($.toInt($.div(_this.get$stanceDamage(), 2)), e.get$target().get$modifiedFighting())));
  if (actualStanceDamage > 0) {
    e.get$target().report$2$negative('the blow was hard', true);
    var t1 = e.get$target();
    t1.set$stance($.sub(t1.get$stance(), actualStanceDamage));
  }
};

$.Actor$ = function() {
  var t1 = new $.Actor(true, false, 2, null, null, null, $.listTypeCheck(null), $.propertyTypeCheck(null, 'is$Set'), $.propertyTypeCheck(null, 'is$CurrentCombatMove'), $.propertyTypeCheck(null, 'is$CombatMoveType'), $.propertyTypeCheck(null, 'is$WeaponType'), $.propertyTypeCheck(null, 'is$Set'), 0, false, $.propertyTypeCheck(null, 'is$Combat'), $.propertyTypeCheck(null, 'is$Actor'), $.propertyTypeCheck(null, 'is$CombatCallbackHandler'), 10, 45, 0, 0, $.listTypeCheck(null), $.CTC15);
  t1.GameEntity$0();
  t1.Actor$0();
  return t1;
};

$.Uri__emptyIfNull = function(val) {
  $.stringTypeCheck(val);
  return !(val == null) ? val : '';
};

$.Collections__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting);
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.throwNoSuchMethod = function(obj, name$, arguments$) {
  throw $.$$throw($.NoSuchMethodError$(obj, name$, arguments$, null));
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($._globalState().get$isWorker()))
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._IsolateNatives__startNonWorker = function(functionName, uri, replyPort) {
  if (!(uri == null))
    throw $.$$throw($.UnsupportedOperationException$('Currently spawnUri is not supported without web workers.'));
  $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__startNonWorker_function(functionName, replyPort), 'nonworker start');
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.StringImplementation_String$fromCharCodes = function(charCodes) {
  return $.StringImplementation__fromCharCodes(charCodes);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.Queue_Queue('_IsolateEvent'), 'is$Queue'));
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  for (var t1 = $.iterator(charCodes); $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
  }
  return String.fromCharCode.apply(null, charCodes);
};

$.CombatMoveType_defaultChanceToBlock = function(_this, performer, target) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  var fightingDiff = $.intTypeCheck($.sub(target.get$modifiedDodging(), performer.get$modifiedAttacking()));
  if ($.boolConversionCheck($.ge(fightingDiff, 10)))
    return 1;
  else if ($.boolConversionCheck($.le(fightingDiff, -10)))
    return 0;
  else if (fightingDiff === 0)
    return _this.get$baseChanceToBlock();
  else {
    var t1 = $.boolConversionCheck($.gt(fightingDiff, 0));
    var t2 = _this.get$baseChanceToBlock();
    if (t1) {
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      t1 = 1 - t2;
      if (typeof fightingDiff !== 'number')
        throw $.iae(fightingDiff);
      return $.add(t2, t1 * fightingDiff / 10);
    } else
      return $.sub(t2, $.div($.mul(t2, $.abs(fightingDiff)), 10));
  }
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'List'));
};

$.Storyline$ = function() {
  var t1 = new $.Storyline(null, null);
  t1.Storyline$0();
  return t1;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, false);
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.regExpMatchStart = function(m) {
  return m.index;
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = $.listTypeCheck(table);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  return name$;
};

$.isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.ArmorType$ = function(name$, hardness, dodgingMod, coveringTargets, coveringSides, coveringEffects) {
  var t1 = new $.ArmorType(hardness, dodgingMod, coveringTargets, coveringSides, coveringEffects, null, null, $.CTC15);
  t1.GameEntity$0();
  t1.ArmorType$6(name$, hardness, dodgingMod, coveringTargets, coveringSides, coveringEffects);
  return t1;
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.sort = function(receiver, compare) {
  if (!$.isJsArray(receiver))
    return receiver.sort$1(compare);
  $.checkMutable(receiver, 'sort');
  $.DualPivotQuicksort_sort(receiver, compare);
};

$._IsolateNatives__spawn = function(functionName, uri, isLight) {
  $.stringTypeCheck(functionName);
  var completer = $.propertyTypeCheck($.Completer_Completer('SendPort'), 'is$Completer');
  var port = $.propertyTypeCheck($._ReceivePortFactory_ReceivePort(), 'is$ReceivePort');
  port.receive$1(new $._IsolateNatives__spawn_anon(port, completer));
  var signalReply = $.propertyTypeCheck(port.toSendPort$0(), 'is$SendPort');
  if ($.boolConversionCheck($._globalState().get$useWorkers()) && !isLight)
    $._IsolateNatives__startWorker(functionName, uri, signalReply);
  else
    $._IsolateNatives__startNonWorker(functionName, uri, signalReply);
  return $._BufferingSendPort$($._globalState().get$currentContext().get$id(), completer.get$future());
};

$.DualPivotQuicksort_sort = function(a, compare) {
  $.listTypeCheck(a);
  $.functionTypeCheck(compare);
  $.DualPivotQuicksort__doSort(a, 0, $.sub($.get$length(a), 1), compare);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1 = {};
  $.listTypeCheck(futures);
  if (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior())
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.boolConversionCheck($.isEmpty(futures)))
    return $.Future_Future$immediate($.CTC0, 'List');
  var completer = $.propertyTypeCheck($.Completer_Completer('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; $.boolConversionCheck($.lt(i, futures.length)); i = $.intTypeCheck($.add(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= futures.length)
      throw $.ioore(i);
    var future = $.propertyTypeCheck(futures[i], 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Message$NoResult = function() {
  return new $.Message0(256, null, null, $.intTypeCheck(null));
};

$.lastIndexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver))
    return $.Arrays_lastIndexOf(receiver, element, start);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (!(start == null)) {
      if (!(typeof start === 'number'))
        throw $.$$throw($.ArgumentError$(start));
      if (start < 0)
        return -1;
      var t1 = receiver.length;
      if (start >= t1) {
        if (element === '')
          return t1;
        start = t1 - 1;
      } else
        start = start;
    }
    return $.stringLastIndexOfUnchecked(receiver, element, start);
  }
  return receiver.lastIndexOf$2(element, start);
};

$._MatchImplementation$ = function(pattern, str, _start, _end, _groups) {
  return new $._MatchImplementation($.stringTypeCheck(pattern), str, $.intTypeCheck(_start), $.intTypeCheck(_end), $.listTypeCheck($.listTypeCheck(_groups)));
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length)) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.boolConversionCheck($.boolConversionCheck($.lt(index, 0)) || $.boolConversionCheck($.ge(index, $.get$length(a)))))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$.Future_Future$immediate = function(value, T) {
  return $.FutureImpl_FutureImpl$immediate(value, T);
};

$.Uri$fromString = function(uri) {
  var t1 = $.CTC22.firstMatch$1($.stringTypeCheck(uri));
  var t2 = $.Uri__emptyIfNull($.index(t1, 1));
  var t3 = $.Uri__emptyIfNull($.index(t1, 2));
  var t4 = $.Uri__emptyIfNull($.index(t1, 3));
  var t5 = $.Uri__parseIntOrZero($.index(t1, 4));
  var t6 = $.Uri__emptyIfNull($.index(t1, 5));
  var t7 = $.Uri__emptyIfNull($.index(t1, 6));
  var t8 = $.Uri__emptyIfNull($.index(t1, 7));
  return new $.Uri(t2, t3, t4, $.intTypeCheck(t5), t6, t7, t8);
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.Message$Quit = function() {
  return new $.Message(0, null, null, $.intTypeCheck(null));
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, 'is$_IsolateContext'), $.functionTypeCheck(fn), message);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  if (from === '')
    if (receiver === '')
      return to;
    else {
      var result = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
      var length$ = receiver.length;
      $.add$1(result, to);
      for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= length$)
          throw $.ioore(i);
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.propertyTypeCheck($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.propertyTypeCheck($.CTC12, 'is$RegExp'), true), "\\$&"), false, false), 'is$RegExp'), true), to);
};

$.capitalize = function(str) {
  $.stringTypeCheck(str);
  var firstLetter = $.stringTypeCheck($.toUpperCase($.index(str, 0)));
  if ($.boolConversionCheck($.eq($.get$length(str), 1)))
    return firstLetter;
  else
    return $.S(firstLetter) + $.S($.substring$1(str, 1));
};

$.countBits = function(x) {
  $.intTypeCheck(x);
  if (x !== (x | 0))
    return $.countBits$bailout(1, x);
  for (var count = 0; $.boolConversionCheck($.gt(x, 0)); count = $.intTypeCheck($.add(count, 1)))
    x = $.intTypeCheck($.and(x, $.sub(x, 1)));
  return count;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.min = function(a, b) {
  $.numTypeCheck(b);
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if ($.boolConversionCheck($.boolConversionCheck(a === 0 && $.boolConversionCheck($.isNegative(b))) || $.boolConversionCheck($.isNaN(b))))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._IsolateNatives__newWorker = function(url) {
return new Worker(url);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.propertyTypeError = function(value, property) {
  throw $.$$throw($.TypeErrorImplementation$(value, $.stringTypeCheck($.substring$2(property, 3, $.get$length(property)))));
};

$.createScripter = function() {
  $.ScripterImpl$();
};

$.Storyline_resolveRandoms = function(str) {
  $.stringTypeCheck(str);
  if (typeof str !== 'string')
    return $.Storyline_resolveRandoms$bailout(1, str, 0, 0, 0, 0, 0, 0);
  var startTagIndex = $.indexOf$1(str, '{');
  $.intTypeCheck(startTagIndex);
  if (startTagIndex !== (startTagIndex | 0))
    return $.Storyline_resolveRandoms$bailout(2, str, startTagIndex, 0, 0, 0, 0, 0);
  if (startTagIndex !== -1 && startTagIndex < str.length - 1) {
    var indexes = $.ListImplementation_List(null, 'int');
    $.setRuntimeTypeInfo(indexes, {'E': 'int'});
    indexes.push(startTagIndex);
    var i = startTagIndex + 1;
    var t1 = str.length;
    var lastIndex = null;
    var depth = 1;
    while (true) {
      if (lastIndex !== (lastIndex | 0))
        return $.Storyline_resolveRandoms$bailout(4, str, lastIndex, indexes, depth, i, startTagIndex, 0);
      var endTagIndex = null;
      if (!(i < t1))
        break;
      if (i < 0)
        throw $.ioore(i);
      var ch = $.stringTypeCheck(str[i]);
      if (ch === '{') {
        depth = $.add(depth, 1);
        $.intTypeCheck(depth);
        if (depth !== (depth | 0))
          return $.Storyline_resolveRandoms$bailout(5, str, depth, indexes, i, startTagIndex, 0, 0);
      } else if (ch === '|' && depth === 1)
        indexes.push(i);
      else if (ch === '}') {
        depth = $.sub(depth, 1);
        $.intTypeCheck(depth);
        if (depth !== (depth | 0))
          return $.Storyline_resolveRandoms$bailout(6, str, indexes, startTagIndex, i, depth, 0, 0);
        if (depth === 0) {
          indexes.push(i);
          endTagIndex = i;
          lastIndex = endTagIndex;
          break;
        }
      }
      lastIndex = i;
      ++i;
    }
    if (endTagIndex !== (endTagIndex | 0))
      return $.Storyline_resolveRandoms$bailout(8, str, indexes, lastIndex, startTagIndex, endTagIndex, 0, 0);
    var numOptions = indexes.length - 1;
    if (numOptions > 1) {
      var t2 = $.Random_Random(null).nextDouble$0();
      if (typeof t2 !== 'number')
        return $.Storyline_resolveRandoms$bailout(9, str, indexes, lastIndex, startTagIndex, endTagIndex, t2, numOptions);
      var choice = $.toInt($.floor(t2 * numOptions));
      $.intTypeCheck(choice);
      var strBuf = $.StringBuffer_StringBuffer('');
      $.propertyTypeCheck(strBuf, 'is$StringBuffer');
      $.add$1(strBuf, $.substring$2(str, 0, startTagIndex));
      if (choice !== (choice | 0))
        throw $.iae(choice);
      var t4 = indexes.length;
      if (choice < 0 || choice >= t4)
        throw $.ioore(choice);
      var t5 = indexes[choice];
      if (typeof t5 !== 'number')
        return $.Storyline_resolveRandoms$bailout(10, str, indexes, lastIndex, endTagIndex, t5, choice, strBuf);
      ++t5;
      var t7 = choice + 1;
      if (t7 >= t4)
        throw $.ioore(t7);
      $.add$1(strBuf, $.Storyline_resolveRandoms($.stringTypeCheck($.substring$2(str, t5, indexes[t7]))));
      $.add$1(strBuf, $.substring$2(str, endTagIndex + 1, t1));
      if (lastIndex === t1 - 1)
        return $.toString(strBuf);
      else
        return $.Storyline_resolveRandoms($.toString(strBuf));
    } else if (lastIndex === t1 - 1)
      return str;
    else {
      t1 = lastIndex + 1;
      return $.S($.substring$2(str, 0, t1)) + $.S($.Storyline_resolveRandoms($.substring$1(str, t1)));
    }
  } else
    return str;
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length))
      return a[key];
  }
  return $.index$slow(a, index);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.last$0();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
return document.createElement(tag)
};

$.NotImplementedException$ = function(message) {
  return new $.NotImplementedException(message);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !($.indexOf$2(receiver, other, startIndex) === -1);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.DEBUG_SCR = function(str) {
};

$.ScripterImpl$ = function() {
  var t1 = $.callTypeCheck(null, 'is$Map');
  var t2 = $.listTypeCheck(null);
  var t3 = $.intTypeCheck(null);
  t3 = new $.ScripterImpl(null, null, t1, t2, t3, $.stringTypeCheck(null), t3, t3, false, $.listTypeCheck(null), $.listTypeCheck(null), $.callTypeCheck(null, 'is$Map'), $.propertyTypeCheck(null, 'is$StringBuffer'));
  t3.Scripter$0();
  t3.ScripterImpl$0();
  return t3;
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$.doubleTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'double'));
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.startsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.startsWith$1(other);
  $.checkString(other);
  var length$ = other.length;
  if ($.boolConversionCheck(length$ > receiver.length))
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gt(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (start !== (start | 0))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $._Lists_getRange$bailout(2, a, start, length$, accumulator);
  if ($.boolConversionCheck($.lt(length$, 0)))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = start + length$;
  $.intTypeCheck(end);
  if (end !== (end | 0))
    return $._Lists_getRange$bailout(3, a, start, accumulator, end);
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.boolConversionCheck($.lt(i, end)); i = $.intTypeCheck($.add(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.ObjectNotClosureException$ = function() {
  return new $.ObjectNotClosureException();
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.stringTypeCheck($.constructorNameFallback(object));
  if (name$ === 'Object') {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.stringTypeCheck($.substring$1(name$, 1)) : name$;
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.HashSetIterator$ = function(set_, E) {
  $.propertyTypeCheck(set_, 'is$HashSetImplementation');
  var t1 = new $.HashSetIterator($.listTypeCheck(set_.get$_backingMap().get$_keys()), -1);
  $.setRuntimeTypeInfo(t1, {'E': E});
  t1.HashSetIterator$1(set_);
  return t1;
};

$.Choice$ = function(string, goto$, showNow, then) {
  $.functionTypeCheck(then);
  var t1 = new $.Choice($.stringTypeCheck(string), null, goto$, null, false, null, $.intTypeCheck(null));
  t1.UserInteraction$0();
  t1.Choice$4$goto$$showNow$then(string, goto$, showNow, then);
  return t1;
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.StackOverflowException$ = function() {
  return new $.StackOverflowException();
};

$.Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0());)
    f.call$1(t1.next$0());
};

$.isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.isEmpty$0();
};

$._Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0());)
    f.call$1(t1.next$0());
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrameImpl__createSafe($.throwNoSuchMethod('', 'get event', []));
  else
    return e;
};

$._convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), mustCopy, t1, t2).call$1(object);
};

$.max = function(a, b) {
  $.numTypeCheck(b);
  if (typeof b === 'number') {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === 'number') {
      if (typeof a === 'number')
        if (a === 0)
          return a + b;
      if ($.boolConversionCheck($.isNaN(b)))
        return b;
      return a;
    }
    if ($.boolConversionCheck(b === 0 && $.boolConversionCheck($.isNegative(a))))
      return b;
    return a;
  }
  throw $.$$throw($.ArgumentError$(b));
  throw $.$$throw($.ArgumentError$(a));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList($.listTypeCheck(_nodeList));
};

$.CombatMoveType_defaultOnStart = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  var again = $.boolConversionCheck($.eq(e.get$performer().get$previousMove(), _this)) ? ' again' : '';
  var t1 = e.get$performer();
  var t2 = !$.boolConversionCheck(t1.get$isPlayer());
  var t3 = _this.get$choiceString();
  if (t2)
    t1.report$3$endSentence$object('<subject> wind<s> up to ' + $.S(t3) + again, true, e.get$target());
  else
    t1.report$3$endSentence$object('you decide to ' + $.S(t3) + again, true, e.get$target());
};

$.DualPivotQuicksort_insertionSort_ = function(a, left, right, compare) {
  if (left !== (left | 0))
    return $.DualPivotQuicksort_insertionSort_$bailout(1, a, left, right, compare, 0);
  if (right !== (right | 0))
    return $.DualPivotQuicksort_insertionSort_$bailout(1, a, left, right, compare, 0);
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.DualPivotQuicksort_insertionSort_$bailout(2, a, left, right, compare, 0);
  $.functionTypeCheck(compare);
  var i = left + 1;
  for (; $.boolConversionCheck($.le(i, right)); i = $.intTypeCheck($.add(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    var el = a[i];
    var j = i;
    while (true) {
      if ($.boolConversionCheck($.gt(j, left))) {
        var t1 = $.sub(j, 1);
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        var t2 = $.boolConversionCheck($.gt(compare.call$2(a[t1], el), 0));
        t1 = t2;
      } else
        t1 = false;
      if (!$.boolConversionCheck(t1))
        break;
      t1 = $.sub(j, 1);
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= a.length)
        throw $.ioore(t1);
      $.indexSet(a, j, a[t1]);
      j = $.intTypeCheck($.sub(j, 1));
    }
    $.indexSet(a, j, el);
  }
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.JSON_stringify = function(object) {
  return $._JsonStringifier_stringify(object);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.propertyTypeCheck($.StringBuffer_StringBuffer(''), 'is$StringBuffer');
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.toString(output);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if ($.boolConversionCheck(index < 0 || $.ge(index, $.get$length(a))))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'AppleWebKit'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.Primitives_objectHashCode = function(object) {
  var hash = $.intTypeCheck(object.$identityHash);
  if (hash == null) {
    hash = $.intTypeCheck($.add($.Primitives_hashCodeSeed, 1));
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.charCodeAt = function(receiver, index) {
  $.intTypeCheck(index);
  if (typeof receiver === 'string') {
    if (!(typeof index === 'number'))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.StringImplementation__fromCharCodes = function(charCodes) {
  $.checkNull(charCodes);
  if (!$.isJsArray(charCodes))
    charCodes = $.ListImplementation_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.ListImplementation_List = function(length$, E) {
  return $.Primitives_newList($.intTypeCheck(length$));
};

$.document = function() {
return document;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($.boolConversionCheck($._Device_isFirefox()))
      $._cachedBrowserPrefix = '-moz-';
    else if ($.boolConversionCheck($._Device_isIE()))
      $._cachedBrowserPrefix = '-ms-';
    else if ($.boolConversionCheck($._Device_isOpera()))
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$._IsolateNatives__log = function(msg) {
  if ($.boolConversionCheck($._globalState().get$isWorker()))
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'log', 'msg', msg])));
  else
    try {
      $._IsolateNatives__consoleLog(msg);
    } catch (exception) {
      $.unwrapException(exception);
      var trace = $.getTraceFromException(exception);
      throw $.$$throw($.ExceptionImplementation$(trace));
    }

};

$.Primitives_parseInt = function(string) {
  $.checkString(string);
  var match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  var base = !($.index(match, 1) == null) ? 16 : 10;
  var result = parseInt(string, base);
  if ($.boolConversionCheck($.isNaN(result)))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$._Timer$ = function(milliSeconds, callback) {
  $.functionTypeCheck(callback);
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.HtmlInterface$ = function() {
  var t1 = $.callTypeCheck(null, 'is$DivElement');
  t1 = new $.HtmlInterface(null, null, t1, t1, $.callTypeCheck(null, 'is$OListElement'), $.listTypeCheck(null));
  t1.HtmlInterface$0();
  return t1;
};

$.isNaN = function(receiver) {
  return isNaN(receiver);
};

$.port = function() {
  if ($._lazyPort == null)
    $._lazyPort = $.propertyTypeCheck($._ReceivePortFactory_ReceivePort(), 'is$ReceivePort');
  return $._lazyPort;
};

$.toInt = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.boolConversionCheck($.isNaN(receiver)))
    throw $.$$throw($.FormatException$('NaN'));
  if ($.boolConversionCheck($.isInfinite(receiver)))
    throw $.$$throw($.FormatException$('Infinity'));
  var truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.lastIndexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_lastIndexOf(receiver, element, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    return receiver.lastIndexOf(element);
  }
  return receiver.lastIndexOf$1(element);
};

$.UnsupportedOperationException$ = function(_message) {
  return new $.UnsupportedOperationException(_message);
};

$._BufferingSendPort$ = function(isolateId, _futurePort) {
  var t1 = $._BufferingSendPort__idCount;
  var t2 = [];
  t2 = new $._BufferingSendPort($.intTypeCheck(t1), null, $.propertyTypeCheck(_futurePort, 'is$Future'), t2, $.intTypeCheck(isolateId));
  t2._BufferingSendPort$2(isolateId, _futurePort);
  return t2;
};

$.Actor_defaultOnDie = function(_this) {
  $.propertyTypeCheck(_this, 'is$Actor').report$3$negative$reportOnlyOnAlive('<subject> ' + $.S($.randomly(['pass<es> out', 'lose<s> consciousness', 'black<s> out', 'go<es> down'])), true, false);
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$._IsolateNatives__getJSFunctionFromName = function(functionName) {
  $.stringTypeCheck(functionName);
    return $globalThis[functionName];
  
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.Primitives_printString = function(string) {
  $.stringTypeCheck(string);
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata($.listTypeCheck(inputTable));
  $._dynamicMetadata(t1);
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$.ExceptionImplementation$ = function(message) {
  return new $.ExceptionImplementation(message);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.get$length(receiver) === 0)
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'num'));
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if ($.boolConversionCheck(!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0))
    throw $.$$throw($.ArgumentError$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$._globalState = function() {
return $globalState;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if ($.boolConversionCheck($.lt(startIndex, 0)))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.boolConversionCheck($.gt(startIndex, endIndex)))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.boolConversionCheck($.gt(endIndex, length$)))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$._globalState0 = function(val) {
  $.propertyTypeCheck(val, 'is$_Manager');
$globalState = val;
};

$.window = function() {
return window;
};

$.Message$fromJson = function(json) {
  var t1 = new $.Message0(null, null, $.stringTypeCheck(null), null);
  t1.Message$fromJson$1(json);
  return t1;
};

$.Message$fromJson0 = function(json) {
  var t1 = new $.Message(null, null, $.stringTypeCheck(null), null);
  t1.Message$fromJson$1(json);
  return t1;
};

$.spawnFunction = function(topLevelFunction) {
  var name$ = $._IsolateNatives__getJSFunctionName($.functionTypeCheck(topLevelFunction));
  if (name$ == null)
    throw $.$$throw($.UnsupportedOperationException$('only top-level functions can be spawned.'));
  return $._IsolateNatives__spawn(name$, null, false);
};

$.HashMapImplementation$ = function(K, V) {
  var t1 = $.intTypeCheck(null);
  t1 = new $.HashMapImplementation(null, null, t1, t1, t1);
  $.setRuntimeTypeInfo(t1, {'K': K, 'V': V});
  t1.HashMapImplementation$0();
  return t1;
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$._FixedSizeListIterator$ = function(array, T) {
  $.listTypeCheck(array);
  var t1 = new $._FixedSizeListIterator($.intTypeCheck($.get$length(array)), $.listTypeCheck(array), 0);
  $.setRuntimeTypeInfo(t1, {'T': T});
  return t1;
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  $.intTypeCheck(length$);
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.Completer_Completer = function(T) {
  return $.CompleterImpl$(T);
};

$._IsolateNatives__thisScript = function() {
return $thisScriptUrl
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  $.intTypeCheck(startIndex);
  if (startIndex !== (startIndex | 0))
    return $.Arrays_lastIndexOf$bailout(2, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  var t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (var i = startIndex; $.boolConversionCheck($.ge(i, 0)); i = $.intTypeCheck($.sub(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element)))
      return i;
  }
  return -1;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.isInfinite = function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
};

$.CompleterImpl$ = function(T) {
  var t1 = new $.CompleterImpl($.propertyTypeCheck($.FutureImpl$(), 'is$FutureImpl'));
  $.setRuntimeTypeInfo(t1, {'T': T});
  return t1;
};

$.Choice$fromMap = function(map) {
  $.callTypeCheck(map, 'is$Map');
  var t1 = $.boolTypeCheck(null);
  t1 = new $.Choice(null, null, null, t1, false, t1, $.intTypeCheck(null));
  t1.UserInteraction$0();
  t1.Choice$fromMap$1(map);
  return t1;
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$._IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  if (functionName == null)
    functionName = 'main';
  if (uri == null)
    uri = $._IsolateNatives__thisScript();
  if (!$.boolConversionCheck($.Uri$fromString(uri).isAbsolute$0()))
    uri = $.S($.stringTypeCheck($.substring$2($._IsolateNatives__thisScript(), 0, $.lastIndexOf$1($._IsolateNatives__thisScript(), '/')))) + '/' + $.S(uri);
  var worker = $._IsolateNatives__newWorker(uri);
  worker.set$onmessage(new $._IsolateNatives__spawnWorker_anon(worker));
  var t1 = $._globalState();
  var workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.add(workerId, 1));
  worker.set$id(workerId);
  $.indexSet($._globalState().get$managers(), workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'start', 'id', workerId, 'replyTo', $._serializeMessage(replyPort), 'functionName', functionName])));
};

$.Message$Continue = function() {
  return new $.Message(1, null, null, $.intTypeCheck(null));
};

$.StringImplementation__toJsStringArray = function(strings) {
  $.listTypeCheck(strings);
  if (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= length$)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException($.stringTypeCheck(_pattern), _errmsg);
};

$._IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.functionTypeCheck(topLevel);
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._fillStatics($._globalState().get$currentContext());
  $._lazyPort = $.propertyTypeCheck($._ReceivePortFactory_ReceivePort(), 'is$ReceivePort');
  replyTo.send$2('spawned', $.port().toSendPort$0());
  topLevel.call$0();
};

$._timerFactory = function(millis, callback, repeating) {
  $.intTypeCheck(millis);
  $.functionTypeCheck(callback);
  return $.boolTypeCheck(repeating) ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.listSuperNativeTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  if (value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.Set_Set = function(E) {
  return $.HashSetImplementation$(E);
};

$.constructorNameFallback = function(object) {
  if (object == null)
    return 'Null';
  var constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = $.boolConversionCheck(!(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype'));
    else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return name$;
  }
  var string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._LocalWindowEventsImpl$ = function(_ptr) {
  return new $._LocalWindowEventsImpl(_ptr);
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.WeaponType_defaultOnSufferPierced = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$WeaponType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  $.print('Suffer Pierced: ' + $.S(_this.get$barehanded()));
  if ($.boolConversionCheck(_this.get$barehanded()))
    if ($.boolConversionCheck(e.get$weapon().get$blunt())) {
      e.get$performer().report$3$object$positive('<subject\'s> ' + $.S(e.get$weapon().get$name()) + ' breaks <object\'s> ' + $.S(_this.get$name()), e.get$target(), true);
      e.get$target().report$2$negative('<subject> scream<s> in pain', true);
      var t1 = $.max(1, $.sub(e.get$target().get$hitpoints(), 10));
      e.get$target().set$hitpoints(t1);
    } else if ($.boolConversionCheck(e.get$weapon().get$sharp())) {
      e.get$performer().report$3$object$positive('<subject\'s> ' + $.S(e.get$weapon().get$name()) + ' goes right through <object\'s> ' + $.S(_this.get$name()), e.get$target(), true);
      e.get$target().report$2$negative('<subject> scream<s> in pain', true);
      t1 = $.max(1, $.sub(e.get$target().get$hitpoints(), 10));
      e.get$target().set$hitpoints(t1);
    } else
      throw $.$$throw($.ExceptionImplementation$('Weapon is not blunt nor sharp, but still is piercing barehands?'));
  else
    e.get$target().report$2$negative('<subject\'s> ' + $.S(_this.get$name()) + ' breaks', true);
};

$._JsonStringifier_escape = function(sb, s) {
  $.propertyTypeCheck(sb, 'is$StringBuffer');
  var length$ = $.intTypeCheck($.get$length(s));
  var charCodes = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(charCodes, {'E': 'int'});
  for (var needsEscape = false, i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
    var charCode = $.intTypeCheck($.charCodeAt(s, i));
    if ($.boolConversionCheck($.lt(charCode, 32))) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          var t1 = $.and($.shr(charCode, 12), 15);
          $.intTypeCheck(t1);
          if ($.boolConversionCheck($.lt(t1, 10))) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and($.shr(charCode, 8), 15);
          $.intTypeCheck(t1);
          if ($.boolConversionCheck($.lt(t1, 10))) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and($.shr(charCode, 4), 15);
          $.intTypeCheck(t1);
          if ($.boolConversionCheck($.lt(t1, 10))) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          t1 = $.and(charCode, 15);
          $.intTypeCheck(t1);
          if ($.boolConversionCheck($.lt(t1, 10))) {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 48 + t1;
          } else {
            if (typeof t1 !== 'number')
              throw $.iae(t1);
            t1 = 87 + t1;
          }
          charCodes.push(t1);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  $.add$1(sb, needsEscape ? $.StringImplementation_String$fromCharCodes(charCodes) : s);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.callTypeCheck(element.get$$$dom_children(), 'is$_HTMLCollectionImpl'));
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if (!$.boolConversionCheck($.eq(type, 'property_not_function'))) {
      if (!$.boolConversionCheck($.eq(type, 'called_non_callable')))
        var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(type, 'non_object_property_call')) || $.boolConversionCheck($.eq(type, 'non_object_property_load')));
      else
        t1 = true;
      $.boolConversionCheck(t1);
    } else
      t1 = true;
    if ($.boolConversionCheck(t1))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'))))
        return $.ObjectNotClosureException$();
      else
        return $.NullPointerException$(null, $.CTC0);
    else if ($.boolConversionCheck($.eq(type, 'undefined_method')))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'))))
        return $.ObjectNotClosureException$();
      else
        return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string') {
      if (!$.boolConversionCheck($.endsWith(message, 'is null')))
        t1 = $.boolConversionCheck($.boolConversionCheck($.endsWith(message, 'is undefined')) || $.boolConversionCheck($.endsWith(message, 'is null or undefined')));
      else
        t1 = true;
      if ($.boolConversionCheck(t1))
        return $.NullPointerException$(null, $.CTC0);
      else {
        if (!$.boolConversionCheck($.contains$1(message, ' is not a function')))
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if ($.boolConversionCheck(t1))
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    }
    return $.ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if ($.boolConversionCheck(typeof message === 'string' && $.boolConversionCheck($.contains$1(message, 'call stack'))))
      return $.StackOverflowException$();
    return $.ArgumentError$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if ($.boolConversionCheck(typeof message === 'string' && message === 'too much recursion'))
      return $.StackOverflowException$();
  return ex;
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.intTypeCheck($.add(t1, 1));
  var t2 = new $._ReceivePortImpl($.intTypeCheck(t1), null);
  t2._ReceivePortImpl$0();
  return t2;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper($.listTypeCheck($.listTypeCheck(list)));
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort($.intTypeCheck(_workerId), $.intTypeCheck(_receivePortId), isolateId);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  $.intTypeCheck(endIndex);
  if (endIndex !== (endIndex | 0))
    return $.Arrays_indexOf$bailout(2, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex)); i = $.intTypeCheck($.add(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element)))
      return i;
  }
  return -1;
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.Collections_filter = function(source, destination, f) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(source); $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2)))
      destination.push(t2);
  }
  return destination;
};

$.Message$OptionSelected = function(hash) {
  $.intTypeCheck(hash);
  var t1 = new $.Message(128, null, null, $.intTypeCheck(null));
  t1.Message$OptionSelected$1(hash);
  return t1;
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number' && Math.floor(value) === value)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'int'));
};

$._Collections_filter = function(source, destination, f) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f);
  for (var t1 = $.iterator(source); $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2)))
      destination.push(t2);
  }
  return destination;
};

$.propertyTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.contains = function(userAgent, name$) {
  return userAgent.indexOf(name$) !== -1;
};

$.Message$TextResult = function(str) {
  $.stringTypeCheck(str);
  var t1 = new $.Message0(4, null, null, $.intTypeCheck(null));
  t1.Message$TextResult$1(str);
  return t1;
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$.Random_Random = function(seed) {
  return $.CTC16;
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result === null)
    return;
  return result;
};

$.endsWith = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.endsWith$1(other);
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if ($.boolConversionCheck(otherLength > receiverLength))
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.assert = function(condition) {
  if (typeof condition === 'function' || typeof condition === 'object' && condition !== null && !!condition.is$Function)
    condition = condition.call$0();
  if (!(typeof condition === 'boolean'))
    throw $.$$throw($.TypeErrorImplementation$(condition, 'bool'));
  if (!condition)
    throw $.$$throw($.AssertionError$());
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.CombatMoveType_defaultOnSufferMeetWeapon = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$target().report$3$object$positive('<subject> meet<s> <object\'s> move with <subject\'s> ' + $.S(e.get$target().get$weapon().get$name()) + ' (' + $.S(e.get$chance()) + ')', e.get$performer(), true);
};

$._IsolateNatives__startWorker = function(functionName, uri, replyPort) {
  if ($.boolConversionCheck($._globalState().get$isWorker()))
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'spawn-worker', 'functionName', functionName, 'uri', uri, 'replyPort', replyPort])));
  else
    $._IsolateNatives__spawnWorker(functionName, uri, replyPort);
};

$.stringLastIndexOfUnchecked = function(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'function' || typeof value === 'object' && value !== null && !!value.is$Function)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'Function'));
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.CombatCallbackHandler$ = function(_this) {
  var t1 = new $.CombatCallbackHandler($.propertyTypeCheck(_this, 'is$GameEntity'), null);
  t1.CombatCallbackHandler$1(_this);
  return t1;
};

$.DualPivotQuicksort__doSort = function(a, left, right, compare) {
  $.listTypeCheck(a);
  $.intTypeCheck(left);
  $.intTypeCheck(right);
  $.functionTypeCheck(compare);
  if ($.boolConversionCheck($.le($.sub(right, left), 32)))
    $.DualPivotQuicksort_insertionSort_(a, left, right, compare);
  else
    $.DualPivotQuicksort__dualPivotQuicksort(a, left, right, compare);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(c, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0());) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.CombatMoveType_defaultOnSufferDeflect = function(_this, e) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  $.propertyTypeCheck(e, 'is$CombatEvent');
  e.get$performer().report$3$object$positive('<subject> hit<s> (' + $.S(e.get$chanceAll()) + ')', e.get$target(), true);
  e.get$performer().report$3$negative$object('<subject\'s> ' + $.S(e.get$weapon().get$name()) + ' bounces off <object\'s> ' + $.S(e.get$armor().get$name()), true, e.get$target());
  var t1 = e.get$target();
  t1.set$stance($.sub(t1.get$stance(), _this.get$stanceDamage()));
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'string')
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, 'String'));
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$._Lists_lastIndexOf = function(a, element, startIndex) {
  if (startIndex !== (startIndex | 0))
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  $.listTypeCheck(a);
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $._Lists_lastIndexOf$bailout(2, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  var t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (var i = startIndex; $.boolConversionCheck($.ge(i, 0)); i = $.intTypeCheck($.sub(i, 1))) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element)))
      return i;
  }
  return -1;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.Actor_defaultOnAlmostDying = function(_this) {
  $.propertyTypeCheck(_this, 'is$Actor');
  $.add$1($.index(_this.get$on(), 'update'), new $.Actor_defaultOnAlmostDying_anon());
  _this.report$2$negative('<subject> <is> badly hurt', true);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.callTypeCheck(m, 'is$Map');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting);
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean');
  else
    t1 = true;
  return t1;
};

$._Deserializer_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean');
  else
    t1 = true;
  return t1;
};

$.Message$ShowChoices = function(choices, prependText, endOfPage) {
  $.listTypeCheck(choices);
  $.stringTypeCheck(prependText);
  var t1 = new $.Message0(64, null, null, $.intTypeCheck(null));
  t1.Message$ShowChoices$3(choices, prependText, endOfPage);
  return t1;
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$.propertySet = function(object, property, value) {
  object[$.stringTypeCheck(property)] = value;
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._IsolateNatives__consoleLog = function(msg) {
$globalThis.console.log(msg);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $.KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, {'K': K, 'V': V});
  return t1;
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function(K, V) {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  $.setRuntimeTypeInfo(t1, {'K': K, 'V': V});
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.FutureImpl$ = function(T) {
  var t1 = new $.FutureImpl(false, null, null, null, false, [], [], []);
  $.setRuntimeTypeInfo(t1, {'T': T});
  return t1;
};

$._DOMWindowCrossFrameImpl__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrameImpl$(w);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property),
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$.CombatMoveType_defaultCanContinue = function(_this, performer, target) {
  $.propertyTypeCheck(_this, 'is$CombatMoveType');
  return true;
};

$._Manager$ = function() {
  var t1 = $.boolTypeCheck(null);
  t1 = new $._Manager(0, 0, 1, null, null, null, t1, t1, t1, $.callTypeCheck(null, 'is$Map'), $.callTypeCheck(null, 'is$_ManagerStub'), $.callTypeCheck(null, 'is$Map'));
  t1._Manager$0();
  return t1;
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$._Lists_lastIndexOf$bailout = function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var a = env0;
      var element = env1;
      var startIndex = env2;
      break;
    case 2:
      a = env0;
      element = env1;
      startIndex = env2;
      break;
    case 3:
      a = env0;
      element = env1;
      startIndex = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.listTypeCheck(a);
    case 2:
      state = 0;
      if ($.boolConversionCheck($.lt(startIndex, 0)))
        return -1;
      if ($.boolConversionCheck($.ge(startIndex, $.get$length(a))))
        startIndex = $.intTypeCheck($.sub($.get$length(a), 1));
    case 3:
      state = 0;
      for (var i = startIndex; $.boolConversionCheck($.ge(i, 0)); i = $.intTypeCheck($.sub(i, 1)))
        if ($.boolConversionCheck($.eq($.index(a, i), element)))
          return i;
      return -1;
  }
};

$.Arrays_lastIndexOf$bailout = function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var a = env0;
      var element = env1;
      var startIndex = env2;
      break;
    case 2:
      a = env0;
      element = env1;
      startIndex = env2;
      break;
    case 3:
      a = env0;
      element = env1;
      startIndex = env2;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(a);
    case 1:
      state = 0;
      $.intTypeCheck(startIndex);
    case 2:
      state = 0;
      if ($.boolConversionCheck($.lt(startIndex, 0)))
        return -1;
      if ($.boolConversionCheck($.ge(startIndex, $.get$length(a))))
        startIndex = $.intTypeCheck($.sub($.get$length(a), 1));
    case 3:
      state = 0;
      for (var i = startIndex; $.boolConversionCheck($.ge(i, 0)); i = $.intTypeCheck($.sub(i, 1)))
        if ($.boolConversionCheck($.eq($.index(a, i), element)))
          return i;
      return -1;
  }
};

$.Arrays_indexOf$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var a = env0;
      var element = env1;
      var startIndex = env2;
      var endIndex = env3;
      break;
    case 2:
      a = env0;
      element = env1;
      startIndex = env2;
      endIndex = env3;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(a);
    case 1:
      state = 0;
      $.intTypeCheck(endIndex);
    case 2:
      state = 0;
      if ($.ge(startIndex, $.get$length(a)))
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex)); i = $.intTypeCheck($.add(i, 1)))
        if ($.boolConversionCheck($.eq($.index(a, i), element)))
          return i;
      return -1;
  }
};

$._Lists_getRange$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var a = env0;
      var start = env1;
      var length$ = env2;
      var accumulator = env3;
      break;
    case 2:
      a = env0;
      start = env1;
      length$ = env2;
      accumulator = env3;
      break;
    case 3:
      a = env0;
      start = env1;
      accumulator = env2;
      end = env3;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.listTypeCheck(a);
    case 2:
      state = 0;
      if ($.boolConversionCheck($.lt(length$, 0)))
        throw $.$$throw($.ArgumentError$('length'));
      if ($.boolConversionCheck($.lt(start, 0)))
        throw $.$$throw($.IndexOutOfRangeException$(start));
      var end = $.add(start, length$);
      $.intTypeCheck(end);
    case 3:
      state = 0;
      if ($.boolConversionCheck($.gt(end, $.get$length(a))))
        throw $.$$throw($.IndexOutOfRangeException$(end));
      for (var i = start; $.boolConversionCheck($.lt(i, end)); i = $.intTypeCheck($.add(i, 1)))
        accumulator.push($.index(a, i));
      return accumulator;
  }
};

$.Storyline_resolveRandoms$bailout = function(state, env0, env1, env2, env3, env4, env5, env6) {
  switch (state) {
    case 1:
      var str = env0;
      break;
    case 2:
      str = env0;
      startTagIndex = env1;
      break;
    case 3:
      str = env0;
      indexes = env1;
      i = env2;
      startTagIndex = env3;
      break;
    case 4:
      str = env0;
      lastIndex = env1;
      indexes = env2;
      depth = env3;
      i = env4;
      startTagIndex = env5;
      break;
    case 5:
      str = env0;
      depth = env1;
      indexes = env2;
      i = env3;
      startTagIndex = env4;
      break;
    case 6:
      str = env0;
      indexes = env1;
      startTagIndex = env2;
      i = env3;
      depth = env4;
      break;
    case 7:
      str = env0;
      indexes = env1;
      startTagIndex = env2;
      lastIndex = env3;
      depth = env4;
      i = env5;
      break;
    case 8:
      str = env0;
      indexes = env1;
      lastIndex = env2;
      startTagIndex = env3;
      endTagIndex = env4;
      break;
    case 9:
      str = env0;
      indexes = env1;
      lastIndex = env2;
      startTagIndex = env3;
      endTagIndex = env4;
      t1 = env5;
      numOptions = env6;
      break;
    case 10:
      str = env0;
      indexes = env1;
      lastIndex = env2;
      endTagIndex = env3;
      t3 = env4;
      choice = env5;
      strBuf = env6;
      break;
  }
  switch (state) {
    case 0:
      $.stringTypeCheck(str);
    case 1:
      state = 0;
      var startTagIndex = $.indexOf$1(str, '{');
      $.intTypeCheck(startTagIndex);
    case 2:
      state = 0;
    default:
      if (state === 10 || state === 9 || state === 8 || state === 7 || state === 6 || state === 5 || state === 4 || state === 3 || state === 0 && $.boolConversionCheck(!(startTagIndex === -1) && $.boolConversionCheck($.lt(startTagIndex, $.sub($.get$length(str), 1)))))
        switch (state) {
          case 0:
            var indexes = $.ListImplementation_List(null, 'int');
            $.setRuntimeTypeInfo(indexes, {'E': 'int'});
            indexes.push(startTagIndex);
            var i = $.add(startTagIndex, 1);
            $.intTypeCheck(i);
          case 3:
            state = 0;
            var lastIndex = null;
            var depth = 1;
          default:
            L0:
              while (true)
                switch (state) {
                  case 0:
                  case 4:
                    state = 0;
                    var endTagIndex = null;
                    if (!$.boolConversionCheck($.lt(i, $.get$length(str))))
                      break L0;
                    var ch = $.stringTypeCheck($.index(str, i));
                  default:
                    if (state === 5 || state === 0 && ch === '{')
                      switch (state) {
                        case 0:
                          depth = $.add(depth, 1);
                          $.intTypeCheck(depth);
                        case 5:
                          state = 0;
                      }
                    else
                      switch (state) {
                        case 0:
                        case 6:
                          if (state === 0 && $.boolConversionCheck(ch === '|' && depth === 1))
                            indexes.push(i);
                          else
                            switch (state) {
                              case 0:
                              case 6:
                                if (state === 6 || state === 0 && ch === '}')
                                  switch (state) {
                                    case 0:
                                      depth = $.sub(depth, 1);
                                      $.intTypeCheck(depth);
                                    case 6:
                                      state = 0;
                                      if (depth === 0) {
                                        indexes.push(i);
                                        endTagIndex = i;
                                        lastIndex = endTagIndex;
                                        break L0;
                                      }
                                  }
                            }
                      }
                    lastIndex = i;
                    i = $.add(i, 1);
                    $.intTypeCheck(i);
                  case 7:
                    state = 0;
                }
          case 8:
            state = 0;
            var numOptions = indexes.length - 1;
          case 9:
          case 10:
            if (state === 10 || state === 9 || state === 0 && $.boolConversionCheck(numOptions > 1))
              switch (state) {
                case 0:
                  var t1 = $.Random_Random(null).nextDouble$0();
                case 9:
                  state = 0;
                  var choice = $.toInt($.floor($.mul(t1, numOptions)));
                  $.intTypeCheck(choice);
                  var strBuf = $.StringBuffer_StringBuffer('');
                  $.propertyTypeCheck(strBuf, 'is$StringBuffer');
                  $.add$1(strBuf, $.substring$2(str, 0, startTagIndex));
                  if (choice !== (choice | 0))
                    throw $.iae(choice);
                  if (choice < 0 || choice >= indexes.length)
                    throw $.ioore(choice);
                  var t3 = indexes[choice];
                case 10:
                  state = 0;
                  t3 = $.add(t3, 1);
                  var t5 = choice + 1;
                  if (t5 !== (t5 | 0))
                    throw $.iae(t5);
                  if (t5 < 0 || t5 >= indexes.length)
                    throw $.ioore(t5);
                  $.add$1(strBuf, $.Storyline_resolveRandoms($.stringTypeCheck($.substring$2(str, t3, indexes[t5]))));
                  $.add$1(strBuf, $.substring$2(str, $.add(endTagIndex, 1), $.get$length(str)));
                  t1 = $.sub($.get$length(str), 1);
                  if (lastIndex == null ? t1 == null : lastIndex === t1)
                    return $.toString(strBuf);
                  else
                    return $.Storyline_resolveRandoms($.toString(strBuf));
              }
            else {
              t1 = $.sub($.get$length(str), 1);
              if (lastIndex == null ? t1 == null : lastIndex === t1)
                return str;
              else
                return $.S($.substring$2(str, 0, $.add(lastIndex, 1))) + $.S($.Storyline_resolveRandoms($.substring$1(str, $.add(lastIndex, 1))));
            }
        }
      else
        return str;
  }
};

$.DualPivotQuicksort__dualPivotQuicksort$bailout = function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
  switch (state) {
    case 1:
      var a = env0;
      var left = env1;
      var right = env2;
      var compare = env3;
      break;
    case 2:
      a = env0;
      left = env1;
      right = env2;
      compare = env3;
      el2 = env4;
      index1 = env5;
      index5 = env6;
      el4 = env7;
      less = env8;
      break;
    case 3:
      a = env0;
      left = env1;
      right = env2;
      compare = env3;
      el2 = env4;
      great = env5;
      index1 = env6;
      index5 = env7;
      el4 = env8;
      less = env9;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(a);
    case 1:
      state = 0;
      $.functionTypeCheck(compare);
      $.assert($.gt($.sub(right, left), 32));
      var sixth = $.intTypeCheck($.tdiv($.add($.sub(right, left), 1), 6));
      var index1 = $.add(left, sixth);
      $.intTypeCheck(index1);
      var index5 = $.sub(right, sixth);
      $.intTypeCheck(index5);
      var index3 = $.intTypeCheck($.tdiv($.add(left, right), 2));
      var index2 = $.intTypeCheck($.sub(index3, sixth));
      var index4 = $.intTypeCheck($.add(index3, sixth));
      var el1 = $.index(a, index1);
      var el2 = $.index(a, index2);
      var el3 = $.index(a, index3);
      var el4 = $.index(a, index4);
      var el5 = $.index(a, index5);
      if ($.boolConversionCheck($.gt(compare.call$2(el1, el2), 0))) {
        var t0 = el1;
        el1 = el2;
        el2 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el4, el5), 0))) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el1, el3), 0))) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el2, el3), 0))) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el1, el4), 0))) {
        t0 = el1;
        el1 = el4;
        el4 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el3, el4), 0))) {
        t0 = el3;
        el3 = el4;
        el4 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el2, el5), 0))) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el2, el3), 0))) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.boolConversionCheck($.gt(compare.call$2(el4, el5), 0))) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      $.indexSet(a, index1, el1);
      $.indexSet(a, index3, el3);
      $.indexSet(a, index5, el5);
      $.indexSet(a, index2, $.index(a, left));
      $.indexSet(a, index4, $.index(a, right));
      var less = $.add(left, 1);
      $.intTypeCheck(less);
    case 2:
      state = 0;
      var great = $.sub(right, 1);
      $.intTypeCheck(great);
    case 3:
      state = 0;
      var pivots_are_equal = $.boolTypeCheck($.eq(compare.call$2(el2, el4), 0));
      if (pivots_are_equal)
        for (var k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
          var ak = $.index(a, k);
          var comp = $.intTypeCheck(compare.call$2(ak, el2));
          if (comp === 0)
            continue;
          if ($.boolConversionCheck($.lt(comp, 0))) {
            if (!(k == null ? less == null : k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            less = $.intTypeCheck($.add(less, 1));
          } else
            for (; true;) {
              comp = $.intTypeCheck(compare.call$2($.index(a, great), el2));
              if ($.boolConversionCheck($.gt(comp, 0))) {
                great = $.intTypeCheck($.sub(great, 1));
                continue;
              } else if ($.boolConversionCheck($.lt(comp, 0))) {
                $.indexSet(a, k, $.index(a, less));
                var less0 = $.intTypeCheck($.add(less, 1));
                $.indexSet(a, less, $.index(a, great));
                var great0 = $.intTypeCheck($.sub(great, 1));
                $.indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                $.indexSet(a, k, $.index(a, great));
                great0 = $.intTypeCheck($.sub(great, 1));
                $.indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
        }
      else
        for (k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
          ak = $.index(a, k);
          if ($.boolConversionCheck($.lt($.intTypeCheck(compare.call$2(ak, el2)), 0))) {
            if (!(k == null ? less == null : k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            less = $.intTypeCheck($.add(less, 1));
          } else if ($.boolConversionCheck($.gt($.intTypeCheck(compare.call$2(ak, el4)), 0)))
            for (; true;)
              if ($.boolConversionCheck($.gt($.intTypeCheck(compare.call$2($.index(a, great), el4)), 0))) {
                great = $.intTypeCheck($.sub(great, 1));
                if ($.boolConversionCheck($.lt(great, k)))
                  break;
                continue;
              } else {
                if ($.boolConversionCheck($.lt($.intTypeCheck(compare.call$2($.index(a, great), el2)), 0))) {
                  $.indexSet(a, k, $.index(a, less));
                  less0 = $.intTypeCheck($.add(less, 1));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = $.intTypeCheck($.sub(great, 1));
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = $.intTypeCheck($.sub(great, 1));
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      $.indexSet(a, left, $.index(a, $.sub(less, 1)));
      $.indexSet(a, $.sub(less, 1), el2);
      $.indexSet(a, right, $.index(a, $.add(great, 1)));
      $.indexSet(a, $.add(great, 1), el4);
      $.DualPivotQuicksort__doSort(a, left, $.sub(less, 2), compare);
      $.DualPivotQuicksort__doSort(a, $.add(great, 2), right, compare);
      if ($.boolConversionCheck(pivots_are_equal))
        return;
      if ($.boolConversionCheck($.boolConversionCheck($.lt(less, index1)) && $.boolConversionCheck($.gt(great, index5)))) {
        for (; $.boolConversionCheck($.eq(compare.call$2($.index(a, less), el2), 0));)
          less = $.intTypeCheck($.add(less, 1));
        for (; $.boolConversionCheck($.eq(compare.call$2($.index(a, great), el4), 0));)
          great = $.intTypeCheck($.sub(great, 1));
        for (k = less; $.boolConversionCheck($.le(k, great)); k = $.intTypeCheck($.add(k, 1))) {
          ak = $.index(a, k);
          if ($.intTypeCheck(compare.call$2(ak, el2)) === 0) {
            if (!(k == null ? less == null : k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            less = $.intTypeCheck($.add(less, 1));
          } else if ($.intTypeCheck(compare.call$2(ak, el4)) === 0)
            for (; true;)
              if ($.intTypeCheck(compare.call$2($.index(a, great), el4)) === 0) {
                great = $.intTypeCheck($.sub(great, 1));
                if ($.boolConversionCheck($.lt(great, k)))
                  break;
                continue;
              } else {
                if ($.boolConversionCheck($.lt($.intTypeCheck(compare.call$2($.index(a, great), el2)), 0))) {
                  $.indexSet(a, k, $.index(a, less));
                  less0 = $.intTypeCheck($.add(less, 1));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = $.intTypeCheck($.sub(great, 1));
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = $.intTypeCheck($.sub(great, 1));
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        $.DualPivotQuicksort__doSort(a, less, great, compare);
      } else
        $.DualPivotQuicksort__doSort(a, less, great, compare);
  }
};

$.Futures_wait$bailout = function(state, futures, t1) {
  if ($.boolConversionCheck($.isEmpty(futures)))
    return $.Future_Future$immediate($.CTC0, 'List');
  var completer = $.propertyTypeCheck($.Completer_Completer('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = $.intTypeCheck($.get$length(futures));
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.boolConversionCheck($.lt(i, $.get$length(futures))); i = $.intTypeCheck($.add(i, 1))) {
    var future = $.propertyTypeCheck($.index(futures, i), 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.countBits$bailout = function(state, x) {
  for (var count = 0; $.boolConversionCheck($.gt(x, 0)); count = $.intTypeCheck($.add(count, 1)))
    x = $.intTypeCheck($.and(x, $.sub(x, 1)));
  return count;
};

$.StringImplementation__toJsStringArray$bailout = function(state, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$)); i = $.intTypeCheck($.add(i, 1))) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.DualPivotQuicksort_insertionSort_$bailout = function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var a = env0;
      var left = env1;
      var right = env2;
      var compare = env3;
      break;
    case 2:
      a = env0;
      left = env1;
      right = env2;
      compare = env3;
      break;
    case 3:
      a = env0;
      left = env1;
      right = env2;
      compare = env3;
      i = env4;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.listTypeCheck(a);
    case 2:
      state = 0;
      $.functionTypeCheck(compare);
      var i = $.add(left, 1);
      $.intTypeCheck(i);
    case 3:
      state = 0;
      for (; $.boolConversionCheck($.le(i, right)); i = $.intTypeCheck($.add(i, 1))) {
        var el = $.index(a, i);
        var j = i;
        while (true) {
          if (!$.boolConversionCheck($.boolConversionCheck($.gt(j, left)) && $.boolConversionCheck($.gt(compare.call$2($.index(a, $.sub(j, 1)), el), 0))))
            break;
          $.indexSet(a, j, $.index(a, $.sub(j, 1)));
          j = $.intTypeCheck($.sub(j, 1));
        }
        $.indexSet(a, j, el);
      }
  }
};

$.Actor_defaultOnAlmostDying.call$1 = $.Actor_defaultOnAlmostDying;
$.Actor_defaultOnAlmostDying.$name = "Actor_defaultOnAlmostDying";
$.WeaponType_defaultOnSufferPierced.call$2 = $.WeaponType_defaultOnSufferPierced;
$.WeaponType_defaultOnSufferPierced.$name = "WeaponType_defaultOnSufferPierced";
$.Actor_defaultOnDie.call$1 = $.Actor_defaultOnDie;
$.Actor_defaultOnDie.$name = "Actor_defaultOnDie";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.CombatMoveType_defaultOnSufferBlock.call$2 = $.CombatMoveType_defaultOnSufferBlock;
$.CombatMoveType_defaultOnSufferBlock.$name = "CombatMoveType_defaultOnSufferBlock";
$.CombatMoveType_defaultOnSufferDodge.call$2 = $.CombatMoveType_defaultOnSufferDodge;
$.CombatMoveType_defaultOnSufferDodge.$name = "CombatMoveType_defaultOnSufferDodge";
$.CombatMoveType_defaultOnStart.call$2 = $.CombatMoveType_defaultOnStart;
$.CombatMoveType_defaultOnStart.$name = "CombatMoveType_defaultOnStart";
$.CombatMoveType_defaultOnSufferMeetWeapon.call$2 = $.CombatMoveType_defaultOnSufferMeetWeapon;
$.CombatMoveType_defaultOnSufferMeetWeapon.$name = "CombatMoveType_defaultOnSufferMeetWeapon";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.CombatMoveType_defaultOnSufferDeflect.call$2 = $.CombatMoveType_defaultOnSufferDeflect;
$.CombatMoveType_defaultOnSufferDeflect.$name = "CombatMoveType_defaultOnSufferDeflect";
$.createScripter.call$0 = $.createScripter;
$.createScripter.$name = "createScripter";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.CombatMoveType_defaultOnHit.call$2 = $.CombatMoveType_defaultOnHit;
$.CombatMoveType_defaultOnHit.$name = "CombatMoveType_defaultOnHit";
$.CombatMoveType_defaultOnCancel.call$2 = $.CombatMoveType_defaultOnCancel;
$.CombatMoveType_defaultOnCancel.$name = "CombatMoveType_defaultOnCancel";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC28 = 'structured clone of ArrayBufferView';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC29 = '^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$';
$.CTC30 = false;
$.CTC22 = new Isolate.$isolateProperties.JSSyntaxRegExp('^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$', false, false);
$.CTC16 = new Isolate.$isolateProperties._Random();
$.CTC31 = '^#[_a-zA-Z]\\w*$';
$.CTC23 = new Isolate.$isolateProperties.JSSyntaxRegExp('^#[_a-zA-Z]\\w*$', false, false);
$.CTC32 = 'structured clone of ArrayBuffer';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC13 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC33 = 'it';
$.CTC34 = 'its';
$.CTC35 = 'itself';
$.CTC15 = new Isolate.$isolateProperties.Pronoun('it', 'it', 'its', 'itself');
$.CTC36 = 'Cannot sort immutable List.';
$.CTC18 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot sort immutable List.');
$.CTC37 = 'structured clone of Date';
$.CTC2 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC38 = 'TODO(jacobr): should we impl?';
$.CTC25 = new Isolate.$isolateProperties.UnsupportedOperationException('TODO(jacobr): should we impl?');
$.CTC27 = new Isolate.$isolateProperties.Object();
$.CTC39 = 'Cannot add to immutable List.';
$.CTC1 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot add to immutable List.');
$.CTC40 = '<subject> fall<s> to the ground';
$.CTC41 = '<subject> fall<s> to <subjectPronoun\'s> knees';
$.CTC42 = '<subject> <is> almost ready to fall';
$.CTC43 = '<subject> get<s> off balance';
$.CTC44 = '<subject> lose<s> <subjectPronoun\'s> professional stance';
$.CTC45 = '';
$.CTC21 = Isolate.makeConstantList(['<subject> fall<s> to the ground', '<subject> fall<s> to <subjectPronoun\'s> knees', '<subject> <is> almost ready to fall', '<subject> get<s> off balance', '<subject> lose<s> <subjectPronoun\'s> professional stance', '']);
$.CTC46 = '[-[\\]{}()*+?.,\\\\^$|#\\s]';
$.CTC12 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC47 = 'you';
$.CTC48 = 'your';
$.CTC49 = 'yourself';
$.CTC17 = new Isolate.$isolateProperties.Pronoun('you', 'you', 'your', 'yourself');
$.CTC50 = 'structured clone of Blob';
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC51 = 'structured clone of RegExp';
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC52 = '<subject> get<s> to <subjectPronoun\'s> knees';
$.CTC53 = '<subject> stand<s> up';
$.CTC54 = '<subject> regain<s> some balance';
$.CTC55 = '<subject\'s> stance gets firm';
$.CTC56 = '<subject> go<es> into a perfect combat stance';
$.CTC20 = Isolate.makeConstantList(['', '<subject> get<s> to <subjectPronoun\'s> knees', '<subject> stand<s> up', '<subject> regain<s> some balance', '<subject\'s> stance gets firm', '<subject> go<es> into a perfect combat stance']);
$.CTC57 = 'Invalid list length';
$.CTC26 = new Isolate.$isolateProperties.ArgumentError('Invalid list length');
$.CTC58 = 'he';
$.CTC59 = 'him';
$.CTC60 = 'his';
$.CTC61 = 'himself';
$.CTC19 = new Isolate.$isolateProperties.Pronoun('he', 'him', 'his', 'himself');
$.CTC62 = 'structured clone of File';
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC63 = 'structured clone of other type';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC64 = 'structured clone of ImageData';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ImageData');
$.CTC65 = null;
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC10 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC14 = new Isolate.$isolateProperties.EmptyQueueException();
$.CTC66 = 'Cannot removeLast on immutable List.';
$.CTC11 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeLast on immutable List.');
$.CTC24 = new Isolate.$isolateProperties.UnsupportedOperationException('');
$.CombatMoveType_MOVE_TRG_HEAD = 2;
$.CombatMoveType_MOVE_PRI_DAMAGE = 262144;
$.CombatMoveType_MOVE_EFF_STANCE = 65536;
$.Uri__COMPONENT_PATH = 5;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_TAB = 9;
$.CombatMoveType_MOVE_FRM_FRONT = 128;
$._JsonParser_FALSE_STRING = 'false';
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC13;
$.CombatMoveType_MOVE_TRG_ARMS = 8;
$._BufferingSendPort__idCount = 0;
$._JsonParser_CHAR_N = 110;
$._JsonParser_DOT = 46;
$._JsonParser_QUOTE = 34;
$.CombatMoveType_MOVE_TRG_NECK = 4;
$.CombatMoveType_MOVE_DIR_DEFENSIVE = 1048576;
$._JsonParser_CHAR_E = 101;
$.Uri__COMPONENT_PORT = 4;
$._JsonParser_MINUS = 45;
$._JsonParser_CHAR_2 = 50;
$.CombatMoveType_MOVE_TRG_BODY = 16;
$.CombatMoveType_MOVE_FRM_LEFT = 512;
$._lazyPort = null;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_CHAR_3 = 51;
$.Uri__COMPONENT_SCHEME = 1;
$._JsonParser_COLON = 58;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$.Pronoun_IT = Isolate.$isolateProperties.CTC15;
$._JsonParser_SPACE = 32;
$._JsonParser_CHAR_U = 117;
$.GLOBAL_HASH_I = 0;
$.Uri__splitRe = Isolate.$isolateProperties.CTC22;
$._JsonParser_NUMBER_LITERAL = 45;
$.CombatMoveType_MOVE_FRM_RIGHT = 1024;
$.Uri__COMPONENT_FRAGMENT = 7;
$._ReceivePortImpl__nextFreeId = 1;
$._JsonParser_tokens = null;
$._JsonParser_BACKSPACE = 8;
$._JsonParser_CHAR_1 = 49;
$.CombatMoveType_MOVE_EFF_ALL = 98304;
$.Uri__COMPONENT_DOMAIN = 3;
$._JsonParser_RBRACKET = 93;
$.CombatMoveType_MOVE_DIR_OFFENSIVE = 524288;
$.Uri__COMPONENT_QUERY_DATA = 6;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_5 = 53;
$.Storyline_VERY_LONG_TIME = 1000;
$.Storyline_SHORT_TIME = 4;
$._getTypeNameOf = null;
$._SPAWNED_SIGNAL = 'spawned';
$.CombatMoveType_MOVE_EFF_HITPOINTS = 32768;
$._JsonParser_CHAR_B = 98;
$.CombatMoveType_MOVE_LMB_LEG = 4096;
$._JsonParser_CARRIAGE_RETURN = 13;
$.CombatMoveType_MOVE_TRG_WAIST = 32;
$.DualPivotQuicksort__INSERTION_SORT_THRESHOLD = 32;
$._JsonParser_CHAR_0 = 48;
$.Primitives_hashCodeSeed = 0;
$.CombatMoveType_MOVE_FRM_BEHIND = 256;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_CHAR_R = 114;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_9 = 57;
$.CombatMoveType_MOVE_FRM_ALL = 1920;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.CombatMoveType_MOVE_TRG_ALL = 126;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_LBRACE = 123;
$.Pronoun_HE = Isolate.$isolateProperties.CTC19;
$.CombatMoveType_MOVE_PRI_QUICK = 131072;
$._JsonParser_NEW_LINE = 10;
$.Uri__COMPONENT_USER_INFO = 2;
$._JsonParser_WHITESPACE = 32;
$._TimerFactory__factory = null;
$._cachedBrowserPrefix = null;
$._JsonParser_CHAR_4 = 52;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.CombatMoveType_MOVE_LMB_HAND = 2048;
$._JsonParser_LAST_ASCII = 125;
$._JsonParser_CHAR_T = 116;
$._JsonParser_NULL_STRING = 'null';
$.CombatMoveType_MOVE_TRG_LEGS = 64;
$._JsonParser_CHAR_F = 102;
$.Pronoun_YOU = Isolate.$isolateProperties.CTC17;
$._JsonParser_COMMA = 44;
$._JsonParser_LBRACKET = 91;
$._JsonParser_RBRACE = 125;
$.Combat_MAX_MOVES_PRESENTED = 50;
$._JsonParser_PLUS = 43;
$._JsonParser_TRUE_STRING = 'true';
$._JsonParser_FORM_FEED = 12;
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, fields, methods) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], methods);
  }
  for (var method in methods) {
    $.dynamicFunction(method)[cls] = methods[method];
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$_DOMFileSystemSyncImpl: function() { return false; },
 is$_AudioContextImpl: function() { return false; },
 is$_SpeechGrammarListImpl: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$_IDBDatabaseImpl: function() { return false; },
 is$_NodeFilterImpl: function() { return false; },
 is$StyleSheet: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$SVGAnimateTransformElement: function() { return false; },
 is$_TouchListImpl: function() { return false; },
 is$_SVGPathSegImpl: function() { return false; },
 is$_EventImpl: function() { return false; },
 hashCode$0: function() { return $.hashCodeForNativeObject(this); },
 is$_BarInfoImpl: function() { return false; },
 is$MediaController: function() { return false; },
 is$_SVGAngleImpl: function() { return false; },
 is$SVGTransform: function() { return false; },
 is$_MediaErrorImpl: function() { return false; },
 is$SVGElementInstance: function() { return false; },
 is$CanvasRenderingContext2D: function() { return false; },
 is$_SpeechInputResultImpl: function() { return false; },
 is$_MediaStreamTrackListImpl: function() { return false; },
 is$HttpRequestUpload: function() { return false; },
 is$_StyleMediaImpl: function() { return false; },
 is$_SVGTransformImpl: function() { return false; },
 is$_MediaListImpl: function() { return false; },
 is$_SVGAnimatedNumberImpl: function() { return false; },
 is$Event: function() { return false; },
 is$_DOMPluginArrayImpl: function() { return false; },
 is$_SourceBufferImpl: function() { return false; },
 is$MediaStream: function() { return false; },
 is$_IDBObjectStoreImpl: function() { return false; },
 is$SpeechRecognitionResult: function() { return false; },
 is$_SVGAnimatedLengthImpl: function() { return false; },
 is$_RTCSessionDescriptionImpl: function() { return false; },
 is$SpeechInputResult: function() { return false; },
 is$Location: function() { return false; },
 is$_WorkerContextImpl: function() { return false; },
 is$_SVGStringListImpl: function() { return false; },
 is$_DOMErrorImpl: function() { return false; },
 is$_JavaScriptCallFrameImpl: function() { return false; },
 is$Node: function() { return false; },
 is$_SVGAnimatedIntegerImpl: function() { return false; },
 is$_LocalHistoryImpl: function() { return false; },
 is$_TextTrackImpl: function() { return false; },
 is$Touch: function() { return false; },
 is$_SVGRectImpl: function() { return false; },
 is$_TextTrackListImpl: function() { return false; },
 is$_Uint8ArrayImpl: function() { return false; },
 is$_DOMMimeTypeArrayImpl: function() { return false; },
 is$_CryptoImpl: function() { return false; },
 is$_SVGUseElementImpl: function() { return false; },
 is$MediaStreamTrack: function() { return false; },
 is$_SVGAnimatedEnumerationImpl: function() { return false; },
 is$EntrySync: function() { return false; },
 is$SourceBuffer: function() { return false; },
 is$_CSSStyleDeclarationImpl: function() { return false; },
 is$_CSSStyleSheetImpl: function() { return false; },
 is$_TextTrackCueListImpl: function() { return false; },
 is$SVGAnimatedNumber: function() { return false; },
 is$_DOMSettableTokenListImpl: function() { return false; },
 is$_SVGNumberListImpl: function() { return false; },
 is$CSSRule: function() { return false; },
 is$_TouchImpl: function() { return false; },
 is$_SVGAnimatedLengthListImpl: function() { return false; },
 is$_ClipboardImpl: function() { return false; },
 is$_SVGAnimatedNumberListImpl: function() { return false; },
 is$DOMSettableTokenList: function() { return false; },
 is$_SVGAnimatedBooleanImpl: function() { return false; },
 is$_NamedNodeMapImpl: function() { return false; },
 is$_SVGAnimateTransformElementImpl: function() { return false; },
 is$_SVGNumberImpl: function() { return false; },
 is$_MediaStreamImpl: function() { return false; },
 is$Blob: function() { return false; },
 is$Uint8Array: function() { return false; },
 is$_DocumentImpl: function() { return false; },
 is$_AudioBufferImpl: function() { return false; },
 is$SVGAnimatedLength: function() { return false; },
 is$_Uint8ClampedArrayImpl: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$_MediaControllerImpl: function() { return false; },
 is$TextTrackCue: function() { return false; },
 is$TextTrack: function() { return false; },
 is$_SVGElementImpl: function() { return false; },
 is$Map: function() { return false; },
 is$TableSectionElement: function() { return false; },
 is$_FileErrorImpl: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$_DOMPluginImpl: function() { return false; },
 is$_NodeImpl: function() { return false; },
 is$_Float32ArrayImpl: function() { return false; },
 is$Animation: function() { return false; },
 is$_WorkerNavigatorImpl: function() { return false; },
 is$_CSSRuleImpl: function() { return false; },
 is$HeadElement: function() { return false; },
 is$_SVGTransformListImpl: function() { return false; },
 is$_RTCIceCandidateImpl: function() { return false; },
 is$_PerformanceTimingImpl: function() { return false; },
 is$List: function() { return false; },
 is$ImageData: function() { return false; },
 is$DOMMimeType: function() { return false; },
 is$MediaElement: function() { return false; },
 is$_TextTrackCueImpl: function() { return false; },
 is$_SpeechRecognitionResultImpl: function() { return false; },
 is$OListElement: function() { return false; },
 is$_EntryImpl: function() { return false; },
 is$Iterable: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$CSSValue: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$_SVGAnimatedRectImpl: function() { return false; },
 is$_AudioGainImpl: function() { return false; },
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return false; },
 is$_ElementImpl: function() { return false; },
 is$_MessagePortImpl: function() { return false; },
 is$_WorkerLocationImpl: function() { return false; },
 is$_GamepadImpl: function() { return false; },
 is$_SVGPreserveAspectRatioImpl: function() { return false; },
 is$_AudioListenerImpl: function() { return false; },
 is$_BatteryManagerImpl: function() { return false; },
 is$DOMPlugin: function() { return false; },
 is$_PerformanceImpl: function() { return false; },
 is$File: function() { return false; },
 is$_DirectoryEntryImpl: function() { return false; },
 is$_DOMImplementationImpl: function() { return false; },
 is$_HTMLCollectionImpl: function() { return false; },
 is$_SVGViewSpecImpl: function() { return false; },
 is$SpeechGrammarList: function() { return false; },
 is$_GeolocationImpl: function() { return false; },
 is$_ScreenImpl: function() { return false; },
 is$ClientRect: function() { return false; },
 is$_PagePopupControllerImpl: function() { return false; },
 is$_SVGAnimatedAngleImpl: function() { return false; },
 is$_AudioParamImpl: function() { return false; },
 is$_EntrySyncImpl: function() { return false; },
 is$_IDBFactoryImpl: function() { return false; },
 is$_SVGPointImpl: function() { return false; },
 is$_SVGAnimatedStringImpl: function() { return false; },
 is$SpeechGrammar: function() { return false; },
 is$_DOMFileSystemImpl: function() { return false; },
 is$_AudioDestinationNodeImpl: function() { return false; },
 is$_SVGAnimatedTransformListImpl: function() { return false; },
 is$_StorageInfoImpl: function() { return false; },
 is$_ConsoleImpl: function() { return false; },
 is$_DOMMimeTypeImpl: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$Entry: function() { return false; },
 is$_ScriptProfileNodeImpl: function() { return false; },
 is$DivElement: function() { return false; },
 is$SVGPathSeg: function() { return false; },
 is$_RGBColorImpl: function() { return false; },
 is$_CSSPrimitiveValueImpl: function() { return false; },
 is$_SVGElementInstanceImpl: function() { return false; },
 is$_SVGSVGElementImpl: function() { return false; },
 is$_AnimationImpl: function() { return false; },
 is$_SourceBufferListImpl: function() { return false; },
 is$_TimeRangesImpl: function() { return false; },
 is$_ValidityStateImpl: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$_CSSValueImpl: function() { return false; },
 is$CanvasElement: function() { return false; },
 is$_SVGMatrixImpl: function() { return false; },
 is$FormElement: function() { return false; },
 is$Element: function() { return false; },
 is$_StorageImpl: function() { return false; },
 is$AudioBuffer: function() { return false; },
 is$_SVGPointListImpl: function() { return false; },
 is$_ClientRectImpl: function() { return false; },
 is$SVGLength: function() { return false; },
 is$_MemoryInfoImpl: function() { return false; },
 is$LIElement: function() { return false; },
 is$_MediaKeyErrorImpl: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$_IDBTransactionImpl: function() { return false; },
 is$_SpeechGrammarImpl: function() { return false; },
 is$Collection: function() { return false; },
 is$_DOMApplicationCacheImpl: function() { return false; },
 is$SVGNumber: function() { return false; },
 is$_PerformanceNavigationImpl: function() { return false; },
 is$_SVGPathSegListImpl: function() { return false; },
 is$TableCaptionElement: function() { return false; },
 is$_SessionDescriptionImpl: function() { return false; },
 is$_SQLResultSetRowListImpl: function() { return false; },
 is$_CoordinatesImpl: function() { return false; },
 is$_SVGLengthImpl: function() { return false; },
 is$Float32Array: function() { return false; },
 is$_SVGLengthListImpl: function() { return false; },
 is$_ManagerStub: function() { return false; },
 is$_StyleSheetImpl: function() { return false; },
 is$AnchorElement: function() { return false; },
 is$_NavigatorImpl: function() { return false; },
 is$Gamepad: function() { return false; },
 is$ParagraphElement: function() { return false; },
 is$_DataTransferItemListImpl: function() { return false; },
 is$_MediaStreamTrackImpl: function() { return false; },
 is$_DirectoryEntrySyncImpl: function() { return false; },
 is$_NotificationCenterImpl: function() { return false; }
});

$.$defineNativeClass('Worker', [], {
 get$id: function() {
return this.id;
},
 set$id: function(i) {
this.id = i;
},
 set$onmessage: function(f) {
this.onmessage = f;
},
 postMessage$1: function(msg) {
return this.postMessage(msg);
},
 is$_ManagerStub: function() { return true; }
});

$.$defineNativeClass('DOMWindow', [], {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
}
});

$.$defineNativeClass('AbstractWorker', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', ["name?", "target?", "type?"], { set$target: function(v) { this.target = $.stringTypeCheck(v); },

 toString$0: function() {
  return this.toString();
},
 is$AnchorElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', ["duration?", "name?"], {
 is$_AnimationImpl: function() { return true; },
 is$Animation: function() { return true; }
});

$.$defineNativeClass('HTMLAppletElement', ["name?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', ["target?"], { set$target: function(v) { this.target = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', [], {
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', [], {
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Node: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', ["duration?", "length?"], {
 is$_AudioBufferImpl: function() { return true; },
 is$AudioBuffer: function() { return true; }
});

$.$defineNativeClass('AudioBufferSourceNode', [], {
 start$3: function(when, grainOffset, grainDuration) {
  $.numTypeCheck(when);
  if (!!this.start)
    this.start(when, grainOffset, grainDuration);
  else
    this.noteOn(when, grainOffset, grainDuration);
},
 start$1: function(when) {
  return this.start$3(when,null,null)
}
});

$.$defineNativeClass('AudioContext', [], {
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
},
 is$_AudioContextImpl: function() { return true; }
});

$.$defineNativeClass('AudioDestinationNode', [], {
 is$_AudioDestinationNodeImpl: function() { return true; }
});

$.$defineNativeClass('HTMLAudioElement', [], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('AudioGain', [], {
 is$_AudioGainImpl: function() { return true; }
});

$.$defineNativeClass('AudioListener', [], {
 is$_AudioListenerImpl: function() { return true; }
});

$.$defineNativeClass('AudioParam', ["name?", "value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$_AudioParamImpl: function() { return true; }
});

$.$defineNativeClass('AudioProcessingEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLBRElement', [], {
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('BarInfo', [], {
 is$_BarInfoImpl: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', ["target?"], { set$target: function(v) { this.target = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('BatteryManager', [], {
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_BatteryManagerImpl: function() { return true; }
});

$.$defineNativeClass('BeforeLoadEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('BiquadFilterNode', ["type?"], {
});

$.$defineNativeClass('Blob', ["type?"], {
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', [], {
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('CDATASection', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('CSSCharsetRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSFontFaceRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSImportRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframeRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', ["name?"], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('WebKitCSSMatrix', ["f?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSPageRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSPrimitiveValue', [], {
 is$_CSSPrimitiveValueImpl: function() { return true; },
 is$CSSValue: function() { return true; }
});

$.$defineNativeClass('CSSRule', ["type?"], {
 is$_CSSRuleImpl: function() { return true; },
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_CSSRuleImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'CSSRule');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$CSSRule');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$CSSRule');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$CSSRule');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', ["length?"], {
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 is$_CSSStyleDeclarationImpl: function() { return true; }
});

$.$defineNativeClass('CSSStyleRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSStyleSheet', [], {
 is$_CSSStyleSheetImpl: function() { return true; },
 is$StyleSheet: function() { return true; }
});

$.$defineNativeClass('WebKitCSSTransformValue', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', [], {
 is$CSSRule: function() { return true; }
});

$.$defineNativeClass('CSSValue', [], {
 is$_CSSValueImpl: function() { return true; },
 is$CSSValue: function() { return true; }
});

$.$defineNativeClass('CSSValueList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_CSSValueImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'CSSValue');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$CSSValue');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$CSSValue');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$CSSValue');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', [], {
 is$CanvasElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', [], {
 is$CanvasRenderingContext2D: function() { return true; }
});

$.$defineNativeClass('CharacterData', ["length?"], {
 remove$0: function() {
  return this.remove();
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('ClientRect', [], {
 is$_ClientRectImpl: function() { return true; },
 is$ClientRect: function() { return true; }
});

$.$defineNativeClass('ClientRectList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_ClientRectImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'ClientRect');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$ClientRect');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$ClientRect');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$ClientRect');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Clipboard', [], {
 is$_ClipboardImpl: function() { return true; }
});

$.$defineNativeClass('CloseEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('Comment', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('CompositionEvent', [], {
 is$Event: function() { return true; }
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.time$1 = function(title) {
  return this.time($.stringTypeCheck(title));
};
_ConsoleImpl.get$time = function() { return new $.BoundClosure0(this, 'time$1'); };
$.$defineNativeClass('HTMLContentElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Coordinates', [], {
 is$_CoordinatesImpl: function() { return true; }
});

$.$defineNativeClass('Crypto', [], {
 is$_CryptoImpl: function() { return true; }
});

$.$defineNativeClass('CustomEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLDListElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', [], {
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 update$0: function() {
  return this.update();
},
 is$_DOMApplicationCacheImpl: function() { return true; }
});

$.$defineNativeClass('DOMError', ["name?"], {
 is$_DOMErrorImpl: function() { return true; }
});

$.$defineNativeClass('DOMException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', ["name?"], {
 is$_DOMFileSystemImpl: function() { return true; }
});

$.$defineNativeClass('DOMFileSystemSync', ["name?"], {
 is$_DOMFileSystemSyncImpl: function() { return true; }
});

$.$defineNativeClass('DOMImplementation', [], {
 is$_DOMImplementationImpl: function() { return true; }
});

$.$defineNativeClass('MimeTypeArray', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_DOMMimeTypeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'DOMMimeType');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$DOMMimeType');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$DOMMimeType');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$DOMMimeType');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_DOMMimeTypeArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MimeType', ["type?"], {
 is$_DOMMimeTypeImpl: function() { return true; },
 is$DOMMimeType: function() { return true; }
});

$.$defineNativeClass('PluginArray', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_DOMPluginImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'DOMPlugin');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$DOMPlugin');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$DOMPlugin');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$DOMPlugin');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_DOMPluginArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Plugin', ["length?", "name?"], {
 is$_DOMPluginImpl: function() { return true; },
 is$DOMPlugin: function() { return true; }
});

$.$defineNativeClass('Selection', ["type?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$_DOMSettableTokenListImpl: function() { return true; },
 is$DOMSettableTokenList: function() { return true; }
});

$.$defineNativeClass('DOMStringList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.stringTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', ["length?"], {
 add$1: function(token) {
  return this.add($.stringTypeCheck(token));
},
 remove$1: function(token) {
  return this.remove($.stringTypeCheck(token));
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', ["type?"], {
});

$.$defineNativeClass('DataTransferItemList', ["length?"], {
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
},
 is$_DataTransferItemListImpl: function() { return true; }
});

$.$defineNativeClass('DataView', [], {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', [], {
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('DeviceOrientationEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', [], {
 is$_DirectoryEntryImpl: function() { return true; },
 is$Entry: function() { return true; }
});

$.$defineNativeClass('DirectoryEntrySync', [], {
 is$_DirectoryEntrySyncImpl: function() { return true; },
 is$EntrySync: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', [], {
 is$DivElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', [], {
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.listTypeCheck($._FilteredElementList$(this));
  return this._elements;
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure1(this, 'click$0'); },
 set$id: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedOperationException$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', [], {
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById($.stringTypeCheck(elementId));
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.boolConversionCheck($.CTC23.hasMatch$1(selectors)))
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 is$_DocumentImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('DocumentType', ["name?"], {
 remove$0: function() {
  return this.remove();
},
 is$Node: function() { return true; }
});

$.$defineNativeClass('Element', ["id?"], { set$id: function(v) { this.id = $.stringTypeCheck(v); },

 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
return this.children;
},
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure1(this, 'click$0'); },
 get$$$dom_firstElementChild: function() {
return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
return this.lastElementChild;
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$_ElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', ["name?", "type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Entity', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('EntityReference', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('EntryArray', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_EntryImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Entry');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Entry');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Entry');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Entry');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_EntrySyncImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'EntrySync');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$EntrySync');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$EntrySync');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$EntrySync');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Entry', ["name?"], {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS($.functionTypeCheck(successCallback), 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
},
 is$_EntryImpl: function() { return true; },
 is$Entry: function() { return true; }
});

$.$defineNativeClass('EntrySync', ["name?"], {
 remove$0: function() {
  return this.remove();
},
 is$_EntrySyncImpl: function() { return true; },
 is$EntrySync: function() { return true; }
});

$.$defineNativeClass('ErrorEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('EventException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Event', ["type?"], {
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_lib_target());
},
 get$_lib_target: function() {
return this.target;
},
 is$_EventImpl: function() { return true; },
 is$Event: function() { return true; }
});

$.$defineNativeClass('EventSource', [], {
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', ["elements?", "name?", "type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('FileEntry', [], {
 is$Entry: function() { return true; }
});

$.$defineNativeClass('FileEntrySync', [], {
 is$EntrySync: function() { return true; }
});

$.$defineNativeClass('FileError', [], {
 is$_FileErrorImpl: function() { return true; }
});

$.$defineNativeClass('FileException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('File', ["name?"], {
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_FileImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'File');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$File');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('FileReader', [], {
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', ["length?"], {
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', ["length?"], {
});

$.$defineNativeClass('Float32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.numTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.numTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_Float32ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Float32Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.numTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.numTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.numTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', ["length?", "name?", "target?"], { set$target: function(v) { this.target = $.stringTypeCheck(v); },

 reset$0: function() {
  return this.reset();
},
 is$FormElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', ["name?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', [], {
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Gamepad', ["id?"], {
 is$_GamepadImpl: function() { return true; },
 is$Gamepad: function() { return true; }
});

$.$defineNativeClass('GamepadList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_GamepadImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Gamepad');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Gamepad');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Gamepad');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Gamepad');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Geolocation', [], {
 is$_GeolocationImpl: function() { return true; }
});

$.$defineNativeClass('HTMLHRElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Node');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Node');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_HTMLCollectionImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', [], {
 get$length: function() {
return this.length;
},
 set$length: function(value) {
  $.intTypeCheck(value);
this.length = value;
},
 remove$1: function(index) {
  return this.remove($.intTypeCheck(index));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', [], {
 is$HeadElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequest', [], {
 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestUpload', [], {
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$HttpRequestUpload: function() { return true; }
});

$.$defineNativeClass('IDBCursorWithValue', [], {
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
return this.value;
}
});

$.$defineNativeClass('IDBDatabaseException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBDatabase', ["name?"], {
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_IDBDatabaseImpl: function() { return true; }
});

$.$defineNativeClass('IDBFactory', [], {
 is$_IDBFactoryImpl: function() { return true; }
});

$.$defineNativeClass('IDBIndex', ["name?"], {
});

$.$defineNativeClass('IDBObjectStore', ["name?"], {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 is$_IDBObjectStoreImpl: function() { return true; }
});

$.$defineNativeClass('IDBOpenDBRequest', [], {
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBRequest', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('IDBTransaction', [], {
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_IDBTransactionImpl: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeRequest', [], {
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', ["name?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ImageData', [], {
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', ["name?"], {
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Int16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', [], {
 get$on: function() {
  return $._JavaScriptAudioNodeEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('JavaScriptCallFrame', ["type?"], {
 is$_JavaScriptCallFrameImpl: function() { return true; }
});

$.$defineNativeClass('KeyboardEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', ["name?", "type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', ["type?", "value?"], { set$value: function(v) { this.value = $.intTypeCheck(v); },

 is$LIElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', ["target?", "type?"], { set$target: function(v) { this.target = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('History', ["length?"], {
 is$_LocalHistoryImpl: function() { return true; }
});

$.$defineNativeClass('Location', [], {
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', [], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$MediaStream: function() { return true; }
});

$.$defineNativeClass('DOMWindow', ["name?", "navigator?"], {
 get$on: function() {
  return $._LocalWindowEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', ["name?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', [], {
 start$0: function() {
  return this.start();
},
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MediaController', ["duration?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaControllerImpl: function() { return true; },
 is$MediaController: function() { return true; }
});

$.$defineNativeClass('HTMLMediaElement', ["duration?"], {
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MediaError', [], {
 is$_MediaErrorImpl: function() { return true; }
});

$.$defineNativeClass('MediaKeyError', [], {
 is$_MediaKeyErrorImpl: function() { return true; }
});

$.$defineNativeClass('MediaKeyEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MediaList', ["length?"], {
 is$_MediaListImpl: function() { return true; }
});

$.$defineNativeClass('MediaSource', ["duration?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MediaStream', [], {
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

},
 is$_MediaStreamImpl: function() { return true; },
 is$MediaStream: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_MediaStreamImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'MediaStream');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$MediaStream');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$MediaStream');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$MediaStream');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrack', [], {
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaStreamTrackImpl: function() { return true; },
 is$MediaStreamTrack: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackList', ["length?"], {
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 add$1: function(track) {
  return this.add($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaStreamTrackListImpl: function() { return true; }
});

$.$defineNativeClass('MemoryInfo', [], {
 is$_MemoryInfoImpl: function() { return true; }
});

$.$defineNativeClass('HTMLMenuElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MessageEvent', ["ports?"], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MessagePort', [], {
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 is$_MessagePortImpl: function() { return true; }
});

$.$defineNativeClass('HTMLMetaElement', ["name?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('MouseEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MutationEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('MutationRecord', ["target?", "type?"], {
});

$.$defineNativeClass('NamedNodeMap', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Node');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_NamedNodeMapImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Navigator', ["userAgent?"], {
 is$_NavigatorImpl: function() { return true; }
});

$.$defineNativeClass('NodeFilter', [], {
 is$_NodeFilterImpl: function() { return true; }
});

$.$defineNativeClass('Node', [], {
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    $.callTypeCheck(this.get$parent(), 'is$_NodeImpl').$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode) {
  $.callTypeCheck(otherNode, 'is$Node');
  try {
    var parent$ = $.callTypeCheck(this.get$parent(), 'is$_NodeImpl');
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_childNodes: function() {
return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  $.stringTypeCheck(value);
this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild($.callTypeCheck(newChild, 'is$_NodeImpl'));
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild($.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild($.callTypeCheck(newChild, 'is$_NodeImpl'),$.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 is$_NodeImpl: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('NodeIterator', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', ["length?"], {
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._parent; $.boolConversionCheck(t1.hasNext$0());)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.UnsupportedOperationException$('Cannot sort immutable List.'));
},
 lastIndexOf$2: function(element, start) {
  return $._Lists_lastIndexOf(this, $.callTypeCheck(element, 'is$Node'), start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []));
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Notation', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('NotificationCenter', [], {
 is$_NotificationCenterImpl: function() { return true; }
});

$.$defineNativeClass('Notification', [], {
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', ["type?"], {
 start$1: function(arg0) { return this.start.call$1(arg0); },
 start$0: function() { return this.start.call$0(); },
 is$OListElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', ["name?", "type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Oscillator', ["type?"], {
 start$1: function(when) {
  return this.start($.numTypeCheck(when));
}
});

$.$defineNativeClass('HTMLOutputElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('PagePopupController', [], {
 is$_PagePopupControllerImpl: function() { return true; }
});

$.$defineNativeClass('PageTransitionEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', [], {
 is$ParagraphElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', [], {
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', [], {
 is$_PerformanceImpl: function() { return true; }
});

$.$defineNativeClass('PerformanceNavigation', ["type?"], {
 is$_PerformanceNavigationImpl: function() { return true; }
});

$.$defineNativeClass('PerformanceTiming', [], {
 is$_PerformanceTimingImpl: function() { return true; }
});

$.$defineNativeClass('PopStateEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLPreElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', ["target?"], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('RGBColor', [], {
 is$_RGBColorImpl: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidateEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidate', [], {
 is$_RTCIceCandidateImpl: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', [], {
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', ["type?"], {
 is$_RTCSessionDescriptionImpl: function() { return true; }
});

$.$defineNativeClass('RadioNodeList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('RangeException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Range', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SQLResultSetRowList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Map');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Map');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Map');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_SQLResultSetRowListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAElement', ["target?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAngle', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$_SVGAngleImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimateColorElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', [], {
 is$_SVGAnimateTransformElementImpl: function() { return true; },
 is$SVGAnimateTransformElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', [], {
 is$_SVGAnimatedAngleImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedBoolean', [], {
 is$_SVGAnimatedBooleanImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedEnumeration', [], {
 is$_SVGAnimatedEnumerationImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedInteger', [], {
 is$_SVGAnimatedIntegerImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLength', [], {
 is$_SVGAnimatedLengthImpl: function() { return true; },
 is$SVGAnimatedLength: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLengthList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGAnimatedLengthImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimatedLength');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimatedLength');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimatedLength');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGAnimatedLength');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_SVGAnimatedLengthListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', [], {
 is$_SVGAnimatedNumberImpl: function() { return true; },
 is$SVGAnimatedNumber: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGAnimatedNumberImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimatedNumber');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimatedNumber');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimatedNumber');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGAnimatedNumber');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_SVGAnimatedNumberListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', [], {
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedRect', [], {
 is$_SVGAnimatedRectImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedString', [], {
 is$_SVGAnimatedStringImpl: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGAnimateTransformElementImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimateTransformElement');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimateTransformElement');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGAnimateTransformElement');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGAnimateTransformElement');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_SVGAnimatedTransformListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGColor', [], {
 is$CSSValue: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGDocument', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGElement', [], {
 get$elements: function() {
  return $._FilteredElementList$(this);
},
 get$id: function() {
return this.id;
},
 set$id: function(value) {
  $.stringTypeCheck(value);
this.id = value;
},
 is$_SVGElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', [], {
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
},
 is$_SVGElementInstanceImpl: function() { return true; },
 is$SVGElementInstance: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGElementInstanceImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGElementInstance');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGElementInstance');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGElementInstance');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGElementInstance');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGLength', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$_SVGLengthImpl: function() { return true; },
 is$SVGLength: function() { return true; }
});

$.$defineNativeClass('SVGLengthList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGLengthImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGLength');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGLength');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGLength');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGLength');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 clear$0: function() {
  return this.clear();
},
 is$_SVGLengthListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', ["f?"], {
 is$_SVGMatrixImpl: function() { return true; }
});

$.$defineNativeClass('SVGMetadataElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGNumber', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v); },

 is$_SVGNumberImpl: function() { return true; },
 is$SVGNumber: function() { return true; }
});

$.$defineNativeClass('SVGNumberList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGNumberImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGNumber');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGNumber');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGNumber');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGNumber');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 clear$0: function() {
  return this.clear();
},
 is$_SVGNumberListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPaint', [], {
 is$CSSValue: function() { return true; }
});

$.$defineNativeClass('SVGPathElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegClosePath', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSeg', [], {
 is$_SVGPathSegImpl: function() { return true; },
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGPathSegImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGPathSeg');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGPathSeg');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGPathSeg');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGPathSeg');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 clear$0: function() {
  return this.clear();
},
 is$_SVGPathSegListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoRel', [], {
 is$SVGPathSeg: function() { return true; }
});

$.$defineNativeClass('SVGPatternElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPoint', [], {
 is$_SVGPointImpl: function() { return true; }
});

$.$defineNativeClass('SVGPointList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGPointListImpl: function() { return true; }
});

$.$defineNativeClass('SVGPolygonElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', [], {
 is$_SVGPreserveAspectRatioImpl: function() { return true; }
});

$.$defineNativeClass('SVGRadialGradientElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGRect', [], {
 is$_SVGRectImpl: function() { return true; }
});

$.$defineNativeClass('SVGSVGElement', [], {
 is$_SVGSVGElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGStringList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.stringTypeCheck(value);
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.stringTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 clear$0: function() {
  return this.clear();
},
 is$_SVGStringListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGTransform', ["type?"], {
 is$_SVGTransformImpl: function() { return true; },
 is$SVGTransform: function() { return true; }
});

$.$defineNativeClass('SVGTransformList', [], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SVGTransformImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGTransform');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SVGTransform');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SVGTransform');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SVGTransform');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 clear$0: function() {
  return this.clear();
},
 is$_SVGTransformListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', [], {
 is$_SVGUseElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', [], {
 is$_SVGViewSpecImpl: function() { return true; }
});

$.$defineNativeClass('SVGZoomEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('Screen', [], {
 is$_ScreenImpl: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ScriptProfileNode', [], {
 is$_ScriptProfileNodeImpl: function() { return true; }
});

$.$defineNativeClass('HTMLSelectElement', ["length?", "name?", "type?", "value?"], { set$length: function(v) { this.length = $.intTypeCheck(v); },
 set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SessionDescription', [], {
 is$_SessionDescriptionImpl: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', ["name?"], {
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
}
});

$.$defineNativeClass('SourceBuffer', [], {
 append$1: function(data) {
  return this.append($.callTypeCheck(data, 'is$_Uint8ArrayImpl'));
},
 is$_SourceBufferImpl: function() { return true; },
 is$SourceBuffer: function() { return true; }
});

$.$defineNativeClass('SourceBufferList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SourceBufferImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SourceBuffer');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SourceBuffer');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SourceBuffer');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SourceBuffer');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_SourceBufferListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', [], {
 is$_SpeechGrammarImpl: function() { return true; },
 is$SpeechGrammar: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SpeechGrammarImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechGrammar');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechGrammar');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechGrammar');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SpeechGrammar');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_SpeechGrammarListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$SpeechGrammarList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('SpeechInputResult', [], {
 is$_SpeechInputResultImpl: function() { return true; },
 is$SpeechInputResult: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SpeechInputResultImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechInputResult');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechInputResult');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechInputResult');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SpeechInputResult');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionError', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', [], {
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('SpeechRecognitionResult', ["length?"], {
 is$_SpeechRecognitionResultImpl: function() { return true; },
 is$SpeechRecognitionResult: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_SpeechRecognitionResultImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechRecognitionResult');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechRecognitionResult');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$SpeechRecognitionResult');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$SpeechRecognitionResult');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('StorageEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('Storage', [], {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1($.stringTypeCheck(key)) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1($.stringTypeCheck(key));
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2($.stringTypeCheck(key), $.stringTypeCheck(value));
},
 remove$1: function(key) {
  $.stringTypeCheck(key);
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  $.functionTypeCheck(f);
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 isEmpty$0: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$_StorageImpl: function() { return true; },
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageInfo', [], {
 is$_StorageInfoImpl: function() { return true; }
});

$.$defineNativeClass('HTMLStyleElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('StyleMedia', ["type?"], {
 is$_StyleMediaImpl: function() { return true; }
});

$.$defineNativeClass('StyleSheet', ["type?"], {
 is$_StyleSheetImpl: function() { return true; },
 is$StyleSheet: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_StyleSheetImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'StyleSheet');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$StyleSheet');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', [], {
 is$TableCaptionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', [], {
 is$TableSectionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v); },

 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TextEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('Text', [], {
 is$Node: function() { return true; }
});

$.$defineNativeClass('TextTrackCue', ["id?", "text"], { set$id: function(v) { this.id = $.stringTypeCheck(v); },
 set$text: function(v) { this.text = $.stringTypeCheck(v); },

 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_TextTrackCueImpl: function() { return true; },
 is$TextTrackCue: function() { return true; }
});

$.$defineNativeClass('TextTrackCueList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_TextTrackCueImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'TextTrackCue');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrackCue');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrackCue');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$TextTrackCue');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_TextTrackCueListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TextTrack', [], {
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_TextTrackImpl: function() { return true; },
 is$TextTrack: function() { return true; }
});

$.$defineNativeClass('TextTrackList', ["length?"], {
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_TextTrackImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'TextTrack');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrack');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$TextTrack');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$TextTrack');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_TextTrackListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TimeRanges', ["length?"], {
 start$1: function(index) {
  return this.start($.intTypeCheck(index));
},
 is$_TimeRangesImpl: function() { return true; }
});

$.$defineNativeClass('HTMLTitleElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TouchEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('Touch', [], {
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_lib_target());
},
 get$_lib_target: function() {
return this.target;
},
 is$_TouchImpl: function() { return true; },
 is$Touch: function() { return true; }
});

$.$defineNativeClass('TouchList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_TouchImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Touch');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Touch');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_TouchListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('TrackEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('WebKitTransitionEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('TreeWalker', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('UIEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('HTMLUListElement', ["type?"], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('Uint16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.intTypeCheck(value);
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.intTypeCheck(value);
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.intTypeCheck(element);
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$_Uint8ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', [], {
 is$_Uint8ClampedArrayImpl: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', [], {
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('ValidityState', [], {
 is$_ValidityStateImpl: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', [], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', ["name?", "type?"], {
});

$.$defineNativeClass('WebGLContextEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index);
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index);
  $.callTypeCheck(value, 'is$_AnimationImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Animation');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Animation');
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Animation');
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f));
},
 filter$1: function(f) {
  $.functionTypeCheck(f);
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  $.functionTypeCheck(compare);
  throw $.$$throw($.CTC18);
},
 lastIndexOf$2: function(element, start) {
  $.callTypeCheck(element, 'is$Animation');
  if (start == null)
    start = $.intTypeCheck($.sub($.get$length(this), 1));
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC11);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, $.intTypeCheck(rangeLength), []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', ["name?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', [], {
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('WheelEvent', [], {
 is$Event: function() { return true; }
});

$.$defineNativeClass('WorkerContext', ["navigator?"], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler), 0),timeout);
},
 is$_WorkerContextImpl: function() { return true; }
});

$.$defineNativeClass('Worker', [], {
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 terminate$0: function() {
  return this.terminate();
}
});

$.$defineNativeClass('WorkerLocation', [], {
 toString$0: function() {
  return this.toString();
},
 is$_WorkerLocationImpl: function() { return true; }
});

$.$defineNativeClass('WorkerNavigator', ["userAgent?"], {
 is$_WorkerNavigatorImpl: function() { return true; }
});

$.$defineNativeClass('XPathException', ["name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', [], {
 reset$0: function() {
  return this.reset();
}
});

// 445 dynamic classes.
// 447 classes
// 37 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v3/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v4/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v5/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v6/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v7/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v8/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v9/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v10/*class(_SVGElementImpl)*/ = [v6/*class(_SVGTextContentElementImpl)*/,v7/*class(_SVGGradientElementImpl)*/,v8/*class(_SVGComponentTransferFunctionElementImpl)*/,v9/*class(_SVGAnimationElementImpl)*/,v6/*class(_SVGTextContentElementImpl)*/,v7/*class(_SVGGradientElementImpl)*/,v8/*class(_SVGComponentTransferFunctionElementImpl)*/,v9/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v11/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v12/*class(_UIEventImpl)*/ = [v2/*class(_MouseEventImpl)*/,v2/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v13/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v14/*class(_ElementImpl)*/ = [v10/*class(_SVGElementImpl)*/,v11/*class(_MediaElementImpl)*/,v10/*class(_SVGElementImpl)*/,v11/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v15/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v16/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v17/*class(_CharacterDataImpl)*/ = [v5/*class(_TextImpl)*/,v5/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v18/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v19/*class(_NodeImpl)*/ = [v14/*class(_ElementImpl)*/,v15/*class(_DocumentImpl)*/,v16/*class(_DocumentFragmentImpl)*/,v17/*class(_CharacterDataImpl)*/,v14/*class(_ElementImpl)*/,v15/*class(_DocumentImpl)*/,v16/*class(_DocumentFragmentImpl)*/,v17/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr'].join('|');
  var v20/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v21/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v22/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs'],
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v6/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['Text', v5/*class(_TextImpl)*/],
    ['AbstractWorker', v22/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['MouseEvent', v2/*class(_MouseEventImpl)*/],
    ['UIEvent', v12/*class(_UIEventImpl)*/],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['WorkerContext', v18/*class(_WorkerContextImpl)*/],
    ['SVGColor', v3/*class(_SVGColorImpl)*/],
    ['CSSValueList', v4/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v3/*class(_SVGColorImpl)*/,v4/*class(_CSSValueListImpl)*/,v3/*class(_SVGColorImpl)*/,v4/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CharacterData', v17/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['DocumentFragment', v16/*class(_DocumentFragmentImpl)*/],
    ['HTMLDocument', v15/*class(_DocumentImpl)*/],
    ['SVGGradientElement', v7/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v8/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v9/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v10/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v11/*class(_MediaElementImpl)*/],
    ['Element', v14/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['ProgressEvent', v13/*class(_ProgressEventImpl)*/],
    ['Event', [v12/*class(_UIEventImpl)*/,v13/*class(_ProgressEventImpl)*/,v12/*class(_UIEventImpl)*/,v13/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v19/*class(_NodeImpl)*/],
    ['MediaStream', v20/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v21/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v18/*class(_WorkerContextImpl)*/,v19/*class(_NodeImpl)*/,v20/*class(_MediaStreamImpl)*/,v21/*class(_IDBRequestImpl)*/,v22/*class(_AbstractWorkerImpl)*/,v18/*class(_WorkerContextImpl)*/,v19/*class(_NodeImpl)*/,v20/*class(_MediaStreamImpl)*/,v21/*class(_IDBRequestImpl)*/,v22/*class(_AbstractWorkerImpl)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrack|TextTrackCue|SpeechRecognition|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|WebSocket|WebKitNamedFlow|TextTrack|TextTrackCue|SpeechRecognition|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=tis_002.html.dart.js.map